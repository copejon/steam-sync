{"version":3,"sources":["webpack://@jupyterlab/application-top/./node_modules/@babel/runtime/helpers/interopRequireDefault.js","webpack://@jupyterlab/application-top/./node_modules/@babel/runtime/helpers/interopRequireWildcard.js","webpack://@jupyterlab/application-top/./node_modules/@babel/runtime/helpers/typeof.js","webpack://@jupyterlab/application-top/./node_modules/@material-ui/icons/Clear.js","webpack://@jupyterlab/application-top/./node_modules/@material-ui/icons/utils/createSvgIcon.js","webpack://@jupyterlab/application-top/./node_modules/@material-ui/lab/esm/internal/svg-icons/SuccessOutlined.js","webpack://@jupyterlab/application-top/./node_modules/@material-ui/lab/esm/internal/svg-icons/ReportProblemOutlined.js","webpack://@jupyterlab/application-top/./node_modules/@material-ui/lab/esm/internal/svg-icons/ErrorOutline.js","webpack://@jupyterlab/application-top/./node_modules/@material-ui/lab/esm/internal/svg-icons/InfoOutlined.js","webpack://@jupyterlab/application-top/./node_modules/@material-ui/lab/esm/internal/svg-icons/Close.js","webpack://@jupyterlab/application-top/./node_modules/@material-ui/lab/esm/Alert/Alert.js","webpack://@jupyterlab/application-top/./node_modules/json-stable-stringify/index.js","webpack://@jupyterlab/application-top/./node_modules/jsonify/index.js","webpack://@jupyterlab/application-top/./node_modules/jsonify/lib/parse.js","webpack://@jupyterlab/application-top/./node_modules/jsonify/lib/stringify.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/chunking/decisionchunking.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/chunking/diffchunking.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/chunking/index.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/common/collapsiblepanel.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/common/dragpanel.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/common/editor.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/common/exceptions.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/common/mergeview.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/common/util.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/diffentries.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/model/cell.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/model/common.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/model/immutable.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/model/index.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/model/notebook.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/model/output.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/model/renderable.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/model/string.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/range.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/util.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/widget/cell.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/widget/common.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/widget/index.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/widget/metadata.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/widget/notebook.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/widget/output.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/widget/renderable.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/decisions.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/model/cell.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/model/common.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/model/index.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/model/metadata.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/model/notebook.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/widget/cell.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/widget/common.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/widget/dragdrop.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/widget/index.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/widget/metadata.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/widget/notebook.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/widget/output.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/patch/common.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/patch/generic.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/patch/index.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/patch/stringified.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/upstreaming/flexlayout.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/upstreaming/flexpanel.js"],"names":["_interopRequireDefault","obj","__esModule","module","exports","_typeof","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","Symbol","iterator","constructor","value","React","_createSvgIcon","_default","default","createElement","d","enumerable","_utils","createSvgIcon","styles","theme","getColor","palette","type","getBackgroundColor","root","typography","body2","borderRadius","shape","backgroundColor","display","padding","standardSuccess","color","success","main","standardInfo","info","standardWarning","warning","standardError","error","outlinedSuccess","border","concat","outlinedInfo","outlinedWarning","outlinedError","filledSuccess","fontWeight","fontWeightMedium","filledInfo","filledWarning","filledError","icon","marginRight","fontSize","opacity","message","action","alignItems","marginLeft","paddingLeft","defaultIconMapping","SuccessOutlined","ReportProblemOutlined","ErrorOutline","InfoOutlined","_ref","Close","Alert","props","ref","children","classes","className","_props$closeText","closeText","_props$iconMapping","iconMapping","onClose","_props$role","role","_props$severity","severity","_props$variant","variant","other","Paper","square","elevation","capitalize","IconButton","size","title","onClick","withStyles","name","json","JSON","isArray","Array","x","toString","objectKeys","keys","push","opts","cmp","space","join","cycles","replacer","f","node","a","b","aobj","bobj","seen","stringify","parent","level","indent","colonSeparator","toJSON","undefined","out","i","length","item","indexOf","TypeError","sort","keyValue","splice","parse","at","ch","escapee","n","r","t","text","m","next","c","charAt","number","num","str","Number","isFinite","string","hex","uffff","parseInt","String","fromCharCode","white","word","array","arr","object","source","reviver","result","walk","holder","k","v","val","escapable","gap","meta","rep","quote","lastIndex","test","replace","charCodeAt","slice","mind","partial","apply","Error","splitMergeDecisionsOnChunks","diffentries_1","decisions_1","util_1","anyDiffs","diffs","hasEntries","getSectionBoundaries","boundaries","e","j","op","filter","unique","splitDiffsOnBoundaries","newdiffs","valueIn","opRemoveRange","makeChunks","iDiffs","map","valueOf","chunks","subDiffs","dis","baseStart","baseEnd","makeMergeChunks","base","newBoundaries","splitDiffs","splitDecisionByChunks","decision","cd","customDiff","localPath","pushPath","MergeDecision","absolutePath","conflict","decisions","md","buildDiffs","labelSource","lineToNormalChunks","LineChunker","Chunker","Chunk","baseFrom","baseTo","remoteFrom","remoteTo","this","sources","inEdit","line","inOrig","_currentGhost","editOffset","_getCurrent","_overlapChunk","chunk","range","isAddition","from","addDiff","linediff","to","endsOnNewline","firstLineNew","startOffset","chunkStartLine","endOffset","current","Math","max","startRemote","startBase","addGhost","offset","startEdit","startOrig","fromLine","lineChunks","ret","shallowCopy","diff","__createBinding","create","o","k2","__exportStar","p","CollapsiblePanel","widgets_1","COLLAPSIBLE_CLASS","COLLAPSIBLE_HEADER","COLLAPSIBLE_HEADER_ICON","COLLAPSIBLE_HEADER_ICON_OPEN","COLLAPSIBLE_HEADER_ICON_CLOSED","COLLAPSIBLE_SLIDER","COLLAPSIBLE_OPEN","COLLAPSIBLE_CLOSED","COLLAPSIBLE_CONTAINER","Panel","inner","headerTitle","collapsed","super","addClass","header","createHeader","button","getElementsByClassName","onclick","toggleCollapsed","bind","addWidget","container","slider","classList","add","innerText","document","appendChild","removeClass","remove","hasClass","FriendlyDragDrop","DragDropPanel","DragPanel","DragDropPanelBase","DropPanel","findChild","belongsToUs","MIME_INDEX","coreutils_1","dragdrop_1","DROP_WIDGET_CLASS","DRAG_WIDGET_CLASS","DRAG_HANDLE","DEFAULT_DRAG_HANDLE_CLASS","DROP_TARGET_CLASS","DRAG_THRESHOLD","parentClass","parentNode","candidate","contains","parentElement","child","parentIsArray","isDirectChild","options","acceptDropsFromExternalSource","handleEvent","event","_evtDragEnter","_evtDragLeave","_evtDragOver","evtDrop","validateSource","findDropTarget","input","mimeData","hasData","target","dropAction","preventDefault","stopPropagation","processDrop","onAfterAttach","msg","addEventListener","onBeforeDetach","removeEventListener","_clearDropTarget","proposedAction","elements","drag","dragHandleClass","_clickData","childrenAreDragHandles","dispose","_evtDragMousedown","_evtDragMouseup","_evtDragMousemove","findDragTarget","handle","getDragImage","cloneNode","onDragComplete","startDrag","clientX","clientY","dragImage","Drag","MimeData","supportedActions","addMimeData","start","then","_findDragHandle","pressX","pressY","data","dx","abs","dy","dropTarget","move","insertWidget","widgets","getIndexOfChildNode","layout","setData","isValidAction","sourceKey","getData","targetKey","supported","makeHandle","unmakeHandle","createDefaultHandle","widget","Widget","id","_counter","_groups","setFriendlyGroup","_groupId","addToFriendlyGroup","friends","panel","EditorWidget","codeeditor_1","codemirror_1","CodeEditorWrapper","readOnly","extraKeys","Tab","model","CodeEditor","Model","factory","CodeMirrorEditorFactory","newInlineEditor","staticLoaded","editors","cm","editor","doc","onResize","width","height","setSize","getOption","NotifyUserError","setPrototypeOf","stack","MergeView","DiffView","createNbdimeMergeView","EventDirection","DIFF_OP","CodeMirror","model_1","chunking_1","editor_1","exceptions_1","PICKER_SYMBOL","CONFLICT_MARKER","GUTTER_PICKER_CLASS","GUTTER_CONFLICT_CLASS","CHUNK_CONFLICT_CLASS","leftClasses","end","insert","del","connect","gutter","rightClasses","mergeClassPrefix","remote","local","merged","orig","collapseIdentical","mergeview","left","right","merge","mimetype","ownWidget","mimeType","updateCallback","collapsedRanges","ownValue","copyObj","showDifferences","init","baseEditor","state","diffViews","ownEditor","on","onGutterClick","getLineChunks","dealigned","forceUpdate","registerUpdate","setScrollLock","registerScroll","setShowDifferences","syncModel","modelInvalid","edit","updatedLineChunks","updatedChunks","getValue","cursor","getDoc","getCursor","newLines","splitLines","firstLine","last","lastLine","cumulativeOffset","updatedEnd","baseLine","getMatchingEditLine","replaceRange","Pos","setCursor","buildGap","lock","lockButton","elt","lockWrap","self","lockScroll","syncScroll","OUTGOING","innerHTML","editMarkers","origMarkers","debounceChange","updating","updatingFast","update","mode","clearMergeMarks","clearMarks","updateMarks","additions","DIFF_INSERT","deletions","DIFF_DELETE","checkSync","setDealign","fast","upd","dv","clearTimeout","window","setTimeout","change","_cm","DecisionStringDiffModel","invalid","instance","clickEvent","li","lineInfo","gutterMarkers","ss","s","setGutterMarker","invalidate","INCOMING","scrollSetBy","scrollPosition","getScrollInfo","scrollTicking","sInfo","top","requestAnimationFrame","scrollTo","markers","markChunk","si","addLineClass","picker","localDiff","remoteDiff","conflictMarker","cls","operation","highlightChars","postfix","isTextMarker","marker","mark","clear","removeLineClass","bgClass","ranges","origCls","markText","getMatchingEditLineLC","toMatch","editLine","findAlignedLines","dvs","linesToAlign","ignored","others","lines","prev","align","alignLines","aligners","maxOffset","off","heightAtLine","padAbove","above","style","minWidth","addLineWidget","initialized","panes","lineNumbers","dvOptions","gutters","lineWrapping","showBase","leftWidget","alignViews","rightWidget","mergeWidget","unchanged","added","deleted","collapseIdenticalStretches","force","scroll","ln","curOp","fn","getMergedValue","collapseSingle","inclusiveLeft","inclusiveRight","replacedWith","clearOnEnter","collapseStretch","marks","unclearNearChunks","margin","l","pos","mv","onCollapse","tag","content","cssText","createTextNode","findPrevDiff","isOrig","findNextDiff","DiffDirection","goNearbyDiff","dir","found","views","Previous","Pass","commands","goNextDiff","Next","goPrevDiff","buildSelect","stableSort","intersection","accumulateLengths","repeatString","sortByKey","isPrefixArray","findSharedPrefix","arraysEqual","deepCopy","multiline","match","original","clone","getPrototypeOf","ok","Function","pDesc","min","y","count","pattern","reduce","index","ia","compare","sorters","prop","select","option","opt","validateObjectOp","validateSequenceOp","opPatch","opAddRange","opRemove","opAdd","opReplace","valuelist","entry","console","isNaN","RangeError","skip","createDeletedCellDiffModel","createAddedCellDiffModel","createUnchangedCellDiffModel","createPatchedCellDiffModel","CellDiffModel","nbformat","string_1","output_1","immutable_1","metadata","outputs","executionCount","cellType","collapsible","collapsibleHeader","startCollapsed","getChunkedOutputs","currentChunk","nbMimetype","subDiff","getSubDiffByKey","createPatchStringDiffModel","createDirectStringDiffModel","setMimetypeFromCellType","isCode","outputsBase","outputsDiff","makeOutputModels","execBase","execution_count","execDiff","getDiffEntryByKey","createImmutableModel","cell_type","ImmutableDiffModel","NotebookDiffModel","cell_1","metaDiff","language_info","cells","chunkedCells","take","previousChunkIndex","cell","ei","OutputDiffModel","renderable_1","TEXT_MIMETYPES","RenderableDiffModel","hasMimeType","isStream","isError","isExecuteResult","isDisplayData","innerMimeType","output_type","models","consumed","len","signaling_1","patch_1","trustedChanged","Signal","patch","getMemberByPath","tail","baseCopy","JSONExt","remoteCopy","_trusted","emit","StringDiffModel","range_1","assert","raw2Pos","iterateDiffs","DiffIter","chunker","done","hintTakeDeletion","ra","rd","SyncedDiffIter","currentOffset","iterators","values","offsets","it","offsetA","offsetB","lineA","lineB","currentModel","baseStr","stringifyAndBlankNull","patchStringified","remoteStr","DiffRangeRaw","isRaw","format","DiffRangePos","findLineNumber","nlPos","lineNo","some","el","raws","adIdx","lineStartIdx","startsOnNewLine","chunkFirstLine","flattenStringDiff","stripSource","JSON_INDENT","validateStringDiff","lineToChar","flattened","lineOffset","pdiff","idx","CellDiffWidget","OUTPUTS_DIFF_CLASS","CELLDIFF_CLASS","rendermime_1","flexpanel_1","collapsiblepanel_1","mergeview_1","common_1","PROMPT_CLASS","EXECUTIONCOUNT_ROW_CLASS","SOURCE_ROW_CLASS","METADATA_ROW_CLASS","OUTPUTS_ROW_CLASS","rendermime","_model","_rendermime","CURR_DIFF_CLASSES","DIFF_CLASSES","ADDED_DIFF_CLASS","DELETED_DIFF_CLASS","UNCHANGED_DIFF_CLASS","TWOWAY_DIFF_CLASS","sourceView","createView","createPrompts","metadataView","changed","outputsWidget","chunkPanel","CHUNK_PANEL_CLASS","addedPanel","ADDED_CHUNK_PANEL_CLASS","removedPanel","REMOVED_CHUNK_PANEL_CLASS","collapser","prompts","FlexPanel","direction","w","setGrow","editorClasses","view","mimeModel","MimeModel","preferredMimeType","renderer","createRenderer","renderModel","OutputPanel","ADD_DEL_LABEL_CLASS","MetadataDiffWidget","ROOT_METADATA_CLASS","NotebookDiffWidget","metadata_1","NBDIFF_CLASS","work","Promise","resolve","RenderableOutputView","algorithm_1","OUTPUT_PANEL_CLASS","RENDERED_OUTPUT_CLASS","UNTRUSTED_CLASS","HOVER_MENU_CLASS","TRUST_BUTTON_CLASS","SOURCE_BUTTON_CLASS","DATA_IS_BASE64_CLASS","MIMETYPE_SELECT_CLASS","sanitizable","_base64","isBase64","minLength","parentModel","_mimetype","forceText","sender","trusted","isTrustSignificant","addSpacer","textContent","delSpacer","initContainer","createHoverMenu","replaceView","old","renderable","canRender","rov","selectedMimetype","createOutputTextView","find","mimeTypes","mt","stringModel","aValue","menu","btnSource","sourceText","ev","updateView","btnTrust","mimetypes","output","contents","bundle","OutputModel","cboMimetype","selectedIndex","onchange","mtLabel","toTest","untrustedModel","modelMimeTypes","rendererMimeTypes","toArray","candidates","getFactory","safe","RenderableDiffView","editorClass","createSubView","RenderedOutputWidget","each","bdata","rdata","PanelLayout","ci","filterDecisions","pushPatchDecision","applyDecisions","resolveCommonPaths","popPath","addSorted","decisionSortKey","decisionPathSortKey","util_2","validateAction","valueOrDefault","defaultValue","similarInsert","_path","common_path","local_diff","remote_diff","custom_diff","similar_insert","setValuesFrom","serialize","lvl","toAdd","firstKey","popInner","di","log","dj","retDiffs","prefix","reverse","path","popped","makeClearedValue","_resolvePathInObject","_combineDiffs","resolveAction","splitDiffStringPath","prevPath","lastKey","resolved","clearParent","spl","ad","_mergeTree","tree","sortedPaths","trunk","subdiffs","nextPath","newTrunk","pl","which","sub","strPath","matchDiff","dec","pop","ld","skipLevels","maxLength","CellMergeModel","createPatchedCellDecisionDiffModel","outputBase","outputDec","mergedDiff","cellDecs","mergeExecDiff","ObjectMergeModel","deleteCellChanged","_clearOutputs","clearOutputsChanged","onesided","_deleteCell","processDecisions","lo","ro","agreedSource","agreedMetadata","agreedOutputs","hasConflictsOn","decs","clearOutputConflicts","getExecutionCountDecision","deleteCell","nmd","src","_merged","warn","clearOutputs","applyCellLevelDecision","splitDec","subDecisions","splitPatch","subdec","newDecisions","_local","first","_remote","ops","localPatch","remotePatch","split","patchKey","_whitelist","er","onsesided","splitOnSourceChunks","createDiffModel","createMergedDiffModel","sourceModels","rawBase","_outdated","_sourceModels","_update","_additions","_deletions","iter","whitelist","_finalized","_finalizeDecisions","MetadataMergeModel","NotebookMergeModel","rawMergeDecisions","ctor","preprocessDecisions","buildCellList","metadataDecs","unsavedChanges","mergeDecisions","rmd","splitCellChunks","splitCellRemovals","splitCellInsertions","splitCellListPatch","nb","cellDecisions","bc","insertOffset","insertion","offsetIdx","cds","cellInfo","isChunk","lmd","dl","dr","maxlen","subdl","subdr","makeSplitPart","newMd","newDiff","klStart","krStart","klEnd","krEnd","remLocal","rOp","pOp","pidx","correctType","eq","part","CellMergeWidget","CELLMERGE_CLASS","dragpanel_1","widget_1","CELL_HEADER_CLASS","CELL_HEADER_TITLE_CLASS","MARKED_DELETE","MARKED_CLEAR_OUTPUTS","CLEAR_OUTPUT_TOGGLE_CLASS","DELETE_CELL_TOGGLE_CLASS","OUTPUTS_CONFLICTED_CLASS","MARK_OUTPUTS_RESOLVED_CLASS","outputViews","raw","validateMerged","CURR_CLASSES","MERGE_CLASSES","UNCHANGED_MERGE_CLASS","ladd","ldel","radd","rdel","agreedCell","ONEWAY_LOCAL_CLASS","ONEWAY_REMOTE_CLASS","TWOWAY_DELETION_CLASS","TWOWAY_ADDITION_CLASS","execDec","row","textWidget","createMergeView","metadataChanged","outputsChanged","subModels","baseOut","getOutputs","localOut","remoteOut","mergedOut","RenderableOutputsMergeView","outputsConflicted","conflictClearBtn","btn","headerTitleWidget","clearOutputToggle","_createClearOutputToggle","deleteToggle","_createDeleteToggle","checkbox","createCheckbox","checked","toggleClass","BASE_MERGE_CLASS","LOCAL_MERGE_CLASS","REMOTE_MERGE_CLASS","MERGED_MERGE_CLASS","indeterminate","setAttribute","label","insertBefore","childNodes","ChunkedCellsWidget","CellsDragDrop","CELL_DRAG_DROP_CLASS","MARK_CHUNK_RESOLVED_CLASS","CHUNK_HEADER_CLASS","CONLICTED_CELL_CHUNK_CLASS","_moved","friendFromId","friendToId","widgetFromId","widgetToId","adjustedTo","toPanel","fromPanel","oldParent","before","after","_resolved","onResolve","conflicted","MetadataMergeWidget","wrapper","NotebookMergeWidget","NBMERGE_CLASS","NB_MERGE_CONTROLS_CLASS","metadataWidget","NotebookMergeControls","cellContainer","makeGroup","moved","onDragDropMove","cellWidgets","onChunkResolved","validated","args","anyOutputs","init_controls","chk","clearOutputsToggle","clearConflictedOutputsToggle","updateOutputsToggles","connectOutputsToggles","disconnectOutputsToggles","disconnect","currentTarget","onClearAllOutputsChanged","onClearConflictedOutputsChanged","all","disabled","removeAttribute","ReorderableOutputWidget","ReorderableOutputModel","outputarea_1","REORDERABLE_OUTPUT_CLASS","REORDERABLE_OUTPUT_DRAGIMAGE_CLASS","DELETE_DROP_ZONE_CLASS","OutputAreaModel","list","fromIndex","toIndex","OutputArea","onModelChanged","newIndex","oldIndex","removeWidgetAt","DisconnectedDropTarget","callback","area","_deleteDrop","position","evenSizes","leftPane","basePane","rightPane","mergePane","makeOutputsDraggable","pane","paneIndex","paneFrom","paneTo","outputFrom","outputTo","toModel","fromModel","deleteDrop","paneIdx","outputIdx","image","offsetWidth","dd","ourRect","getBoundingClientRect","pageXOffset","pageYOffset","attach","body","isAttached","detach","PatchObjectHelper","_diffLUT","diffKeys","_diffKeys","baseKeys","_objectKeys","isDiffKey","getDiffEntry","entriesAfterCurrentAddRem","_currentIsAddition","oppositeOp","_remainingKeys","shift","stringified_1","patchString","patchSequence","patchObject","patched","keysToCopy","stableStringify","indentFirst","_indent","stringifyPatch","patchStringifiedList","patchStringifiedObject","baseIndex","_offsetRanges","_adjustRangesByJSONEscapes","helper","keyString","_makeKeyString","isReplace","valr","valb","pd","difflen","levels","jsonString","simpleEscapes","surrogateUnicodes","unicodes","SIMPLE_ESCAPE_LENGTH","UNICODE_ESCAPE_LENGTH","SURROGATE_ESCAPE_LENGTH","indices","expansions","exec","exp","FlexLayout","messaging_1","LEFT_TO_RIGHT_CLASS","RIGHT_TO_LEFT_CLASS","TOP_TO_BOTTOM_CLASS","BOTTOM_TO_TOP_CLASS","order","_wrap","_minimumSpacing","_justifyContent","_alignItems","_alignContent","_dirty","_direction","_stretchType","_evenSizes","minimumSpacing","Private","clampSpacing","wrap","justifyContent","alignContent","stretchType","toggleDirection","fit","flexWrap","flex","translateFlexString","isHorizontal","isVertical","attachWidget","ArrayExt","moveWidget","detachWidget","removeAt","onAfterShow","onChildShown","onChildHidden","isVisible","onUpdateRequest","onFitRequest","_fit","ancestor","MessageLoop","sendMessage","Msg","FitRequest","UpdateRequest","spacing","marginBottom","basis","grow","shrink","flexBasis","flexGrow","flexShrink","getGrow","getShrink","setShrink","getSizeBasis","setSizeBasis","floor","flexlayout_1","FLEX_PANEL_CLASS","CHILD_CLASS","createLayout","onChildAdded","onChildRemoved"],"mappings":"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","file":"3486.ce706683788eafd0b997.js?v=ce706683788eafd0b997","sourcesContent":["function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj[\"default\"] = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nmodule.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Clear');\n\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.createSvgIcon;\n  }\n});\n\nvar _utils = require(\"@material-ui/core/utils\");","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z\"\n}), 'SuccessOutlined');","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z\"\n}), 'ReportProblemOutlined');","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'ErrorOutline');","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z\"\n}), 'InfoOutlined');","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles, lighten, darken } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport SuccessOutlinedIcon from '../internal/svg-icons/SuccessOutlined';\nimport ReportProblemOutlinedIcon from '../internal/svg-icons/ReportProblemOutlined';\nimport ErrorOutlineIcon from '../internal/svg-icons/ErrorOutline';\nimport InfoOutlinedIcon from '../internal/svg-icons/InfoOutlined';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport { capitalize } from '@material-ui/core/utils';\nexport var styles = function styles(theme) {\n  var getColor = theme.palette.type === 'light' ? darken : lighten;\n  var getBackgroundColor = theme.palette.type === 'light' ? lighten : darken;\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.body2, {\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: 'transparent',\n      display: 'flex',\n      padding: '6px 16px'\n    }),\n\n    /* Styles applied to the root element if `variant=\"standard\"` and `color=\"success\"`. */\n    standardSuccess: {\n      color: getColor(theme.palette.success.main, 0.6),\n      backgroundColor: getBackgroundColor(theme.palette.success.main, 0.9),\n      '& $icon': {\n        color: theme.palette.success.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"standard\"` and `color=\"info\"`. */\n    standardInfo: {\n      color: getColor(theme.palette.info.main, 0.6),\n      backgroundColor: getBackgroundColor(theme.palette.info.main, 0.9),\n      '& $icon': {\n        color: theme.palette.info.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"standard\"` and `color=\"warning\"`. */\n    standardWarning: {\n      color: getColor(theme.palette.warning.main, 0.6),\n      backgroundColor: getBackgroundColor(theme.palette.warning.main, 0.9),\n      '& $icon': {\n        color: theme.palette.warning.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"standard\"` and `color=\"error\"`. */\n    standardError: {\n      color: getColor(theme.palette.error.main, 0.6),\n      backgroundColor: getBackgroundColor(theme.palette.error.main, 0.9),\n      '& $icon': {\n        color: theme.palette.error.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"success\"`. */\n    outlinedSuccess: {\n      color: getColor(theme.palette.success.main, 0.6),\n      border: \"1px solid \".concat(theme.palette.success.main),\n      '& $icon': {\n        color: theme.palette.success.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"info\"`. */\n    outlinedInfo: {\n      color: getColor(theme.palette.info.main, 0.6),\n      border: \"1px solid \".concat(theme.palette.info.main),\n      '& $icon': {\n        color: theme.palette.info.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"warning\"`. */\n    outlinedWarning: {\n      color: getColor(theme.palette.warning.main, 0.6),\n      border: \"1px solid \".concat(theme.palette.warning.main),\n      '& $icon': {\n        color: theme.palette.warning.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"error\"`. */\n    outlinedError: {\n      color: getColor(theme.palette.error.main, 0.6),\n      border: \"1px solid \".concat(theme.palette.error.main),\n      '& $icon': {\n        color: theme.palette.error.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` and `color=\"success\"`. */\n    filledSuccess: {\n      color: '#fff',\n      fontWeight: theme.typography.fontWeightMedium,\n      backgroundColor: theme.palette.success.main\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` and `color=\"info\"`. */\n    filledInfo: {\n      color: '#fff',\n      fontWeight: theme.typography.fontWeightMedium,\n      backgroundColor: theme.palette.info.main\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` and `color=\"warning\"`. */\n    filledWarning: {\n      color: '#fff',\n      fontWeight: theme.typography.fontWeightMedium,\n      backgroundColor: theme.palette.warning.main\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` and `color=\"error\"`. */\n    filledError: {\n      color: '#fff',\n      fontWeight: theme.typography.fontWeightMedium,\n      backgroundColor: theme.palette.error.main\n    },\n\n    /* Styles applied to the icon wrapper element. */\n    icon: {\n      marginRight: 12,\n      padding: '7px 0',\n      display: 'flex',\n      fontSize: 22,\n      opacity: 0.9\n    },\n\n    /* Styles applied to the message wrapper element. */\n    message: {\n      padding: '8px 0'\n    },\n\n    /* Styles applied to the action wrapper element if `action` is provided. */\n    action: {\n      display: 'flex',\n      alignItems: 'center',\n      marginLeft: 'auto',\n      paddingLeft: 16,\n      marginRight: -8\n    }\n  };\n};\nvar defaultIconMapping = {\n  success: /*#__PURE__*/React.createElement(SuccessOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  warning: /*#__PURE__*/React.createElement(ReportProblemOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  error: /*#__PURE__*/React.createElement(ErrorOutlineIcon, {\n    fontSize: \"inherit\"\n  }),\n  info: /*#__PURE__*/React.createElement(InfoOutlinedIcon, {\n    fontSize: \"inherit\"\n  })\n};\n\nvar _ref = /*#__PURE__*/React.createElement(CloseIcon, {\n  fontSize: \"small\"\n});\n\nvar Alert = /*#__PURE__*/React.forwardRef(function Alert(props, ref) {\n  var action = props.action,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$closeText = props.closeText,\n      closeText = _props$closeText === void 0 ? 'Close' : _props$closeText,\n      color = props.color,\n      icon = props.icon,\n      _props$iconMapping = props.iconMapping,\n      iconMapping = _props$iconMapping === void 0 ? defaultIconMapping : _props$iconMapping,\n      onClose = props.onClose,\n      _props$role = props.role,\n      role = _props$role === void 0 ? 'alert' : _props$role,\n      _props$severity = props.severity,\n      severity = _props$severity === void 0 ? 'success' : _props$severity,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"action\", \"children\", \"classes\", \"className\", \"closeText\", \"color\", \"icon\", \"iconMapping\", \"onClose\", \"role\", \"severity\", \"variant\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    role: role,\n    square: true,\n    elevation: 0,\n    className: clsx(classes.root, classes[\"\".concat(variant).concat(capitalize(color || severity))], className),\n    ref: ref\n  }, other), icon !== false ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.icon\n  }, icon || iconMapping[severity] || defaultIconMapping[severity]) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.message\n  }, children), action != null ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.action\n  }, action) : null, action == null && onClose ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.action\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    size: \"small\",\n    \"aria-label\": closeText,\n    title: closeText,\n    color: \"inherit\",\n    onClick: onClose\n  }, _ref)) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? Alert.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display. It renders after the message, at the end of the alert.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Override the default label for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The main color for the alert. Unless provided, the value is taken from the `severity` prop.\n   */\n  color: PropTypes.oneOf(['error', 'info', 'success', 'warning']),\n\n  /**\n   * Override the icon displayed before the children.\n   * Unless provided, the icon is mapped to the value of the `severity` prop.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The component maps the `severity` prop to a range of different icons,\n   * for instance success to `<SuccessOutlined>`.\n   * If you wish to change this mapping, you can provide your own.\n   * Alternatively, you can use the `icon` prop to override the icon displayed.\n   */\n  iconMapping: PropTypes.shape({\n    error: PropTypes.node,\n    info: PropTypes.node,\n    success: PropTypes.node,\n    warning: PropTypes.node\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * The ARIA role attribute of the element.\n   */\n  role: PropTypes.string,\n\n  /**\n   * The severity of the alert. This defines the color and icon used.\n   */\n  severity: PropTypes.oneOf(['error', 'info', 'success', 'warning']),\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAlert'\n})(Alert);","'use strict';\n\nvar json = typeof JSON !== 'undefined' ? JSON : require('jsonify');\n\nvar isArray = Array.isArray || function (x) {\n\treturn {}.toString.call(x) === '[object Array]';\n};\n\nvar objectKeys = Object.keys || function (obj) {\n\tvar has = Object.prototype.hasOwnProperty || function () { return true; };\n\tvar keys = [];\n\tfor (var key in obj) {\n\t\tif (has.call(obj, key)) { keys.push(key); }\n\t}\n\treturn keys;\n};\n\nmodule.exports = function (obj, opts) {\n\tif (!opts) { opts = {}; }\n\tif (typeof opts === 'function') { opts = { cmp: opts }; }\n\tvar space = opts.space || '';\n\tif (typeof space === 'number') { space = Array(space + 1).join(' '); }\n\tvar cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;\n\tvar replacer = opts.replacer || function (key, value) { return value; };\n\n\tvar cmp = opts.cmp && (function (f) {\n\t\treturn function (node) {\n\t\t\treturn function (a, b) {\n\t\t\t\tvar aobj = { key: a, value: node[a] };\n\t\t\t\tvar bobj = { key: b, value: node[b] };\n\t\t\t\treturn f(aobj, bobj);\n\t\t\t};\n\t\t};\n\t}(opts.cmp));\n\n\tvar seen = [];\n\treturn (function stringify(parent, key, node, level) {\n\t\tvar indent = space ? '\\n' + new Array(level + 1).join(space) : '';\n\t\tvar colonSeparator = space ? ': ' : ':';\n\n\t\tif (node && node.toJSON && typeof node.toJSON === 'function') {\n\t\t\tnode = node.toJSON();\n\t\t}\n\n\t\tnode = replacer.call(parent, key, node);\n\n\t\tif (node === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tif (typeof node !== 'object' || node === null) {\n\t\t\treturn json.stringify(node);\n\t\t}\n\t\tif (isArray(node)) {\n\t\t\tvar out = [];\n\t\t\tfor (var i = 0; i < node.length; i++) {\n\t\t\t\tvar item = stringify(node, i, node[i], level + 1) || json.stringify(null);\n\t\t\t\tout.push(indent + space + item);\n\t\t\t}\n\t\t\treturn '[' + out.join(',') + indent + ']';\n\t\t}\n\n\t\tif (seen.indexOf(node) !== -1) {\n\t\t\tif (cycles) { return json.stringify('__cycle__'); }\n\t\t\tthrow new TypeError('Converting circular structure to JSON');\n\t\t} else { seen.push(node); }\n\n\t\tvar keys = objectKeys(node).sort(cmp && cmp(node));\n\t\tvar out = [];\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tvar key = keys[i];\n\t\t\tvar value = stringify(node, key, node[key], level + 1);\n\n\t\t\tif (!value) { continue; }\n\n\t\t\tvar keyValue = json.stringify(key)\n\t\t\t\t\t+ colonSeparator\n\t\t\t\t\t+ value;\n\n\t\t\tout.push(indent + space + keyValue);\n\t\t}\n\t\tseen.splice(seen.indexOf(node), 1);\n\t\treturn '{' + out.join(',') + indent + '}';\n\n\t}({ '': obj }, '', obj, 0));\n};\n","'use strict';\n\nexports.parse = require('./lib/parse');\nexports.stringify = require('./lib/stringify');\n","'use strict';\n\nvar at; // The index of the current character\nvar ch; // The current character\nvar escapee = {\n\t'\"': '\"',\n\t'\\\\': '\\\\',\n\t'/': '/',\n\tb: '\\b',\n\tf: '\\f',\n\tn: '\\n',\n\tr: '\\r',\n\tt: '\\t'\n};\nvar text;\n\n// Call error when something is wrong.\nfunction error(m) {\n\tthrow {\n\t\tname: 'SyntaxError',\n\t\tmessage: m,\n\t\tat: at,\n\t\ttext: text\n\t};\n}\n\nfunction next(c) {\n\t// If a c parameter is provided, verify that it matches the current character.\n\tif (c && c !== ch) {\n\t\terror(\"Expected '\" + c + \"' instead of '\" + ch + \"'\");\n\t}\n\n\t// Get the next character. When there are no more characters, return the empty string.\n\n\tch = text.charAt(at);\n\tat += 1;\n\treturn ch;\n}\n\nfunction number() {\n\t// Parse a number value.\n\tvar num;\n\tvar str = '';\n\n\tif (ch === '-') {\n\t\tstr = '-';\n\t\tnext('-');\n\t}\n\twhile (ch >= '0' && ch <= '9') {\n\t\tstr += ch;\n\t\tnext();\n\t}\n\tif (ch === '.') {\n\t\tstr += '.';\n\t\twhile (next() && ch >= '0' && ch <= '9') {\n\t\t\tstr += ch;\n\t\t}\n\t}\n\tif (ch === 'e' || ch === 'E') {\n\t\tstr += ch;\n\t\tnext();\n\t\tif (ch === '-' || ch === '+') {\n\t\t\tstr += ch;\n\t\t\tnext();\n\t\t}\n\t\twhile (ch >= '0' && ch <= '9') {\n\t\t\tstr += ch;\n\t\t\tnext();\n\t\t}\n\t}\n\tnum = Number(str);\n\tif (!isFinite(num)) {\n\t\terror('Bad number');\n\t}\n\treturn num;\n}\n\nfunction string() {\n\t// Parse a string value.\n\tvar hex;\n\tvar i;\n\tvar str = '';\n\tvar uffff;\n\n\t// When parsing for string values, we must look for \" and \\ characters.\n\tif (ch === '\"') {\n\t\twhile (next()) {\n\t\t\tif (ch === '\"') {\n\t\t\t\tnext();\n\t\t\t\treturn str;\n\t\t\t} else if (ch === '\\\\') {\n\t\t\t\tnext();\n\t\t\t\tif (ch === 'u') {\n\t\t\t\t\tuffff = 0;\n\t\t\t\t\tfor (i = 0; i < 4; i += 1) {\n\t\t\t\t\t\thex = parseInt(next(), 16);\n\t\t\t\t\t\tif (!isFinite(hex)) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tuffff = (uffff * 16) + hex;\n\t\t\t\t\t}\n\t\t\t\t\tstr += String.fromCharCode(uffff);\n\t\t\t\t} else if (typeof escapee[ch] === 'string') {\n\t\t\t\t\tstr += escapee[ch];\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstr += ch;\n\t\t\t}\n\t\t}\n\t}\n\terror('Bad string');\n}\n\n// Skip whitespace.\nfunction white() {\n\twhile (ch && ch <= ' ') {\n\t\tnext();\n\t}\n}\n\n// true, false, or null.\nfunction word() {\n\tswitch (ch) {\n\t\tcase 't':\n\t\t\tnext('t');\n\t\t\tnext('r');\n\t\t\tnext('u');\n\t\t\tnext('e');\n\t\t\treturn true;\n\t\tcase 'f':\n\t\t\tnext('f');\n\t\t\tnext('a');\n\t\t\tnext('l');\n\t\t\tnext('s');\n\t\t\tnext('e');\n\t\t\treturn false;\n\t\tcase 'n':\n\t\t\tnext('n');\n\t\t\tnext('u');\n\t\t\tnext('l');\n\t\t\tnext('l');\n\t\t\treturn null;\n\t\tdefault:\n\t\t\terror(\"Unexpected '\" + ch + \"'\");\n\t}\n}\n\n// Parse an array value.\nfunction array() {\n\tvar arr = [];\n\n\tif (ch === '[') {\n\t\tnext('[');\n\t\twhite();\n\t\tif (ch === ']') {\n\t\t\tnext(']');\n\t\t\treturn arr; // empty array\n\t\t}\n\t\twhile (ch) {\n\t\t\tarr.push(value()); // eslint-disable-line no-use-before-define\n\t\t\twhite();\n\t\t\tif (ch === ']') {\n\t\t\t\tnext(']');\n\t\t\t\treturn arr;\n\t\t\t}\n\t\t\tnext(',');\n\t\t\twhite();\n\t\t}\n\t}\n\terror('Bad array');\n}\n\n// Parse an object value.\nfunction object() {\n\tvar key;\n\tvar obj = {};\n\n\tif (ch === '{') {\n\t\tnext('{');\n\t\twhite();\n\t\tif (ch === '}') {\n\t\t\tnext('}');\n\t\t\treturn obj; // empty object\n\t\t}\n\t\twhile (ch) {\n\t\t\tkey = string();\n\t\t\twhite();\n\t\t\tnext(':');\n\t\t\tif (Object.prototype.hasOwnProperty.call(obj, key)) {\n\t\t\t\terror('Duplicate key \"' + key + '\"');\n\t\t\t}\n\t\t\tobj[key] = value(); // eslint-disable-line no-use-before-define\n\t\t\twhite();\n\t\t\tif (ch === '}') {\n\t\t\t\tnext('}');\n\t\t\t\treturn obj;\n\t\t\t}\n\t\t\tnext(',');\n\t\t\twhite();\n\t\t}\n\t}\n\terror('Bad object');\n}\n\n// Parse a JSON value. It could be an object, an array, a string, a number, or a word.\nfunction value() {\n\twhite();\n\tswitch (ch) {\n\t\tcase '{':\n\t\t\treturn object();\n\t\tcase '[':\n\t\t\treturn array();\n\t\tcase '\"':\n\t\t\treturn string();\n\t\tcase '-':\n\t\t\treturn number();\n\t\tdefault:\n\t\t\treturn ch >= '0' && ch <= '9' ? number() : word();\n\t}\n}\n\n// Return the json_parse function. It will have access to all of the above functions and variables.\nmodule.exports = function (source, reviver) {\n\tvar result;\n\n\ttext = source;\n\tat = 0;\n\tch = ' ';\n\tresult = value();\n\twhite();\n\tif (ch) {\n\t\terror('Syntax error');\n\t}\n\n\t// If there is a reviver function, we recursively walk the new structure,\n\t// passing each name/value pair to the reviver function for possible\n\t// transformation, starting with a temporary root object that holds the result\n\t// in an empty key. If there is not a reviver function, we simply return the\n\t// result.\n\n\treturn typeof reviver === 'function' ? (function walk(holder, key) {\n\t\tvar k;\n\t\tvar v;\n\t\tvar val = holder[key];\n\t\tif (val && typeof val === 'object') {\n\t\t\tfor (k in value) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(val, k)) {\n\t\t\t\t\tv = walk(val, k);\n\t\t\t\t\tif (typeof v === 'undefined') {\n\t\t\t\t\t\tdelete val[k];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tval[k] = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn reviver.call(holder, key, val);\n\t}({ '': result }, '')) : result;\n};\n","'use strict';\n\nvar escapable = /[\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\nvar gap;\nvar indent;\nvar meta = { // table of character substitutions\n\t'\\b': '\\\\b',\n\t'\\t': '\\\\t',\n\t'\\n': '\\\\n',\n\t'\\f': '\\\\f',\n\t'\\r': '\\\\r',\n\t'\"': '\\\\\"',\n\t'\\\\': '\\\\\\\\'\n};\nvar rep;\n\nfunction quote(string) {\n\t// If the string contains no control characters, no quote characters, and no\n\t// backslash characters, then we can safely slap some quotes around it.\n\t// Otherwise we must also replace the offending characters with safe escape sequences.\n\n\tescapable.lastIndex = 0;\n\treturn escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n\t\tvar c = meta[a];\n\t\treturn typeof c === 'string' ? c\n\t\t\t: '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n\t}) + '\"' : '\"' + string + '\"';\n}\n\nfunction str(key, holder) {\n\t// Produce a string from holder[key].\n\tvar i; // The loop counter.\n\tvar k; // The member key.\n\tvar v; // The member value.\n\tvar length;\n\tvar mind = gap;\n\tvar partial;\n\tvar value = holder[key];\n\n\t// If the value has a toJSON method, call it to obtain a replacement value.\n\tif (value && typeof value === 'object' && typeof value.toJSON === 'function') {\n\t\tvalue = value.toJSON(key);\n\t}\n\n\t// If we were called with a replacer function, then call the replacer to obtain a replacement value.\n\tif (typeof rep === 'function') {\n\t\tvalue = rep.call(holder, key, value);\n\t}\n\n\t// What happens next depends on the value's type.\n\tswitch (typeof value) {\n\t\tcase 'string':\n\t\t\treturn quote(value);\n\n\t\tcase 'number':\n\t\t\t// JSON numbers must be finite. Encode non-finite numbers as null.\n\t\t\treturn isFinite(value) ? String(value) : 'null';\n\n\t\tcase 'boolean':\n\t\tcase 'null':\n\t\t\t// If the value is a boolean or null, convert it to a string. Note:\n\t\t\t// typeof null does not produce 'null'. The case is included here in\n\t\t\t// the remote chance that this gets fixed someday.\n\t\t\treturn String(value);\n\n\t\tcase 'object':\n\t\t\tif (!value) {\n\t\t\t\treturn 'null';\n\t\t\t}\n\t\t\tgap += indent;\n\t\t\tpartial = [];\n\n\t\t\t// Array.isArray\n\t\t\tif (Object.prototype.toString.apply(value) === '[object Array]') {\n\t\t\t\tlength = value.length;\n\t\t\t\tfor (i = 0; i < length; i += 1) {\n\t\t\t\t\tpartial[i] = str(i, value) || 'null';\n\t\t\t\t}\n\n\t\t\t\t// Join all of the elements together, separated with commas, and wrap them in brackets.\n\t\t\t\tv = partial.length === 0 ? '[]' : gap\n\t\t\t\t\t? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']'\n\t\t\t\t\t: '[' + partial.join(',') + ']';\n\t\t\t\tgap = mind;\n\t\t\t\treturn v;\n\t\t\t}\n\n\t\t\t// If the replacer is an array, use it to select the members to be stringified.\n\t\t\tif (rep && typeof rep === 'object') {\n\t\t\t\tlength = rep.length;\n\t\t\t\tfor (i = 0; i < length; i += 1) {\n\t\t\t\t\tk = rep[i];\n\t\t\t\t\tif (typeof k === 'string') {\n\t\t\t\t\t\tv = str(k, value);\n\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\tpartial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Otherwise, iterate through all of the keys in the object.\n\t\t\t\tfor (k in value) {\n\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(value, k)) {\n\t\t\t\t\t\tv = str(k, value);\n\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\tpartial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Join all of the member texts together, separated with commas, and wrap them in braces.\n\n\t\t\tv = partial.length === 0 ? '{}' : gap\n\t\t\t\t? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}'\n\t\t\t\t: '{' + partial.join(',') + '}';\n\t\t\tgap = mind;\n\t\t\treturn v;\n\t\tdefault:\n\t}\n}\n\nmodule.exports = function (value, replacer, space) {\n\tvar i;\n\tgap = '';\n\tindent = '';\n\n\t// If the space parameter is a number, make an indent string containing that many spaces.\n\tif (typeof space === 'number') {\n\t\tfor (i = 0; i < space; i += 1) {\n\t\t\tindent += ' ';\n\t\t}\n\t} else if (typeof space === 'string') {\n\t\t// If the space parameter is a string, it will be used as the indent string.\n\t\tindent = space;\n\t}\n\n\t// If there is a replacer, it must be a function or an array. Otherwise, throw an error.\n\trep = replacer;\n\tif (\n\t\treplacer\n\t\t&& typeof replacer !== 'function'\n\t\t&& (typeof replacer !== 'object' || typeof replacer.length !== 'number')\n\t) {\n\t\tthrow new Error('JSON.stringify');\n\t}\n\n\t// Make a fake root object containing our value under the key of ''.\n\t// Return the result of stringifying the value.\n\treturn str('', { '': value });\n};\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.splitMergeDecisionsOnChunks = void 0;\r\nconst diffentries_1 = require(\"../diff/diffentries\");\r\nconst decisions_1 = require(\"../merge/decisions\");\r\nconst util_1 = require(\"../common/util\");\r\nfunction anyDiffs(diffs) {\r\n    for (let d of diffs) {\r\n        if (util_1.hasEntries(d)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction getSectionBoundaries(diffs) {\r\n    let boundaries = [];\r\n    for (let e of diffs) {\r\n        let j = e.key;\r\n        let k;\r\n        boundaries.push(j);\r\n        if (e.op === 'addrange') {\r\n            // Pass\r\n        }\r\n        else if (e.op === 'removerange') {\r\n            k = j + e.length;\r\n            boundaries.push(k);\r\n        }\r\n        else if (e.op === 'patch') {\r\n            k = j + 1;\r\n            boundaries.push(k);\r\n        }\r\n    }\r\n    return boundaries.filter(util_1.unique);\r\n}\r\nfunction splitDiffsOnBoundaries(diffs, boundaries) {\r\n    let newdiffs = [];\r\n    if (!Array.isArray(boundaries)) {\r\n        throw new Error();\r\n    }\r\n    // Next relevant boundary index\r\n    let b = 0;\r\n    for (let e of diffs) {\r\n        if (util_1.valueIn(e.op, ['addrange', 'patch'])) {\r\n            // Nothing to split\r\n            newdiffs.push(e);\r\n        }\r\n        else if (e.op === 'removerange') {\r\n            // Skip boundaries smaller than key\r\n            while (boundaries[b] < e.key) {\r\n                b += 1;\r\n            }\r\n            // key should be included in the boundaries\r\n            if (boundaries[b] !== e.key) {\r\n                throw new Error();\r\n            }\r\n            // Add diff entries for each interval between boundaries up to k\r\n            while (b < boundaries.length - 1 && boundaries[b + 1] <= e.key + e.length) {\r\n                newdiffs.push(diffentries_1.opRemoveRange(boundaries[b], boundaries[b + 1] - boundaries[b]));\r\n                b += 1;\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Unhandled diff entry op ' + e.op);\r\n        }\r\n    }\r\n    return newdiffs;\r\n}\r\n/**\r\n * Make list of chunks on the form (j, k, diffs0, diffs1, ..., diffsN),\r\n * where `j` and `k` are line numbers in the base, and the `diffsX`\r\n * entries are subsets from `diffs` that are part of the chunk.\r\n\r\n * Because the diff entries have been split on the union of\r\n * begin/end boundaries of all diff entries, the keys of\r\n * diff entries on each side will always match a boundary\r\n * exactly. The only situation where multiple diff entries\r\n * on one side matches a boundary is when add/remove or\r\n * add/patch pairs occur, i.e. when inserting something\r\n * just before an item that is removed or modified.\r\n */\r\nfunction makeChunks(boundaries, diffs) {\r\n    let iDiffs = Array.apply(null, Array(diffs.length)).map(Number.prototype.valueOf, 0);\r\n    let chunks = [];\r\n    for (let i = 0; i < boundaries.length; ++i) {\r\n        // Find span of next chunk\r\n        let j = boundaries[i];\r\n        let k = (i < boundaries.length - 1) ? boundaries[i + 1] : j;\r\n        // Collect diff entries from each side\r\n        // starting at beginning of this chunk\r\n        let subDiffs = [];\r\n        for (let m = 0; m < diffs.length; ++m) {\r\n            let d = diffs[m];\r\n            let dis = [];\r\n            while (d && iDiffs[m] < d.length && d[iDiffs[m]].key === j) {\r\n                dis.push(d[iDiffs[m]]);\r\n                iDiffs[m] += 1;\r\n            }\r\n            subDiffs.push(dis);\r\n        }\r\n        // Add non-empty chunks\r\n        if (anyDiffs(subDiffs)) {\r\n            let c = { baseStart: j, baseEnd: k, diffs: subDiffs };\r\n            chunks.push(c);\r\n        }\r\n    }\r\n    return chunks;\r\n}\r\n/**\r\n * Return list of chunks (i, j, d0, d1, ..., dn) where dX are\r\n *  lists of diff entries affecting the range base[i:j].\r\n *\r\n *  If d0 and d1 are both empty the chunk is not modified.\r\n *\r\n *  Includes full range 0:len(base).\r\n *\r\n *  Each diff list contains either 0, 1, or 2 entries,\r\n *  in case of 2 entries the first will be an insert\r\n *  at i (the beginning of the range) and the other a\r\n *  removerange or patch covering the full range i:j.\r\n */\r\nfunction makeMergeChunks(base, diffs) {\r\n    // Split diffs on union of diff entry boundaries such that\r\n    // no diff entry overlaps with more than one other entry.\r\n    // Including 0,N makes loop over chunks cleaner.\r\n    let boundaries = [0, base.length];\r\n    for (let d of diffs) {\r\n        if (util_1.hasEntries(d)) {\r\n            let newBoundaries = getSectionBoundaries(d);\r\n            boundaries = boundaries.concat(newBoundaries);\r\n        }\r\n    }\r\n    boundaries = boundaries.filter(util_1.unique).sort();\r\n    let splitDiffs = [];\r\n    for (let d of diffs) {\r\n        if (util_1.hasEntries(d)) {\r\n            splitDiffs.push(splitDiffsOnBoundaries(d, boundaries));\r\n        }\r\n        else {\r\n            splitDiffs.push(d);\r\n        }\r\n    }\r\n    // Make list of chunks on the form (j, k, diffs)\r\n    let chunks = makeChunks(boundaries, splitDiffs);\r\n    return chunks;\r\n}\r\nfunction splitDecisionByChunks(base, decision, chunks) {\r\n    if (chunks.length < 2) {\r\n        return [decision];\r\n    }\r\n    let out = [];\r\n    for (let c of chunks) {\r\n        let cd = decision.customDiff;\r\n        if (util_1.hasEntries(cd)) {\r\n            if (decision.localPath.length > 0) {\r\n                cd = decisions_1.pushPath(cd, decision.localPath);\r\n            }\r\n            // Split custom diff according to chunk lines\r\n            let boundaries = [0, base.length, c.baseStart, c.baseEnd].filter(util_1.unique).sort();\r\n            cd = splitDiffsOnBoundaries(cd, boundaries);\r\n        }\r\n        out.push(new decisions_1.MergeDecision(decision.absolutePath.slice(), c.diffs[0], c.diffs[1], decision.action, decision.conflict));\r\n    }\r\n    return out;\r\n}\r\nfunction splitMergeDecisionsOnChunks(base, decisions) {\r\n    let out = [];\r\n    for (let md of decisions) {\r\n        let diffs = [\r\n            decisions_1.buildDiffs(base, [md], 'local'),\r\n            decisions_1.buildDiffs(base, [md], 'remote')\r\n        ];\r\n        let chunks = makeMergeChunks(base, diffs);\r\n        out = out.concat(splitDecisionByChunks(base, md, chunks));\r\n    }\r\n    return out;\r\n}\r\nexports.splitMergeDecisionsOnChunks = splitMergeDecisionsOnChunks;\r\n//# sourceMappingURL=decisionchunking.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.labelSource = exports.lineToNormalChunks = exports.LineChunker = exports.Chunker = exports.Chunk = void 0;\r\nconst util_1 = require(\"../common/util\");\r\n/**\r\n * A chunk is a range of lines in a string based diff\r\n * that logically belong together.\r\n *\r\n * Chunks can be used for:\r\n *  - Correlating diff entries in the base and remote, e.g.\r\n *    for aligning lines in two editors.\r\n *  - Finding parts of the unchanged text that are not needed\r\n *    as context (can be hidden)\r\n *  - Navigating a diff (\"Go to next diff\")\r\n */\r\nclass Chunk {\r\n    constructor(baseFrom, baseTo, remoteFrom, remoteTo, source) {\r\n        this.baseFrom = baseFrom;\r\n        this.baseTo = baseTo;\r\n        this.remoteFrom = remoteFrom;\r\n        this.remoteTo = remoteTo;\r\n        this.sources = source ? [source] : [];\r\n    }\r\n    /**\r\n     * Checks whether the given line number is within the range spanned by editFrom - editTo\r\n     */\r\n    inEdit(line) {\r\n        return line >= this.baseFrom && line <= this.baseTo;\r\n    }\r\n    /**\r\n     * Checks whether the given line number is within the range spanned by origFrom - origTo\r\n     */\r\n    inOrig(line) {\r\n        return line >= this.remoteFrom && line <= this.remoteTo;\r\n    }\r\n}\r\nexports.Chunk = Chunk;\r\n;\r\nclass Chunker {\r\n    constructor() {\r\n        this._currentGhost = null;\r\n        this.chunks = [];\r\n        this.editOffset = 0;\r\n    }\r\n    _getCurrent() {\r\n        if (this._currentGhost) {\r\n            this._currentGhost = null;\r\n            return null;\r\n        }\r\n        return this.chunks.length > 0 ? this.chunks[this.chunks.length - 1] : null;\r\n    }\r\n    _overlapChunk(chunk, range, isAddition) {\r\n        if (isAddition) {\r\n            return chunk.inOrig(range.from.line);\r\n        }\r\n        else {\r\n            return chunk.inEdit(range.from.line);\r\n        }\r\n    }\r\n    addDiff(range, isAddition) {\r\n        let linediff = range.to.line - range.from.line;\r\n        if (range.endsOnNewline) {\r\n            linediff += 1;\r\n        }\r\n        const firstLineNew = range.from.ch === 0 && linediff > 0;\r\n        const startOffset = range.chunkStartLine ? 0 : 1;\r\n        const endOffset = range.chunkStartLine && range.endsOnNewline && firstLineNew ?\r\n            0 : 1;\r\n        let current = this._getCurrent();\r\n        if (current) {\r\n            // Have existing chunk, check for overlap\r\n            if (isAddition) {\r\n                if (this._overlapChunk(current, range, isAddition)) {\r\n                    current.remoteTo = Math.max(current.remoteTo, range.from.line + endOffset + linediff);\r\n                    current.baseTo = Math.max(current.baseTo, range.from.line + endOffset + this.editOffset);\r\n                    if (range.source && !util_1.valueIn(range.source, current.sources)) {\r\n                        current.sources.push(range.source);\r\n                    }\r\n                }\r\n                else {\r\n                    // No overlap with chunk, start new one\r\n                    current = null;\r\n                }\r\n            }\r\n            else {\r\n                if (this._overlapChunk(current, range, isAddition)) {\r\n                    current.remoteTo = Math.max(current.remoteTo, range.from.line + endOffset - this.editOffset);\r\n                    current.baseTo = Math.max(current.baseTo, range.from.line + endOffset + linediff);\r\n                    if (range.source && !util_1.valueIn(range.source, current.sources)) {\r\n                        current.sources.push(range.source);\r\n                    }\r\n                }\r\n                else {\r\n                    // No overlap with chunk, start new one\r\n                    current = null;\r\n                }\r\n            }\r\n        }\r\n        if (!current) {\r\n            // No current chunk, start a new one\r\n            if (isAddition) {\r\n                let startRemote = range.from.line;\r\n                let startBase = startRemote + this.editOffset;\r\n                current = new Chunk(startBase + startOffset, startBase + endOffset, startRemote + startOffset, startRemote + endOffset + linediff);\r\n            }\r\n            else {\r\n                let startBase = range.from.line;\r\n                let startRemote = startBase - this.editOffset;\r\n                current = new Chunk(startBase + startOffset, startBase + endOffset + linediff, startRemote + startOffset, startRemote + endOffset);\r\n            }\r\n            if (range.source) {\r\n                current.sources.push(range.source);\r\n            }\r\n            this.chunks.push(current);\r\n        }\r\n        current.sources = current.sources.filter(util_1.unique);\r\n        this.editOffset += isAddition ? -linediff : linediff;\r\n    }\r\n    /**\r\n     * Chunk a region where changes will occur if a currently unapplied diff were\r\n     * applied.\r\n     */\r\n    addGhost(range, isAddition, offset) {\r\n        // Do a one-to-one chunk as base\r\n        let linediff = range.to.line - range.from.line;\r\n        if (range.endsOnNewline) {\r\n            linediff += 1;\r\n        }\r\n        let firstLineNew = range.from.ch === 0 && linediff > 0;\r\n        let startOffset = range.chunkStartLine ? 0 : 1;\r\n        let endOffset = range.chunkStartLine && range.endsOnNewline && firstLineNew ?\r\n            0 : 1;\r\n        if (!isAddition) {\r\n            endOffset += linediff;\r\n        }\r\n        let current = this._currentGhost;\r\n        // Subtract offset from other editor\r\n        let startEdit = range.from.line + (isAddition ? offset : 0);\r\n        if (current) {\r\n            // Have existing chunk, check for overlap\r\n            let startOrig = startEdit - this.editOffset;\r\n            if (current.baseTo > startEdit) {\r\n                current.remoteTo = Math.max(current.remoteTo, startOrig + endOffset);\r\n                current.baseTo = Math.max(current.baseTo, startEdit + endOffset);\r\n                if (range.source && !util_1.valueIn(range.source, current.sources)) {\r\n                    current.sources.push(range.source);\r\n                }\r\n            }\r\n            else {\r\n                // No overlap with chunk, start new one\r\n                current = null;\r\n            }\r\n        }\r\n        if (!current) {\r\n            let startOrig = startEdit - this.editOffset;\r\n            current = new Chunk(startEdit + startOffset, startEdit + endOffset, startOrig + startOffset, startOrig + endOffset);\r\n            if (range.source) {\r\n                current.sources.push(range.source);\r\n            }\r\n            this.chunks.push(current);\r\n        }\r\n        this._currentGhost = current;\r\n        current.sources = current.sources.filter(util_1.unique);\r\n        // this._doAdd(range, isAddition);\r\n    }\r\n}\r\nexports.Chunker = Chunker;\r\n/**\r\n * A chunker that only chunks diffs within lines with each other\r\n *\r\n * While the default chunker would chunk together a change at the end of one\r\n * line with a change at the start of the next line, this chunker will keep\r\n * each line separate. This is useful e.g. for merging.\r\n */\r\nclass LineChunker extends Chunker {\r\n    _overlapChunk(chunk, range, isAddition) {\r\n        let fromLine = range.from.line;\r\n        if (chunk.baseFrom !== chunk.baseTo || chunk.remoteFrom >= chunk.remoteTo) {\r\n            // Ensure aligned addition/removal on same line\r\n            // still chunk together\r\n            fromLine += 1;\r\n        }\r\n        if (isAddition) {\r\n            return chunk.inOrig(fromLine);\r\n        }\r\n        else {\r\n            return chunk.inEdit(fromLine);\r\n        }\r\n    }\r\n}\r\nexports.LineChunker = LineChunker;\r\n/**\r\n * Transform an array of lines to normal chunks\r\n */\r\nfunction lineToNormalChunks(lineChunks) {\r\n    // We already have line chunks, so simply merge those chunks that overlap\r\n    let current = null;\r\n    let ret = [];\r\n    for (let c of lineChunks) {\r\n        if (current === null) {\r\n            current = util_1.shallowCopy(c);\r\n        }\r\n        else {\r\n            if (current.inEdit(c.baseFrom)) {\r\n                // Overlaps, combine\r\n                current.remoteTo = Math.max(current.remoteTo, c.remoteTo);\r\n                current.baseTo = Math.max(current.baseTo, c.baseTo);\r\n                current.sources = current.sources.concat(c.sources);\r\n            }\r\n            else {\r\n                // No overlap, start new\r\n                ret.push(current);\r\n                current = util_1.shallowCopy(c);\r\n            }\r\n        }\r\n        current.sources = current.sources.filter(util_1.unique);\r\n    }\r\n    if (current !== null) {\r\n        ret.push(current);\r\n    }\r\n    return ret;\r\n}\r\nexports.lineToNormalChunks = lineToNormalChunks;\r\n/**\r\n * Label a set of diffs with a source, recursively.\r\n */\r\nfunction labelSource(diff, source) {\r\n    if (diff) {\r\n        for (let d of diff) {\r\n            d.source = source;\r\n            if (d.op === 'patch') {\r\n                labelSource(d.diff, source);\r\n            }\r\n        }\r\n    }\r\n    return diff;\r\n}\r\nexports.labelSource = labelSource;\r\n//# sourceMappingURL=diffchunking.js.map","\"use strict\";\r\n// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__exportStar(require(\"./diffchunking\"), exports);\r\n__exportStar(require(\"./decisionchunking\"), exports);\r\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CollapsiblePanel = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst COLLAPSIBLE_CLASS = 'jp-CollapsiblePanel';\r\nconst COLLAPSIBLE_HEADER = 'jp-CollapsiblePanel-header';\r\nconst COLLAPSIBLE_HEADER_ICON = 'jp-CollapsiblePanel-header-icon';\r\nconst COLLAPSIBLE_HEADER_ICON_OPEN = 'jp-CollapsiblePanel-header-icon-opened';\r\nconst COLLAPSIBLE_HEADER_ICON_CLOSED = 'jp-CollapsiblePanel-header-icon-closed';\r\nconst COLLAPSIBLE_SLIDER = 'jp-CollapsiblePanel-slider';\r\nconst COLLAPSIBLE_OPEN = 'jp-CollapsiblePanel-opened';\r\nconst COLLAPSIBLE_CLOSED = 'jp-CollapsiblePanel-closed';\r\nconst COLLAPSIBLE_CONTAINER = 'jp-CollapsiblePanel-container';\r\n/**\r\n * CollapsiblePanel\r\n */\r\nclass CollapsiblePanel extends widgets_1.Panel {\r\n    constructor(inner, headerTitle, collapsed) {\r\n        super();\r\n        this.addClass(COLLAPSIBLE_CLASS);\r\n        this.inner = inner;\r\n        let constructor = this.constructor;\r\n        let header = constructor.createHeader(headerTitle);\r\n        this.header = header;\r\n        this.button = header.node.getElementsByClassName(COLLAPSIBLE_HEADER_ICON)[0];\r\n        header.node.onclick = this.toggleCollapsed.bind(this);\r\n        this.addWidget(header);\r\n        this.container = new widgets_1.Panel();\r\n        this.container.addClass(COLLAPSIBLE_CONTAINER);\r\n        this.slider = new widgets_1.Panel();\r\n        this.slider.addClass(COLLAPSIBLE_SLIDER);\r\n        this.slider.addWidget(inner);\r\n        this.container.addWidget(this.slider);\r\n        this.addWidget(this.container);\r\n        this.slider.addClass(collapsed === true ?\r\n            COLLAPSIBLE_CLOSED :\r\n            COLLAPSIBLE_OPEN);\r\n        this.button.classList.add(collapsed === true ?\r\n            COLLAPSIBLE_HEADER_ICON_CLOSED :\r\n            COLLAPSIBLE_HEADER_ICON_OPEN);\r\n        this.button.classList.add(\"fa\");\r\n        this.button.classList.add(collapsed === true ?\r\n            \"fa-caret-down\" :\r\n            \"fa-caret-up\");\r\n    }\r\n    static createHeader(headerTitle) {\r\n        let header = new widgets_1.Panel();\r\n        header.addClass(COLLAPSIBLE_HEADER);\r\n        if (headerTitle) {\r\n            // let title = document.createElement('span');\r\n            header.node.innerText = headerTitle;\r\n            // header.appendChild(title);\r\n        }\r\n        let button = document.createElement('button');\r\n        button.className = COLLAPSIBLE_HEADER_ICON;\r\n        header.node.appendChild(button);\r\n        return header;\r\n    }\r\n    toggleCollapsed() {\r\n        let slider = this.slider;\r\n        let button = this.button;\r\n        if (this.collapsed) {\r\n            slider.removeClass(COLLAPSIBLE_CLOSED);\r\n            slider.addClass(COLLAPSIBLE_OPEN);\r\n            button.classList.remove(COLLAPSIBLE_HEADER_ICON_CLOSED);\r\n            button.classList.add(COLLAPSIBLE_HEADER_ICON_OPEN);\r\n            this.button.classList.remove(\"fa-caret-down\");\r\n            this.button.classList.add(\"fa-caret-up\");\r\n        }\r\n        else {\r\n            slider.removeClass(COLLAPSIBLE_OPEN);\r\n            slider.addClass(COLLAPSIBLE_CLOSED);\r\n            button.classList.remove(COLLAPSIBLE_HEADER_ICON_OPEN);\r\n            button.classList.add(COLLAPSIBLE_HEADER_ICON_CLOSED);\r\n            this.button.classList.remove(\"fa-caret-up\");\r\n            this.button.classList.add(\"fa-caret-down\");\r\n        }\r\n    }\r\n    get collapsed() {\r\n        return this.slider.hasClass(COLLAPSIBLE_CLOSED);\r\n    }\r\n    set headerTitle(value) {\r\n        this.header.node.innerText = value;\r\n    }\r\n}\r\nexports.CollapsiblePanel = CollapsiblePanel;\r\n//# sourceMappingURL=collapsiblepanel.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FriendlyDragDrop = exports.DragDropPanel = exports.DragPanel = exports.DragDropPanelBase = exports.DropPanel = exports.findChild = exports.belongsToUs = exports.MIME_INDEX = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst coreutils_1 = require(\"@lumino/coreutils\");\r\nconst dragdrop_1 = require(\"@lumino/dragdrop\");\r\n/**\r\n * The class name added to the DropPanel\r\n */\r\nconst DROP_WIDGET_CLASS = 'jp-DropPanel';\r\n/**\r\n * The class name added to the DragPanel\r\n */\r\nconst DRAG_WIDGET_CLASS = 'jp-DragPanel';\r\n/**\r\n * The class name added to something which can be used to drag a box\r\n */\r\nconst DRAG_HANDLE = 'jp-mod-dragHandle';\r\n/**\r\n * The class name of the default drag handle\r\n */\r\nconst DEFAULT_DRAG_HANDLE_CLASS = 'jp-DragPanel-dragHandle';\r\n/**\r\n * The class name added to a drop target.\r\n */\r\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\r\n/**\r\n * MIME type representing drag data by index\r\n */\r\nexports.MIME_INDEX = 'application/vnd.jupyter.dragindex';\r\n/**\r\n * The threshold in pixels to start a drag event.\r\n */\r\nconst DRAG_THRESHOLD = 5;\r\n/**\r\n * Determine whether node is equal to or a decendant of our panel, and that is does\r\n * not belong to a nested drag panel.\r\n */\r\nfunction belongsToUs(node, parentClass, parentNode) {\r\n    let candidate = node;\r\n    // Traverse DOM until drag panel encountered:\r\n    while (candidate && !candidate.classList.contains(parentClass)) {\r\n        candidate = candidate.parentElement;\r\n    }\r\n    return !!candidate && candidate === parentNode;\r\n}\r\nexports.belongsToUs = belongsToUs;\r\n/**\r\n * Find the direct child node of `parent`, which has `node` as a descendant.\r\n * Alternatively, parent can be a collection of children.\r\n *\r\n * Returns null if not found.\r\n */\r\nfunction findChild(parent, node) {\r\n    // Work our way up the DOM to an element which has this node as parent\r\n    let child = null;\r\n    let parentIsArray = Array.isArray(parent);\r\n    let isDirectChild = (child) => {\r\n        if (parentIsArray) {\r\n            return parent.indexOf(child) > -1;\r\n        }\r\n        else {\r\n            return child.parentElement === parent;\r\n        }\r\n    };\r\n    let candidate = node;\r\n    while (candidate && candidate !== parent) {\r\n        if (isDirectChild(candidate)) {\r\n            child = candidate;\r\n            break;\r\n        }\r\n        candidate = candidate.parentElement;\r\n    }\r\n    return child;\r\n}\r\nexports.findChild = findChild;\r\n/**\r\n * A panel class which allows the user to drop mime data onto it.\r\n *\r\n * To complete the class, the following functions need to be implemented:\r\n *  - processDrop: Process pre-screened drop events\r\n *\r\n * The functionallity of the class can be extended by overriding the following\r\n * functions:\r\n *  - findDropTarget(): Override if anything other than the direct children\r\n *    of the widget's node are to be the drop targets.\r\n *\r\n * For maximum control, `evtDrop` can be overriden.\r\n */\r\nclass DropPanel extends widgets_1.Panel {\r\n    /**\r\n     * Construct a drop widget.\r\n     */\r\n    constructor(options = {}) {\r\n        super(options);\r\n        this.acceptDropsFromExternalSource =\r\n            options.acceptDropsFromExternalSource === true;\r\n        this.addClass(DROP_WIDGET_CLASS);\r\n    }\r\n    /**\r\n     * Handle the DOM events for the widget.\r\n     *\r\n     * @param event - The DOM event sent to the widget.\r\n     *\r\n     * #### Notes\r\n     * This method implements the DOM `EventListener` interface and is\r\n     * called in response to events on the drop widget's node. It should\r\n     * not be called directly by user code.\r\n     */\r\n    handleEvent(event) {\r\n        switch (event.type) {\r\n            case 'p-dragenter':\r\n                this._evtDragEnter(event);\r\n                break;\r\n            case 'p-dragleave':\r\n                this._evtDragLeave(event);\r\n                break;\r\n            case 'p-dragover':\r\n                this._evtDragOver(event);\r\n                break;\r\n            case 'p-drop':\r\n                this.evtDrop(event);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    validateSource(event) {\r\n        return this.acceptDropsFromExternalSource || event.source === this;\r\n    }\r\n    /**\r\n     * Find a drop target from a given drag event target.\r\n     *\r\n     * Returns null if no valid drop target was found.\r\n     *\r\n     * The default implementation returns the direct child that is the parent of\r\n     * `node`, or `node` if it is itself a direct child. It also checks that the\r\n     * needed mime type is included\r\n     */\r\n    findDropTarget(input, mimeData) {\r\n        if (!mimeData.hasData(exports.MIME_INDEX)) {\r\n            return null;\r\n        }\r\n        return findChild(this.node, input);\r\n    }\r\n    /**\r\n     * Handle the `'p-drop'` event for the widget.\r\n     *\r\n     * Responsible for pre-processing event before calling `processDrop`.\r\n     *\r\n     * Should normally only be overriden if you cannot achive your goal by\r\n     * other overrides.\r\n     */\r\n    evtDrop(event) {\r\n        let target = event.target;\r\n        while (target && target.parentElement) {\r\n            if (target.classList.contains(DROP_TARGET_CLASS)) {\r\n                target.classList.remove(DROP_TARGET_CLASS);\r\n                break;\r\n            }\r\n            target = target.parentElement;\r\n        }\r\n        if (!target || !belongsToUs(target, DROP_WIDGET_CLASS, this.node)) {\r\n            // Ignore event\r\n            return;\r\n        }\r\n        // If configured to, only accept internal moves:\r\n        if (!this.validateSource(event)) {\r\n            event.dropAction = 'none';\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            return;\r\n        }\r\n        this.processDrop(target, event);\r\n    }\r\n    /**\r\n     * Handle `after_attach` messages for the widget.\r\n     */\r\n    onAfterAttach(msg) {\r\n        let node = this.node;\r\n        node.addEventListener('p-dragenter', this);\r\n        node.addEventListener('p-dragleave', this);\r\n        node.addEventListener('p-dragover', this);\r\n        node.addEventListener('p-drop', this);\r\n    }\r\n    /**\r\n     * Handle `before_detach` messages for the widget.\r\n     */\r\n    onBeforeDetach(msg) {\r\n        let node = this.node;\r\n        node.removeEventListener('p-dragenter', this);\r\n        node.removeEventListener('p-dragleave', this);\r\n        node.removeEventListener('p-dragover', this);\r\n        node.removeEventListener('p-drop', this);\r\n    }\r\n    /**\r\n     * Handle the `'p-dragenter'` event for the widget.\r\n     */\r\n    _evtDragEnter(event) {\r\n        if (!this.validateSource(event)) {\r\n            return;\r\n        }\r\n        let target = this.findDropTarget(event.target, event.mimeData);\r\n        if (target === null) {\r\n            return;\r\n        }\r\n        this._clearDropTarget();\r\n        target.classList.add(DROP_TARGET_CLASS);\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n    /**\r\n     * Handle the `'p-dragleave'` event for the widget.\r\n     */\r\n    _evtDragLeave(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this._clearDropTarget();\r\n    }\r\n    /**\r\n     * Handle the `'p-dragover'` event for the widget.\r\n     */\r\n    _evtDragOver(event) {\r\n        if (!this.validateSource(event)) {\r\n            return;\r\n        }\r\n        this._clearDropTarget();\r\n        let target = this.findDropTarget(event.target, event.mimeData);\r\n        if (target === null) {\r\n            return;\r\n        }\r\n        target.classList.add(DROP_TARGET_CLASS);\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        event.dropAction = event.proposedAction;\r\n    }\r\n    /**\r\n     * Clear existing drop target from out children.\r\n     *\r\n     * #### Notes\r\n     * This function assumes there are only one active drop target\r\n     */\r\n    _clearDropTarget() {\r\n        let elements = this.node.getElementsByClassName(DROP_TARGET_CLASS);\r\n        if (elements.length) {\r\n            elements[0].classList.remove(DROP_TARGET_CLASS);\r\n        }\r\n    }\r\n}\r\nexports.DropPanel = DropPanel;\r\n;\r\n/**\r\n * An internal base class for implementing drag operations on top\r\n * of drop class.\r\n */\r\nclass DragDropPanelBase extends DropPanel {\r\n    /**\r\n     * Construct a drag and drop base widget.\r\n     */\r\n    constructor(options = {}) {\r\n        super(options);\r\n        /**\r\n         * Drag data stored in _startDrag\r\n         */\r\n        this.drag = null;\r\n        this.dragHandleClass = DRAG_HANDLE;\r\n        /**\r\n         * Data stored on mouse down to determine if drag treshold has\r\n         * been overcome, and to initialize drag once it has.\r\n         */\r\n        this._clickData = null;\r\n        this.childrenAreDragHandles = options.childrenAreDragHandles === true;\r\n        this.addClass(DRAG_WIDGET_CLASS);\r\n    }\r\n    /**\r\n     * Dispose of the resources held by the directory listing.\r\n     */\r\n    dispose() {\r\n        this.drag = null;\r\n        this._clickData = null;\r\n        super.dispose();\r\n    }\r\n    /**\r\n     * Handle the DOM events for the widget.\r\n     *\r\n     * @param event - The DOM event sent to the widget.\r\n     *\r\n     * #### Notes\r\n     * This method implements the DOM `EventListener` interface and is\r\n     * called in response to events on the drag widget's node. It should\r\n     * not be called directly by user code.\r\n     */\r\n    handleEvent(event) {\r\n        switch (event.type) {\r\n            case 'mousedown':\r\n                this._evtDragMousedown(event);\r\n                break;\r\n            case 'mouseup':\r\n                this._evtDragMouseup(event);\r\n                break;\r\n            case 'mousemove':\r\n                this._evtDragMousemove(event);\r\n                break;\r\n            default:\r\n                super.handleEvent(event);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Finds the drag target (the node to move) from a drag handle.\r\n     *\r\n     * Returns null if no valid drag target was found.\r\n     *\r\n     * The default implementation returns the direct child that is the ancestor of\r\n     * (or equal to) the handle.\r\n     */\r\n    findDragTarget(handle) {\r\n        return findChild(this.node, handle);\r\n    }\r\n    /**\r\n     * Returns the drag image to use when dragging using the given handle.\r\n     *\r\n     * The default implementation returns a clone of the drag target.\r\n     */\r\n    getDragImage(handle) {\r\n        let target = this.findDragTarget(handle);\r\n        if (target) {\r\n            return target.cloneNode(true);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Called when a drag has completed with this panel as a source\r\n     */\r\n    onDragComplete(action) {\r\n        this.drag = null;\r\n    }\r\n    /**\r\n     * Handle `after_attach` messages for the widget.\r\n     */\r\n    onAfterAttach(msg) {\r\n        let node = this.node;\r\n        node.addEventListener('mousedown', this);\r\n        super.onAfterAttach(msg);\r\n    }\r\n    /**\r\n     * Handle `before_detach` messages for the widget.\r\n     */\r\n    onBeforeDetach(msg) {\r\n        let node = this.node;\r\n        node.removeEventListener('click', this);\r\n        node.removeEventListener('dblclick', this);\r\n        document.removeEventListener('mousemove', this, true);\r\n        document.removeEventListener('mouseup', this, true);\r\n        super.onBeforeDetach(msg);\r\n    }\r\n    /**\r\n     * Start a drag event.\r\n     *\r\n     * Called when dragginging and DRAG_THRESHOLD is met.\r\n     *\r\n     * Should normally only be overriden if you cannot achieve your goal by\r\n     * other overrides.\r\n     */\r\n    startDrag(handle, clientX, clientY) {\r\n        // Create the drag image.\r\n        let dragImage = this.getDragImage(handle);\r\n        // Set up the drag event.\r\n        this.drag = new dragdrop_1.Drag({\r\n            dragImage: dragImage || undefined,\r\n            mimeData: new coreutils_1.MimeData(),\r\n            supportedActions: 'all',\r\n            proposedAction: 'copy',\r\n            source: this\r\n        });\r\n        this.addMimeData(handle, this.drag.mimeData);\r\n        // Start the drag and remove the mousemove listener.\r\n        this.drag.start(clientX, clientY).then(this.onDragComplete.bind(this));\r\n        document.removeEventListener('mousemove', this, true);\r\n        document.removeEventListener('mouseup', this, true);\r\n    }\r\n    /**\r\n     * Check if node, or any of nodes ancestors are a drag handle\r\n     *\r\n     * If it is a drag handle, it returns the handle, if not returns null.\r\n     */\r\n    _findDragHandle(node) {\r\n        let handle = null;\r\n        if (this.childrenAreDragHandles) {\r\n            // Simple scenario, just look for node among children\r\n            if (belongsToUs(node, DRAG_WIDGET_CLASS, this.node)) {\r\n                handle = node;\r\n            }\r\n        }\r\n        else {\r\n            // Otherwise, traverse up DOM to check if click is on a drag handle\r\n            let candidate = node;\r\n            while (candidate && candidate !== this.node) {\r\n                if (candidate.classList.contains(this.dragHandleClass)) {\r\n                    handle = candidate;\r\n                    break;\r\n                }\r\n                candidate = candidate.parentElement;\r\n            }\r\n            // Finally, check that handle does not belong to a nested drag panel\r\n            if (handle !== null && !belongsToUs(handle, DRAG_WIDGET_CLASS, this.node)) {\r\n                // Handle belongs to a nested drag panel:\r\n                handle = null;\r\n            }\r\n        }\r\n        return handle;\r\n    }\r\n    /**\r\n     * Handle the `'mousedown'` event for the widget.\r\n     */\r\n    _evtDragMousedown(event) {\r\n        let target = event.target;\r\n        let handle = this._findDragHandle(target);\r\n        if (handle === null) {\r\n            return;\r\n        }\r\n        // Left mouse press for drag start.\r\n        if (event.button === 0) {\r\n            this._clickData = { pressX: event.clientX, pressY: event.clientY,\r\n                handle: handle };\r\n            document.addEventListener('mouseup', this, true);\r\n            document.addEventListener('mousemove', this, true);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    /**\r\n     * Handle the `'mouseup'` event for the widget.\r\n     */\r\n    _evtDragMouseup(event) {\r\n        if (event.button !== 0 || !this.drag) {\r\n            document.removeEventListener('mousemove', this, true);\r\n            document.removeEventListener('mouseup', this, true);\r\n            this.drag = null;\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n    /**\r\n     * Handle the `'mousemove'` event for the widget.\r\n     */\r\n    _evtDragMousemove(event) {\r\n        // Bail if we are already dragging.\r\n        if (this.drag) {\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Check for a drag initialization.\r\n        let data = this._clickData;\r\n        if (!data) {\r\n            throw new Error('Missing drag data');\r\n        }\r\n        let dx = Math.abs(event.clientX - data.pressX);\r\n        let dy = Math.abs(event.clientY - data.pressY);\r\n        if (dx < DRAG_THRESHOLD && dy < DRAG_THRESHOLD) {\r\n            return;\r\n        }\r\n        this.startDrag(data.handle, event.clientX, event.clientY);\r\n        this._clickData = null;\r\n    }\r\n}\r\nexports.DragDropPanelBase = DragDropPanelBase;\r\n/**\r\n * A panel which allows the user to initiate drag operations.\r\n *\r\n * Any descendant element with the drag handle class `'jp-mod-dragHandle'`\r\n * will serve as a handle that can be used for dragging. If DragPanels are\r\n * nested, handles will only belong to the closest parent DragPanel. For\r\n * convenience, the functions `makeHandle`, `unmakeHandle` and\r\n * `createDefaultHandle` can be used to indicate which elements should be\r\n * made handles. `createDefaultHandle` will create a new element as a handle\r\n * with a default styling class applied. Optionally, `childrenAreDragHandles`\r\n * can be set to indicate that all direct children are themselve drag handles.\r\n *\r\n * To complete the class, the following functions need to be implemented:\r\n * - addMimeData: Adds mime data to new drag events\r\n *\r\n * The functionallity of the class can be extended by overriding the following\r\n * functions:\r\n *  - findDragTarget(): Override if anything other than the direct children\r\n *    of the widget's node are to be drag targets.\r\n *  - getDragImage: Override to change the drag image (the default is a\r\n *    copy of the drag target).\r\n *  - onDragComplete(): Callback on drag source when a drag has completed.\r\n */\r\nclass DragPanel extends DragDropPanelBase {\r\n    /**\r\n     * Construct a drag widget.\r\n     */\r\n    constructor(options = {}) {\r\n        // Implementation removes DropPanel options\r\n        super(options);\r\n    }\r\n    /**\r\n     * No-op on DragPanel, as it does not support dropping\r\n     */\r\n    processDrop(dropTarget, event) {\r\n        // Intentionally empty\r\n    }\r\n    /**\r\n     * Simply returns null for DragPanel, as it does not support dropping\r\n     */\r\n    findDropTarget(input, mimeData) {\r\n        return null;\r\n    }\r\n}\r\nexports.DragPanel = DragPanel;\r\n/**\r\n * A widget which allows the user to rearrange widgets in the panel by\r\n * drag and drop. An internal drag and drop of a widget will cause it\r\n * to be inserted (by `insertWidget`) in the index of the widget it was\r\n * dropped on.\r\n *\r\n * Any descendant element with the drag handle class `'jp-mod-dragHandle'`\r\n * will serve as a handle that can be used for dragging. If DragPanels are\r\n * nested, handles will only belong to the closest parent DragPanel. For\r\n * convenience, the functions `makeHandle`, `unmakeHandle` and\r\n * `createDefaultHandle` can be used to indicate which elements should be\r\n * made handles. `createDefaultHandle` will create a new element as a handle\r\n * with a default styling class applied. Optionally, `childrenAreDragHandles`\r\n * can be set to indicate that all direct children are themselve drag handles.\r\n *\r\n * The functionallity of the class can be extended by overriding the following\r\n * functions:\r\n *  - addMimeData: Override to add other drag data to the mime bundle.\r\n *    This is often a necessary step for allowing dragging to external\r\n *    drop targets.\r\n *  - processDrop: Override if you need to handle other mime data than the\r\n *    default. For allowing drops from external sources, the field\r\n *    `acceptDropsFromExternalSource` should be set as well.\r\n *  - findDragTarget(): Override if anything other than the direct children\r\n *    of the widget's node are to be drag targets.\r\n *  - findDropTarget(): Override if anything other than the direct children\r\n *    of the widget's node are to be the drop targets.\r\n *  - getIndexOfChildNode(): Override to change the key used to represent\r\n *    the drag and drop target (default is index of child widget).\r\n *  - move(): Override to change how a move is handled.\r\n *  - getDragImage: Override to change the drag image (the default is a\r\n *    copy of the drag target).\r\n *  - onDragComplete(): Callback on drag source when a drag has completed.\r\n *\r\n * To drag and drop other things than all direct children, the following functions\r\n * should be overriden: `findDragTarget`, `findDropTarget` and possibly\r\n * `getIndexOfChildNode` and `move` to allow for custom to/from keys.\r\n *\r\n * For maximum control, `startDrag` and `evtDrop` can be overriden.\r\n */\r\nclass DragDropPanel extends DragDropPanelBase {\r\n    /**\r\n     * Called when a widget should be moved as a consequence of an internal drag event.\r\n     *\r\n     * The default implementation assumes the keys `from` and `to` are numbers\r\n     * indexing the drag panel's direct children. It then moves the child at the\r\n     * `to` key to the location of the `from` key.\r\n     */\r\n    move(from, to) {\r\n        if (to !== from) {\r\n            // Adjust for the shifting of elements once 'from' is removed\r\n            if (to > from) {\r\n                to -= 1;\r\n            }\r\n            this.insertWidget(to, this.widgets[from]);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a key used to represent the child node.\r\n     *\r\n     * The default implementation returns the index of node in\r\n     * `this.layout.widgets`.\r\n     *\r\n     * Returns null if not found.\r\n     */\r\n    getIndexOfChildNode(node, parent) {\r\n        parent = parent || this.layout;\r\n        for (let i = 0; i < parent.widgets.length; i++) {\r\n            if (parent.widgets[i].node === node) {\r\n                return i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Adds mime data represeting the drag data to the drag event's MimeData bundle.\r\n     *\r\n     * The default implementation adds mime data indicating the index of the direct\r\n     * child being dragged (as indicated by findDragTarget).\r\n     *\r\n     * Override this method if you have data that cannot be communicated well by an\r\n     * index, for example if the data should be able to be dropped on an external\r\n     * target that only understands direct mime data.\r\n     *\r\n     * As the method simply adds mime data for a specific key, overriders can call\r\n     * this method before/after adding their own mime data to still support default\r\n     * dragging behavior.\r\n     */\r\n    addMimeData(handle, mimeData) {\r\n        let target = this.findDragTarget(handle);\r\n        let key = this.getIndexOfChildNode(target);\r\n        if (key !== null) {\r\n            mimeData.setData(exports.MIME_INDEX, key);\r\n        }\r\n    }\r\n    /**\r\n     * Processes a drop event.\r\n     *\r\n     * This function is called after checking:\r\n     *  - That the `dropTarget` is a valid drop target\r\n     *  - The value of `event.source` if `acceptDropsFromExternalSource` is false\r\n     *\r\n     * The default implementation assumes calling `getIndexOfChildNode` with\r\n     * `dropTarget` will be valid. It will call `move` with that index as `to`,\r\n     * and the index stored in the mime data as `from`.\r\n     *\r\n     * Override this if you need to handle other mime data than the default.\r\n     */\r\n    processDrop(dropTarget, event) {\r\n        if (!DropPanel.isValidAction(event.supportedActions, 'move') ||\r\n            event.proposedAction === 'none') {\r\n            // The default implementation only handles move action\r\n            // OR Accept proposed none action, and perform no-op\r\n            event.dropAction = 'none';\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            return;\r\n        }\r\n        if (!this.validateSource(event)) {\r\n            // Source indicates external drop, incorrect use in subclass\r\n            throw new Error('Invalid source!');\r\n        }\r\n        let sourceKey = event.mimeData.getData(exports.MIME_INDEX);\r\n        let targetKey = this.getIndexOfChildNode(dropTarget);\r\n        if (targetKey === null) {\r\n            // Invalid target somehow\r\n            return;\r\n        }\r\n        // We have an acceptable drop, handle:\r\n        this.move(sourceKey, targetKey);\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        event.dropAction = 'move';\r\n    }\r\n}\r\nexports.DragDropPanel = DragDropPanel;\r\n/**\r\n * The namespace for the `DropPanel` class statics.\r\n */\r\n(function (DropPanel) {\r\n    /**\r\n     * Validate a drop action against a SupportedActions type\r\n     */\r\n    function isValidAction(supported, action) {\r\n        switch (supported) {\r\n            case 'all':\r\n                return true;\r\n            case 'link-move':\r\n                return action === 'move' || action === 'link';\r\n            case 'copy-move':\r\n                return action === 'move' || action === 'copy';\r\n            case 'copy-link':\r\n                return action === 'link' || action === 'copy';\r\n            default:\r\n                return action === supported;\r\n        }\r\n    }\r\n    DropPanel.isValidAction = isValidAction;\r\n})(DropPanel = exports.DropPanel || (exports.DropPanel = {}));\r\n/**\r\n * The namespace for the `DragPanel` class statics.\r\n */\r\n(function (DragPanel) {\r\n    /**\r\n     * Mark a widget as a drag handle.\r\n     *\r\n     * Using this, any child-widget can be a drag handle, as long as mouse events\r\n     * are propagated from it to the DragPanel.\r\n     */\r\n    function makeHandle(handle) {\r\n        handle.addClass(DRAG_HANDLE);\r\n    }\r\n    DragPanel.makeHandle = makeHandle;\r\n    /**\r\n     * Unmark a widget as a drag handle\r\n     */\r\n    function unmakeHandle(handle) {\r\n        handle.removeClass(DRAG_HANDLE);\r\n    }\r\n    DragPanel.unmakeHandle = unmakeHandle;\r\n    /**\r\n     * Create a default handle widget for dragging (see styling in DragPanel.css).\r\n     *\r\n     * The handle will need to be styled to ensure a minimum size\r\n     */\r\n    function createDefaultHandle() {\r\n        let widget = new widgets_1.Widget();\r\n        widget.addClass(DEFAULT_DRAG_HANDLE_CLASS);\r\n        makeHandle(widget);\r\n        return widget;\r\n    }\r\n    DragPanel.createDefaultHandle = createDefaultHandle;\r\n})(DragPanel = exports.DragPanel || (exports.DragPanel = {}));\r\nclass FriendlyDragDrop extends DragDropPanel {\r\n    static makeGroup() {\r\n        const id = this._counter++;\r\n        FriendlyDragDrop._groups[id] = [];\r\n        return id;\r\n    }\r\n    setFriendlyGroup(id) {\r\n        this._groupId = id;\r\n        FriendlyDragDrop._groups[id].push(this);\r\n    }\r\n    addToFriendlyGroup(other) {\r\n        other.setFriendlyGroup(this._groupId);\r\n    }\r\n    get friends() {\r\n        if (this._groupId === undefined) {\r\n            throw new Error('Uninitialized drag-drop group');\r\n        }\r\n        return FriendlyDragDrop._groups[this._groupId];\r\n    }\r\n    getIndexOfChildNode(node, parent) {\r\n        const friends = this.friends;\r\n        for (let panel of friends) {\r\n            if (!belongsToUs(node, DROP_WIDGET_CLASS, panel.node)) {\r\n                continue;\r\n            }\r\n            let child = findChild(panel.node, node);\r\n            if (child !== null) {\r\n                return [panel.friends.indexOf(panel), super.getIndexOfChildNode(child, panel.layout)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    validateSource(event) {\r\n        if (this.acceptDropsFromExternalSource) {\r\n            return this.friends.indexOf(event.source) !== -1;\r\n        }\r\n        return super.validateSource(event);\r\n    }\r\n}\r\nexports.FriendlyDragDrop = FriendlyDragDrop;\r\nFriendlyDragDrop._counter = 0;\r\nFriendlyDragDrop._groups = {};\r\n//# sourceMappingURL=dragpanel.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EditorWidget = void 0;\r\nconst codeeditor_1 = require(\"@jupyterlab/codeeditor\");\r\nconst codemirror_1 = require(\"@jupyterlab/codemirror\");\r\nclass EditorWidget extends codeeditor_1.CodeEditorWrapper {\r\n    /**\r\n     * Store all editor instances for operations that\r\n     * need to loop over all instances.\r\n     */\r\n    constructor(value, options) {\r\n        if (options && options.readOnly) {\r\n            // Prevent readonly editor from trapping tabs\r\n            options.extraKeys = { Tab: false, 'Shift-Tab': false };\r\n        }\r\n        super({\r\n            model: new codeeditor_1.CodeEditor.Model({ value }),\r\n            factory: function () {\r\n                let factory = new codemirror_1.CodeMirrorEditorFactory(options);\r\n                return factory.newInlineEditor.bind(factory);\r\n            }()\r\n        });\r\n        this.staticLoaded = false;\r\n        EditorWidget.editors.push(this.cm);\r\n    }\r\n    get cm() {\r\n        return this.editor.editor;\r\n    }\r\n    get doc() {\r\n        return this.editor.doc;\r\n    }\r\n    /**\r\n     * A message handler invoked on an `'resize'` message.\r\n     */\r\n    onResize(msg) {\r\n        if (!this.staticLoaded) {\r\n            if (msg.width < 0 || msg.height < 0) {\r\n                this.cm.setSize(null, null);\r\n            }\r\n            else {\r\n                super.onResize(msg);\r\n            }\r\n            if (this.editor.getOption('readOnly') && document.contains(this.node)) {\r\n                this.staticLoaded = true;\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.EditorWidget = EditorWidget;\r\nEditorWidget.editors = [];\r\n//# sourceMappingURL=editor.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NotifyUserError = void 0;\r\n/**\r\n * An error that should be displayed to the user\r\n */\r\nclass NotifyUserError extends Error {\r\n    constructor(message, severity = 'error') {\r\n        super(message);\r\n        // Set the prototype explicitly.\r\n        Object.setPrototypeOf(this, NotifyUserError.prototype);\r\n        this.message = message;\r\n        this.stack = new Error().stack;\r\n        this.severity = severity;\r\n    }\r\n}\r\nexports.NotifyUserError = NotifyUserError;\r\n//# sourceMappingURL=exceptions.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n// This code is based on the CodeMirror mergeview.js source:\r\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\r\n// Distributed under an MIT license: http://codemirror.net/LICENSE\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MergeView = exports.DiffView = exports.createNbdimeMergeView = exports.EventDirection = exports.DIFF_OP = void 0;\r\nconst CodeMirror = require(\"codemirror\");\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst model_1 = require(\"../merge/model\");\r\nconst chunking_1 = require(\"../chunking\");\r\nconst editor_1 = require(\"./editor\");\r\nconst util_1 = require(\"./util\");\r\nconst exceptions_1 = require(\"./exceptions\");\r\nconst PICKER_SYMBOL = '\\u27ad';\r\nconst CONFLICT_MARKER = '\\u26A0'; // '\\u2757'\r\nvar DIFF_OP;\r\n(function (DIFF_OP) {\r\n    DIFF_OP[DIFF_OP[\"DIFF_DELETE\"] = -1] = \"DIFF_DELETE\";\r\n    DIFF_OP[DIFF_OP[\"DIFF_INSERT\"] = 1] = \"DIFF_INSERT\";\r\n    DIFF_OP[DIFF_OP[\"DIFF_EQUAL\"] = 0] = \"DIFF_EQUAL\";\r\n})(DIFF_OP = exports.DIFF_OP || (exports.DIFF_OP = {}));\r\nvar EventDirection;\r\n(function (EventDirection) {\r\n    EventDirection[EventDirection[\"INCOMING\"] = 0] = \"INCOMING\";\r\n    EventDirection[EventDirection[\"OUTGOING\"] = 1] = \"OUTGOING\";\r\n})(EventDirection = exports.EventDirection || (exports.EventDirection = {}));\r\nconst GUTTER_PICKER_CLASS = 'jp-Merge-gutter-picker';\r\nconst GUTTER_CONFLICT_CLASS = 'jp-Merge-gutter-conflict';\r\nconst CHUNK_CONFLICT_CLASS = 'jp-Merge-conflict';\r\nconst leftClasses = { chunk: 'CodeMirror-merge-l-chunk',\r\n    start: 'CodeMirror-merge-l-chunk-start',\r\n    end: 'CodeMirror-merge-l-chunk-end',\r\n    insert: 'CodeMirror-merge-l-inserted',\r\n    del: 'CodeMirror-merge-l-deleted',\r\n    connect: 'CodeMirror-merge-l-connect',\r\n    gutter: 'CodeMirror-merge-l-gutter' };\r\nconst rightClasses = { chunk: 'CodeMirror-merge-r-chunk',\r\n    start: 'CodeMirror-merge-r-chunk-start',\r\n    end: 'CodeMirror-merge-r-chunk-end',\r\n    insert: 'CodeMirror-merge-r-inserted',\r\n    del: 'CodeMirror-merge-r-deleted',\r\n    connect: 'CodeMirror-merge-r-connect',\r\n    gutter: 'CodeMirror-merge-r-gutter' };\r\nconst mergeClassPrefix = { chunk: 'CodeMirror-merge-m-chunk',\r\n    start: 'CodeMirror-merge-m-chunk-start',\r\n    end: 'CodeMirror-merge-m-chunk-end',\r\n    insert: 'CodeMirror-merge-m-inserted',\r\n    del: 'CodeMirror-merge-m-deleted',\r\n    connect: 'CodeMirror-merge-m-connect',\r\n    gutter: 'CodeMirror-merge-m-gutter' };\r\nfunction createNbdimeMergeView(remote, local, merged, readOnly) {\r\n    let opts = {\r\n        remote,\r\n        local,\r\n        merged,\r\n        readOnly,\r\n        orig: null\r\n    };\r\n    opts.collapseIdentical = true;\r\n    let mergeview = new MergeView(opts);\r\n    let editors = [];\r\n    if (mergeview.left) {\r\n        editors.push(mergeview.left);\r\n    }\r\n    if (mergeview.right) {\r\n        editors.push(mergeview.right);\r\n    }\r\n    if (mergeview.merge) {\r\n        editors.push(mergeview.merge);\r\n    }\r\n    let mimetype = (remote || merged).mimetype;\r\n    if (mimetype) {\r\n        // Set the editor mode to the MIME type.\r\n        for (let e of editors) {\r\n            e.ownWidget.model.mimeType = mimetype;\r\n        }\r\n        mergeview.base.model.mimeType = mimetype;\r\n    }\r\n    return mergeview;\r\n}\r\nexports.createNbdimeMergeView = createNbdimeMergeView;\r\n/**\r\n * Used by MergeView to show diff in a string diff model\r\n */\r\nclass DiffView {\r\n    constructor(model, type, updateCallback, options) {\r\n        this.collapsedRanges = [];\r\n        this.model = model;\r\n        this.type = type;\r\n        this.updateCallback = updateCallback;\r\n        this.classes = type === 'left' ?\r\n            leftClasses : type === 'right' ? rightClasses : null;\r\n        let ownValue = this.model.remote || '';\r\n        this.ownWidget = new editor_1.EditorWidget(ownValue, util_1.copyObj({ readOnly: !!options.readOnly }, options));\r\n        this.showDifferences = options.showDifferences !== false;\r\n    }\r\n    init(base) {\r\n        this.baseEditor = base;\r\n        (this.baseEditor.state.diffViews ||\r\n            (this.baseEditor.state.diffViews = [])).push(this);\r\n        this.ownEditor.state.diffViews = [this];\r\n        this.baseEditor.on('gutterClick', this.onGutterClick.bind(this));\r\n        this.ownEditor.on('gutterClick', this.onGutterClick.bind(this));\r\n        this.lineChunks = this.model.getLineChunks();\r\n        this.chunks = chunking_1.lineToNormalChunks(this.lineChunks);\r\n        this.dealigned = false;\r\n        this.forceUpdate = this.registerUpdate();\r\n        this.setScrollLock(true, false);\r\n        this.registerScroll();\r\n    }\r\n    setShowDifferences(val) {\r\n        val = val !== false;\r\n        if (val !== this.showDifferences) {\r\n            this.showDifferences = val;\r\n            this.forceUpdate('full');\r\n        }\r\n    }\r\n    syncModel() {\r\n        if (this.modelInvalid()) {\r\n            let edit = this.ownEditor;\r\n            let updatedLineChunks = this.model.getLineChunks();\r\n            let updatedChunks = chunking_1.lineToNormalChunks(updatedLineChunks);\r\n            if (this.model.remote === edit.getValue()) {\r\n                // Nothing to do except update chunks\r\n                this.lineChunks = updatedLineChunks;\r\n                this.chunks = updatedChunks;\r\n                return;\r\n            }\r\n            let cursor = edit.getDoc().getCursor();\r\n            let newLines = util_1.splitLines(this.model.remote);\r\n            let start = edit.getDoc().firstLine();\r\n            let last = edit.getDoc().lastLine() + 1;\r\n            let cumulativeOffset = 0;\r\n            let end;\r\n            let updatedEnd;\r\n            // We want to replace contents of editor, but if we have collapsed regions\r\n            // some lines have been optimized away. Carefully replace the relevant bits:\r\n            for (let range of this.collapsedRanges) {\r\n                let baseLine = range.line;\r\n                end = getMatchingEditLine(baseLine, this.chunks);\r\n                updatedEnd = getMatchingEditLine(baseLine, updatedChunks);\r\n                let offset = updatedEnd - end;\r\n                if (end !== start || offset !== 0) {\r\n                    edit.getDoc().replaceRange(newLines.slice(start + cumulativeOffset, updatedEnd + cumulativeOffset - 1).join(''), CodeMirror.Pos(start, 0), CodeMirror.Pos(end - 1, 0), 'syncModel');\r\n                }\r\n                cumulativeOffset += offset;\r\n                start = end + range.size;\r\n            }\r\n            if (start < last) {\r\n                // Only here if no collapsed ranges, replace full contents\r\n                edit.getDoc().replaceRange(newLines.slice(start, newLines.length).join(''), CodeMirror.Pos(start, 0), CodeMirror.Pos(last, 0), 'syncModel');\r\n            }\r\n            this.ownEditor.getDoc().setCursor(cursor);\r\n            this.lineChunks = updatedLineChunks;\r\n            this.chunks = updatedChunks;\r\n        }\r\n    }\r\n    buildGap() {\r\n        let lock = this.lockButton = elt('div', undefined, 'CodeMirror-merge-scrolllock');\r\n        lock.title = 'Toggle locked scrolling';\r\n        let lockWrap = elt('div', [lock], 'CodeMirror-merge-scrolllock-wrap');\r\n        let self = this;\r\n        CodeMirror.on(lock, 'click', function () {\r\n            self.setScrollLock(!self.lockScroll);\r\n        });\r\n        return this.gap = elt('div', [lockWrap], 'CodeMirror-merge-gap');\r\n    }\r\n    setScrollLock(val, action) {\r\n        this.lockScroll = val;\r\n        if (val && action !== false) {\r\n            this.syncScroll(EventDirection.OUTGOING);\r\n        }\r\n        if (this.lockButton) {\r\n            this.lockButton.innerHTML = val ? '\\u21db\\u21da' : '\\u21db&nbsp;&nbsp;\\u21da';\r\n        }\r\n    }\r\n    registerUpdate() {\r\n        let editMarkers = [];\r\n        let origMarkers = [];\r\n        let debounceChange;\r\n        let self = this;\r\n        self.updating = false;\r\n        self.updatingFast = false;\r\n        function update(mode) {\r\n            self.updating = true;\r\n            self.updatingFast = false;\r\n            if (mode === 'full') {\r\n                self.syncModel();\r\n                if (self.classes === null) {\r\n                    clearMergeMarks(self.baseEditor, editMarkers);\r\n                    clearMergeMarks(self.ownEditor, origMarkers);\r\n                }\r\n                else {\r\n                    clearMarks(self.baseEditor, editMarkers, self.classes);\r\n                    clearMarks(self.ownEditor, origMarkers, self.classes);\r\n                }\r\n            }\r\n            if (self.showDifferences) {\r\n                self.updateMarks(self.ownEditor, self.model.additions, editMarkers, DIFF_OP.DIFF_INSERT);\r\n                self.updateMarks(self.baseEditor, self.model.deletions, origMarkers, DIFF_OP.DIFF_DELETE);\r\n            }\r\n            self.updateCallback(true);\r\n            checkSync(self.ownEditor);\r\n            self.updating = false;\r\n        }\r\n        function setDealign(fast) {\r\n            let upd = false;\r\n            for (let dv of self.baseEditor.state.diffViews) {\r\n                upd = upd || dv.updating;\r\n            }\r\n            if (upd) {\r\n                return;\r\n            }\r\n            self.dealigned = true;\r\n            set(fast === true);\r\n        }\r\n        function set(fast) {\r\n            let upd = false;\r\n            for (let dv of self.baseEditor.state.diffViews) {\r\n                upd = upd || dv.updating || dv.updatingFast;\r\n            }\r\n            if (upd) {\r\n                return;\r\n            }\r\n            clearTimeout(debounceChange);\r\n            if (fast === true) {\r\n                self.updatingFast = true;\r\n            }\r\n            debounceChange = window.setTimeout(update, fast === true ? 20 : 250);\r\n        }\r\n        function change(_cm, change) {\r\n            if (!(self.model instanceof model_1.DecisionStringDiffModel)) {\r\n                // TODO: Throttle?\r\n                self.lineChunks = self.model.getLineChunks();\r\n                self.chunks = chunking_1.lineToNormalChunks(self.lineChunks);\r\n            }\r\n            // Update faster when a line was added/removed\r\n            setDealign(change.text.length - 1 !== change.to.line - change.from.line);\r\n        }\r\n        function checkSync(cm) {\r\n            if (self.model.remote !== cm.getValue()) {\r\n                throw new exceptions_1.NotifyUserError('CRITICAL: Merge editor out of sync with model! ' +\r\n                    'Double-check any saved merge output!');\r\n            }\r\n        }\r\n        this.baseEditor.on('change', change);\r\n        this.ownEditor.on('change', change);\r\n        this.baseEditor.on('markerAdded', setDealign);\r\n        this.baseEditor.on('markerCleared', setDealign);\r\n        this.ownEditor.on('markerAdded', setDealign);\r\n        this.ownEditor.on('markerCleared', setDealign);\r\n        this.baseEditor.on('viewportChange', function () { set(false); });\r\n        this.ownEditor.on('viewportChange', function () { set(false); });\r\n        update();\r\n        return update;\r\n    }\r\n    modelInvalid() {\r\n        return this.model instanceof model_1.DecisionStringDiffModel &&\r\n            this.model.invalid;\r\n    }\r\n    onGutterClick(instance, line, gutter, clickEvent) {\r\n        if (clickEvent.button !== 0) {\r\n            // Only care about left clicks\r\n            return;\r\n        }\r\n        let li = instance.lineInfo(line);\r\n        if (!li.gutterMarkers || !li.gutterMarkers.hasOwnProperty(gutter)) {\r\n            return;\r\n        }\r\n        let node = li.gutterMarkers[gutter];\r\n        if (node && node.sources) {\r\n            let ss = node.sources;\r\n            if (gutter === GUTTER_PICKER_CLASS) {\r\n                if (instance === this.ownEditor) {\r\n                    for (let s of ss) {\r\n                        s.decision.action = s.action;\r\n                    }\r\n                }\r\n                else if (this.type === 'merge' && instance === this.baseEditor) {\r\n                    for (let s of ss) {\r\n                        s.decision.action = 'base';\r\n                    }\r\n                }\r\n                for (let i = ss.length - 1; i >= 0; --i) {\r\n                    let s = ss[i];\r\n                    if (this.type === 'merge' && util_1.hasEntries(s.decision.customDiff)) {\r\n                        // Custom diffs are cleared on pick,\r\n                        // as there is no way to re-pick them\r\n                        s.decision.customDiff = [];\r\n                    }\r\n                }\r\n                if (ss.length === 0) {\r\n                    // All decisions empty, remove picker\r\n                    // In these cases, there should only be one picker, on base\r\n                    // so simply remove the one we have here\r\n                    instance.setGutterMarker(line, GUTTER_PICKER_CLASS, null);\r\n                }\r\n            }\r\n            else if (gutter === GUTTER_CONFLICT_CLASS) {\r\n                for (let s of ss) {\r\n                    s.decision.conflict = false;\r\n                }\r\n            }\r\n            for (let dv of this.baseEditor.state.diffViews) {\r\n                if (dv.model instanceof model_1.DecisionStringDiffModel) {\r\n                    dv.model.invalidate();\r\n                }\r\n                dv.forceUpdate('full');\r\n            }\r\n        }\r\n    }\r\n    registerScroll() {\r\n        let self = this;\r\n        this.baseEditor.on('scroll', function () {\r\n            self.syncScroll(EventDirection.OUTGOING);\r\n        });\r\n        this.ownEditor.on('scroll', function () {\r\n            self.syncScroll(EventDirection.INCOMING);\r\n        });\r\n    }\r\n    /**\r\n     * Sync scrolling between base and own editors. `type` is used to indicate\r\n     * which editor is the source, and which editor is the destination of the sync.\r\n     */\r\n    syncScroll(type) {\r\n        if (this.modelInvalid()) {\r\n            return;\r\n        }\r\n        if (!this.lockScroll) {\r\n            return;\r\n        }\r\n        // editor: What triggered event, other: What needs to be synced\r\n        let editor;\r\n        let other;\r\n        if (type === EventDirection.OUTGOING) {\r\n            editor = this.baseEditor;\r\n            other = this.ownEditor;\r\n        }\r\n        else {\r\n            editor = this.ownEditor;\r\n            other = this.baseEditor;\r\n        }\r\n        if (editor.state.scrollSetBy === this) {\r\n            editor.state.scrollSetBy = null;\r\n            return;\r\n        }\r\n        // Position to update to\r\n        other.state.scrollPosition = editor.getScrollInfo();\r\n        // If ticking, we already have a scroll queued\r\n        if (other.state.scrollTicking) {\r\n            return;\r\n        }\r\n        let sInfo = other.getScrollInfo();\r\n        // Don't queue an event if already synced.\r\n        if (other.state.scrollPosition.top === sInfo.top &&\r\n            other.state.scrollPosition.left === sInfo.left) {\r\n            return;\r\n        }\r\n        // Throttle by requestAnimationFrame().\r\n        // If event is outgoing, this will lead to a one frame delay of other DiffViews\r\n        let self = this;\r\n        window.requestAnimationFrame(function () {\r\n            other.scrollTo(other.state.scrollPosition.left, other.state.scrollPosition.top);\r\n            other.state.scrollTicking = false;\r\n            other.state.scrollSetBy = self;\r\n        });\r\n        other.state.scrollTicking = true;\r\n        return;\r\n    }\r\n    updateMarks(editor, diff, markers, type) {\r\n        let classes;\r\n        if (this.classes === null) {\r\n            // Only store prefixes here, will be completed later\r\n            classes = util_1.copyObj(mergeClassPrefix);\r\n        }\r\n        else {\r\n            classes = this.classes;\r\n        }\r\n        let self = this;\r\n        function markChunk(editor, from, to, sources) {\r\n            if (self.classes === null && sources.length > 0) {\r\n                // Complete merge class prefixes here\r\n                classes = util_1.copyObj(mergeClassPrefix);\r\n                // First, figure out 'action' state of chunk\r\n                let s = sources[0].action;\r\n                if (sources.length > 1) {\r\n                    for (let si of sources.slice(1)) {\r\n                        if (si.action !== s) {\r\n                            s = 'mixed';\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                for (let k of Object.keys(classes)) {\r\n                    classes[k] += '-' + s;\r\n                }\r\n            }\r\n            // Next, figure out conflict state\r\n            let conflict = false;\r\n            if (sources.length > 0) {\r\n                for (let s of sources) {\r\n                    if (s.decision.conflict) {\r\n                        conflict = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            for (let i = from; i < to; ++i) {\r\n                let line = editor.addLineClass(i, 'background', classes.chunk);\r\n                if (conflict) {\r\n                    editor.addLineClass(line, 'background', CHUNK_CONFLICT_CLASS);\r\n                }\r\n                if (i === from) {\r\n                    editor.addLineClass(line, 'background', classes.start);\r\n                    if (self.type !== 'merge') {\r\n                        // For all editors except merge editor, add a picker button\r\n                        let picker = elt('div', PICKER_SYMBOL, classes.gutter);\r\n                        picker.sources = sources;\r\n                        picker.classList.add(GUTTER_PICKER_CLASS);\r\n                        editor.setGutterMarker(line, GUTTER_PICKER_CLASS, picker);\r\n                    }\r\n                    else if (editor === self.baseEditor) {\r\n                        for (let s of sources) {\r\n                            if (s.decision.action === 'custom' &&\r\n                                !util_1.hasEntries(s.decision.localDiff) &&\r\n                                !util_1.hasEntries(s.decision.remoteDiff)) {\r\n                                // We have a custom decision, add picker on base only!\r\n                                let picker = elt('div', PICKER_SYMBOL, classes.gutter);\r\n                                picker.sources = sources;\r\n                                picker.classList.add(GUTTER_PICKER_CLASS);\r\n                                editor.setGutterMarker(line, GUTTER_PICKER_CLASS, picker);\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (conflict && editor === self.ownEditor) {\r\n                        // Add conflict markers on editor, if conflicted\r\n                        let conflictMarker = elt('div', CONFLICT_MARKER, '');\r\n                        conflictMarker.sources = sources;\r\n                        conflictMarker.classList.add(GUTTER_CONFLICT_CLASS);\r\n                        editor.setGutterMarker(line, GUTTER_CONFLICT_CLASS, conflictMarker);\r\n                    }\r\n                }\r\n                if (i === to - 1) {\r\n                    editor.addLineClass(line, 'background', classes.end);\r\n                }\r\n                markers.push(line);\r\n            }\r\n            // When the chunk is empty, make sure a horizontal line shows up\r\n            if (from === to) {\r\n                let line = editor.addLineClass(from, 'background', classes.start);\r\n                if (self.type !== 'merge') {\r\n                    let picker = elt('div', PICKER_SYMBOL, classes.gutter);\r\n                    picker.sources = sources;\r\n                    picker.classList.add(GUTTER_PICKER_CLASS);\r\n                    editor.setGutterMarker(line, GUTTER_PICKER_CLASS, picker);\r\n                }\r\n                else if (conflict) {\r\n                    // Add conflict markers on editor, if conflicted\r\n                    let conflictMarker = elt('div', CONFLICT_MARKER, '');\r\n                    conflictMarker.sources = sources;\r\n                    conflictMarker.classList.add(GUTTER_CONFLICT_CLASS);\r\n                    editor.setGutterMarker(line, GUTTER_CONFLICT_CLASS, conflictMarker);\r\n                }\r\n                editor.addLineClass(line, 'background', classes.end + '-empty');\r\n                markers.push(line);\r\n            }\r\n        }\r\n        let cls = type === DIFF_OP.DIFF_DELETE ? classes.del : classes.insert;\r\n        editor.operation(function () {\r\n            let edit = editor === self.baseEditor;\r\n            if (self.classes) {\r\n                clearMarks(editor, markers, classes);\r\n            }\r\n            else {\r\n                clearMergeMarks(editor, markers);\r\n            }\r\n            highlightChars(editor, diff, markers, cls);\r\n            for (let c of self.chunks) {\r\n                if (edit) {\r\n                    markChunk(editor, c.baseFrom, c.baseTo, c.sources);\r\n                }\r\n                else {\r\n                    markChunk(editor, c.remoteFrom, c.remoteTo, c.sources);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    get ownEditor() {\r\n        return this.ownWidget.cm;\r\n    }\r\n}\r\nexports.DiffView = DiffView;\r\n// Updating the marks for editor content\r\nfunction clearMergeMarks(editor, arr) {\r\n    for (let postfix of ['-local', '-remote', '-either', '-custom']) {\r\n        let classes = util_1.copyObj(mergeClassPrefix);\r\n        for (let k of Object.keys(classes)) {\r\n            classes[k] += postfix;\r\n        }\r\n        clearMarks(editor, arr, classes);\r\n    }\r\n}\r\nfunction isTextMarker(marker) {\r\n    return 'clear' in marker;\r\n}\r\nfunction clearMarks(editor, arr, classes) {\r\n    for (let i = arr.length - 1; i >= 0; --i) {\r\n        let mark = arr[i];\r\n        if (isTextMarker(mark)) {\r\n            mark.clear();\r\n            arr.splice(i, 1);\r\n        }\r\n        else if (mark.parent) {\r\n            editor.removeLineClass(mark, 'background', classes.chunk);\r\n            editor.removeLineClass(mark, 'background', classes.start);\r\n            editor.removeLineClass(mark, 'background', classes.end);\r\n            editor.removeLineClass(mark, 'background', CHUNK_CONFLICT_CLASS);\r\n            // Merge editor does not set a marker currently, so don't clear for it:\r\n            if (util_1.valueIn(classes.gutter, [leftClasses.gutter, rightClasses.gutter])) {\r\n                editor.setGutterMarker(mark, GUTTER_PICKER_CLASS, null);\r\n            }\r\n            else {\r\n                editor.setGutterMarker(mark, GUTTER_CONFLICT_CLASS, null);\r\n            }\r\n            let line = editor.lineInfo(mark);\r\n            if (!line.bgClass || line.bgClass.length === 0) {\r\n                arr.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction highlightChars(editor, ranges, markers, cls) {\r\n    let doc = editor.getDoc();\r\n    let origCls = null;\r\n    if (util_1.valueIn(cls, [mergeClassPrefix.del, mergeClassPrefix.insert])) {\r\n        origCls = cls;\r\n    }\r\n    for (let r of ranges) {\r\n        if (origCls !== null) {\r\n            cls = origCls + (r.source ? '-' + r.source.action : '');\r\n        }\r\n        markers.push(doc.markText(r.from, r.to, { className: cls }));\r\n    }\r\n}\r\n// Updating the gap between editor and original\r\n/**\r\n * From a line in base, find the matching line in another editor by chunks.\r\n */\r\nfunction getMatchingEditLine(baseLine, chunks) {\r\n    let offset = 0;\r\n    // Start values correspond to either the start of the chunk,\r\n    // or the start of a preceding unmodified part before the chunk.\r\n    // It is the difference between these two that is interesting.\r\n    for (let i = 0; i < chunks.length; i++) {\r\n        let chunk = chunks[i];\r\n        if (chunk.baseTo > baseLine && chunk.baseFrom <= baseLine) {\r\n            return 0;\r\n        }\r\n        if (chunk.baseFrom > baseLine) {\r\n            break;\r\n        }\r\n        offset = chunk.remoteTo - chunk.baseTo;\r\n    }\r\n    return baseLine + offset;\r\n}\r\n/**\r\n * From a line in base, find the matching line in another editor by line chunks\r\n */\r\nfunction getMatchingEditLineLC(toMatch, chunks) {\r\n    let editLine = toMatch.baseFrom;\r\n    for (let i = 0; i < chunks.length; ++i) {\r\n        let chunk = chunks[i];\r\n        if (chunk.baseFrom === editLine) {\r\n            return chunk.remoteTo;\r\n        }\r\n        if (chunk.baseFrom > editLine) {\r\n            break;\r\n        }\r\n    }\r\n    return toMatch.baseTo;\r\n}\r\n/**\r\n * Find which line numbers align with each other, in the\r\n * set of DiffViews. The returned array is of the format:\r\n *\r\n * [ aligned line #1:[Edit line number, (DiffView#1 line number, DiffView#2 line number,) ...],\r\n *   algined line #2 ..., etc.]\r\n */\r\nfunction findAlignedLines(dvs) {\r\n    let linesToAlign = [];\r\n    let ignored = [];\r\n    // First fill directly from first DiffView\r\n    let dv = dvs[0];\r\n    let others = dvs.slice(1);\r\n    for (let i = 0; i < dv.lineChunks.length; i++) {\r\n        let chunk = dv.lineChunks[i];\r\n        let lines = [chunk.baseTo, chunk.remoteTo];\r\n        for (let o of others) {\r\n            lines.push(getMatchingEditLineLC(chunk, o.lineChunks));\r\n        }\r\n        if (linesToAlign.length > 0 &&\r\n            linesToAlign[linesToAlign.length - 1][0] === lines[0]) {\r\n            let last = linesToAlign[linesToAlign.length - 1];\r\n            for (let j = 0; j < lines.length; ++j) {\r\n                last[j] = Math.max(last[j], lines[j]);\r\n            }\r\n        }\r\n        else {\r\n            if (linesToAlign.length > 0) {\r\n                let prev = linesToAlign[linesToAlign.length - 1];\r\n                let diff = lines[0] - prev[0];\r\n                for (let j = 1; j < lines.length; ++j) {\r\n                    if (diff !== lines[j] - prev[j]) {\r\n                        diff = null;\r\n                        break;\r\n                    }\r\n                }\r\n                if (diff === null) {\r\n                    linesToAlign.push(lines);\r\n                }\r\n                else {\r\n                    ignored.push(lines[0]);\r\n                    continue;\r\n                }\r\n            }\r\n            else {\r\n                linesToAlign.push(lines);\r\n            }\r\n        }\r\n    }\r\n    // Then fill any chunks from remaining DiffView, which are not already added\r\n    for (let o = 0; o < others.length; o++) {\r\n        for (let i = 0; i < others[o].lineChunks.length; i++) {\r\n            let chunk = others[o].lineChunks[i];\r\n            // Check agains existing matches to see if already consumed:\r\n            let j = 0;\r\n            for (; j < linesToAlign.length; j++) {\r\n                let align = linesToAlign[j];\r\n                if (util_1.valueIn(chunk.baseTo, ignored)) {\r\n                    // Chunk already consumed, continue to next chunk\r\n                    j = -1;\r\n                    break;\r\n                }\r\n                else if (align[0] >= chunk.baseTo) {\r\n                    // New chunk, which should be inserted in pos j,\r\n                    // such that linesToAlign are sorted on edit line\r\n                    break;\r\n                }\r\n            }\r\n            if (j > -1) {\r\n                let lines = [chunk.baseTo,\r\n                    getMatchingEditLineLC(chunk, dv.lineChunks)];\r\n                for (let k = 0; k < others.length; k++) {\r\n                    if (k === o) {\r\n                        lines.push(chunk.remoteTo);\r\n                    }\r\n                    else {\r\n                        lines.push(getMatchingEditLineLC(chunk, others[k].lineChunks));\r\n                    }\r\n                }\r\n                if (linesToAlign.length > j && linesToAlign[j][0] === chunk.baseTo) {\r\n                    let last = linesToAlign[j];\r\n                    for (let k = 0; k < lines.length; ++k) {\r\n                        last[k] = Math.max(last[k], lines[k]);\r\n                    }\r\n                }\r\n                else {\r\n                    linesToAlign.splice(j, 0, lines);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return linesToAlign;\r\n}\r\nfunction alignLines(cm, lines, aligners) {\r\n    let maxOffset = 0;\r\n    let offset = [];\r\n    for (let i = 0; i < cm.length; i++) {\r\n        if (lines[i] !== null) {\r\n            let off = cm[i].heightAtLine(lines[i], 'local');\r\n            offset[i] = off;\r\n            maxOffset = Math.max(maxOffset, off);\r\n        }\r\n    }\r\n    for (let i = 0; i < cm.length; i++) {\r\n        if (lines[i] !== null) {\r\n            let diff = maxOffset - offset[i];\r\n            if (diff > 1) {\r\n                aligners.push(padAbove(cm[i], lines[i], diff));\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction padAbove(cm, line, size) {\r\n    let above = true;\r\n    if (line > cm.getDoc().lastLine()) {\r\n        line--;\r\n        above = false;\r\n    }\r\n    let elt = document.createElement('div');\r\n    elt.className = 'CodeMirror-merge-spacer';\r\n    elt.style.height = size + 'px';\r\n    elt.style.minWidth = '1px';\r\n    return cm.addLineWidget(line, elt, { height: size, above: above });\r\n}\r\n// Merge view, containing 1 or 2 diff views.\r\nclass MergeView extends widgets_1.Panel {\r\n    constructor(options) {\r\n        super();\r\n        this.initialized = false;\r\n        this.collapsedRanges = [];\r\n        this.options = options;\r\n        let remote = options.remote;\r\n        let local = options.local || null;\r\n        let merged = options.merged || null;\r\n        let panes = 0;\r\n        let left = this.left = null;\r\n        let right = this.right = null;\r\n        let merge = this.merge = null;\r\n        let self = this;\r\n        this.diffViews = [];\r\n        this.aligners = [];\r\n        let main = options.remote || options.merged;\r\n        if (!main) {\r\n            throw new Error('Either remote or merged model needs to be specified!');\r\n        }\r\n        options.value = (main.base !== null ?\r\n            main.base : main.remote);\r\n        options.lineNumbers = options.lineNumbers !== false;\r\n        // Whether merge view should be readonly\r\n        let readOnly = options.readOnly;\r\n        // For all others:\r\n        options.readOnly = true;\r\n        /*\r\n         * Different cases possible:\r\n         *   - Local and merged supplied: Merge:\r\n         *     - Always use left, right and merge panes\r\n         *     - Use base if `showBase` not set to false\r\n         *   - Only remote supplied: Diff:\r\n         *     - No change: Use ony base editor\r\n         *     - Entire content added/deleted: Use only base editor,\r\n         *       but with different classes\r\n         *     - Partial changes: Use base + right editor\r\n         */\r\n        let dvOptions = options;\r\n        if (merged) {\r\n            options.gutters = [GUTTER_CONFLICT_CLASS, GUTTER_PICKER_CLASS];\r\n            if (options.lineWrapping === undefined) {\r\n                // Turn off linewrapping for merge view by default, keep for diff\r\n                options.lineWrapping = false;\r\n            }\r\n        }\r\n        this.base = new editor_1.EditorWidget(options.value, util_1.copyObj({ readOnly: !!options.readOnly }, options));\r\n        this.base.addClass('CodeMirror-merge-pane');\r\n        this.base.addClass('CodeMirror-merge-pane-base');\r\n        if (merged) {\r\n            let showBase = options.showBase !== false;\r\n            if (!showBase) {\r\n                this.base.node.style.display = 'hidden';\r\n            }\r\n            let leftWidget;\r\n            if (!local || local.remote === null) {\r\n                // Local value was deleted\r\n                left = this.left = null;\r\n                leftWidget = new widgets_1.Widget({ node: elt('div', 'Value missing', 'jp-mod-missing') });\r\n            }\r\n            else {\r\n                left = this.left = new DiffView(local, 'left', this.alignViews.bind(this), util_1.copyObj(dvOptions));\r\n                this.diffViews.push(left);\r\n                leftWidget = left.ownWidget;\r\n            }\r\n            leftWidget.addClass('CodeMirror-merge-pane');\r\n            leftWidget.addClass('CodeMirror-merge-pane-local');\r\n            this.addWidget(leftWidget);\r\n            if (showBase) {\r\n                this.addWidget(this.base);\r\n            }\r\n            let rightWidget;\r\n            if (!remote || remote.remote === null) {\r\n                // Remote value was deleted\r\n                right = this.right = null;\r\n                rightWidget = new widgets_1.Widget({ node: elt('div', 'Value missing', 'jp-mod-missing') });\r\n            }\r\n            else {\r\n                right = this.right = new DiffView(remote, 'right', this.alignViews.bind(this), util_1.copyObj(dvOptions));\r\n                this.diffViews.push(right);\r\n                rightWidget = right.ownWidget;\r\n            }\r\n            rightWidget.addClass('CodeMirror-merge-pane');\r\n            rightWidget.addClass('CodeMirror-merge-pane-remote');\r\n            this.addWidget(rightWidget);\r\n            this.addWidget(new widgets_1.Widget({\r\n                node: elt('div', null, 'CodeMirror-merge-clear', 'height: 0; clear: both;')\r\n            }));\r\n            merge = this.merge = new DiffView(merged, 'merge', this.alignViews.bind(this), util_1.copyObj({ readOnly }, util_1.copyObj(dvOptions)));\r\n            this.diffViews.push(merge);\r\n            let mergeWidget = merge.ownWidget;\r\n            mergeWidget.addClass('CodeMirror-merge-pane');\r\n            mergeWidget.addClass('CodeMirror-merge-pane-final');\r\n            this.addWidget(mergeWidget);\r\n            panes = 3 + (showBase ? 1 : 0);\r\n        }\r\n        else if (remote) { // If in place for type guard\r\n            this.addWidget(this.base);\r\n            if (remote.unchanged || remote.added || remote.deleted) {\r\n                if (remote.unchanged) {\r\n                    this.base.addClass('CodeMirror-merge-pane-unchanged');\r\n                }\r\n                else if (remote.added) {\r\n                    this.base.addClass('CodeMirror-merge-pane-added');\r\n                }\r\n                else if (remote.deleted) {\r\n                    this.base.addClass('CodeMirror-merge-pane-deleted');\r\n                }\r\n                panes = 1;\r\n            }\r\n            else {\r\n                right = this.right = new DiffView(remote, 'right', this.alignViews.bind(this), dvOptions);\r\n                this.diffViews.push(right);\r\n                let rightWidget = right.ownWidget;\r\n                rightWidget.addClass('CodeMirror-merge-pane');\r\n                rightWidget.addClass('CodeMirror-merge-pane-remote');\r\n                this.addWidget(new widgets_1.Widget({ node: right.buildGap() }));\r\n                this.addWidget(rightWidget);\r\n                panes = 2;\r\n            }\r\n            this.addWidget(new widgets_1.Widget({\r\n                node: elt('div', null, 'CodeMirror-merge-clear', 'height: 0; clear: both;')\r\n            }));\r\n        }\r\n        this.addClass('CodeMirror-merge');\r\n        this.addClass('CodeMirror-merge-' + panes + 'pane');\r\n        for (let dv of [left, right, merge]) {\r\n            if (dv) {\r\n                dv.init(this.base.cm);\r\n            }\r\n        }\r\n        if (options.collapseIdentical && panes > 1) {\r\n            this.base.cm.operation(function () {\r\n                collapseIdenticalStretches(self, options.collapseIdentical);\r\n            });\r\n        }\r\n        for (let dv of [left, right, merge]) {\r\n            if (dv) {\r\n                dv.collapsedRanges = this.collapsedRanges;\r\n            }\r\n        }\r\n        this.initialized = true;\r\n        if (this.left || this.right || this.merge) {\r\n            this.alignViews(true);\r\n        }\r\n    }\r\n    alignViews(force) {\r\n        let dealigned = false;\r\n        if (!this.initialized) {\r\n            return;\r\n        }\r\n        for (let dv of this.diffViews) {\r\n            dv.syncModel();\r\n            if (dv.dealigned) {\r\n                dealigned = true;\r\n                dv.dealigned = false;\r\n            }\r\n        }\r\n        if (!dealigned && !force) {\r\n            return; // Nothing to do\r\n        }\r\n        // Find matching lines\r\n        let linesToAlign = findAlignedLines(this.diffViews);\r\n        // Function modifying DOM to perform alignment:\r\n        let self = this;\r\n        let f = function () {\r\n            // Clear old aligners\r\n            let aligners = self.aligners;\r\n            for (let i = 0; i < aligners.length; i++) {\r\n                aligners[i].clear();\r\n            }\r\n            aligners.length = 0;\r\n            // Editors (order is important, so it matches\r\n            // format of linesToAlign)\r\n            let cm = [self.base.cm];\r\n            let scroll = [];\r\n            for (let dv of self.diffViews) {\r\n                cm.push(dv.ownEditor);\r\n            }\r\n            for (let i = 0; i < cm.length; i++) {\r\n                scroll.push(cm[i].getScrollInfo().top);\r\n            }\r\n            for (let ln = 0; ln < linesToAlign.length; ln++) {\r\n                alignLines(cm, linesToAlign[ln], aligners);\r\n            }\r\n            for (let i = 0; i < cm.length; i++) {\r\n                cm[i].scrollTo(null, scroll[i]);\r\n            }\r\n        };\r\n        // All editors should have an operation (simultaneously),\r\n        // so set up nested operation calls.\r\n        if (!this.base.cm.curOp) {\r\n            f = function (fn) {\r\n                return function () { self.base.cm.operation(fn); };\r\n            }(f);\r\n        }\r\n        for (let dv of this.diffViews) {\r\n            if (!dv.ownEditor.curOp) {\r\n                f = function (fn) {\r\n                    return function () { dv.ownEditor.operation(fn); };\r\n                }(f);\r\n            }\r\n        }\r\n        // Perform alignment\r\n        f();\r\n    }\r\n    setShowDifferences(val) {\r\n        if (this.right) {\r\n            this.right.setShowDifferences(val);\r\n        }\r\n        if (this.left) {\r\n            this.left.setShowDifferences(val);\r\n        }\r\n    }\r\n    getMergedValue() {\r\n        if (!this.merge) {\r\n            throw new Error('No merged value; missing \"merged\" view');\r\n        }\r\n        return this.merge.ownEditor.getValue();\r\n    }\r\n}\r\nexports.MergeView = MergeView;\r\nfunction collapseSingle(cm, from, to) {\r\n    cm.addLineClass(from, 'wrap', 'CodeMirror-merge-collapsed-line');\r\n    let widget = document.createElement('span');\r\n    widget.className = 'CodeMirror-merge-collapsed-widget';\r\n    widget.title = 'Identical text collapsed. Click to expand.';\r\n    let mark = cm.getDoc().markText(CodeMirror.Pos(from, 0), CodeMirror.Pos(to - 1), {\r\n        inclusiveLeft: true,\r\n        inclusiveRight: true,\r\n        replacedWith: widget,\r\n        clearOnEnter: true\r\n    });\r\n    function clear() {\r\n        mark.clear();\r\n        cm.removeLineClass(from, 'wrap', 'CodeMirror-merge-collapsed-line');\r\n    }\r\n    CodeMirror.on(widget, 'click', clear);\r\n    return { mark: mark, clear: clear };\r\n}\r\nfunction collapseStretch(size, editors) {\r\n    let marks = [];\r\n    function clear() {\r\n        for (let i = 0; i < marks.length; i++) {\r\n            marks[i].clear();\r\n        }\r\n    }\r\n    for (let i = 0; i < editors.length; i++) {\r\n        let editor = editors[i];\r\n        let mark = collapseSingle(editor.cm, editor.line, editor.line + size);\r\n        marks.push(mark);\r\n        // Undocumented, but merge.js used it, so follow their lead:\r\n        mark.mark.on('clear', clear);\r\n    }\r\n    return marks[0].mark;\r\n}\r\nfunction unclearNearChunks(dv, margin, off, clear) {\r\n    for (let i = 0; i < dv.chunks.length; i++) {\r\n        let chunk = dv.chunks[i];\r\n        for (let l = chunk.baseFrom - margin; l < chunk.baseTo + margin; l++) {\r\n            let pos = l + off;\r\n            if (pos >= 0 && pos < clear.length) {\r\n                clear[pos] = false;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction collapseIdenticalStretches(mv, margin) {\r\n    // FIXME: Use all panes\r\n    if (typeof margin !== 'number') {\r\n        margin = 2;\r\n    }\r\n    let clear = [];\r\n    let edit = mv.base.cm;\r\n    let off = edit.getDoc().firstLine();\r\n    for (let l = off, e = edit.getDoc().lastLine(); l <= e; l++) {\r\n        clear.push(true);\r\n    }\r\n    if (mv.left) {\r\n        unclearNearChunks(mv.left, margin, off, clear);\r\n    }\r\n    if (mv.right) {\r\n        unclearNearChunks(mv.right, margin, off, clear);\r\n    }\r\n    if (mv.merge) {\r\n        unclearNearChunks(mv.merge, margin, off, clear);\r\n    }\r\n    mv.collapsedRanges = [];\r\n    for (let i = 0; i < clear.length; i++) {\r\n        if (clear[i]) {\r\n            let line = i + off;\r\n            let size = 1;\r\n            for (; i < clear.length - 1 && clear[i + 1]; i++, size++) {\r\n                // Just finding size\r\n            }\r\n            if (size > margin) {\r\n                let editors = [{ line: line, cm: edit }];\r\n                if (mv.left) {\r\n                    editors.push({ line: getMatchingEditLine(line, mv.left.chunks),\r\n                        cm: mv.left.ownEditor });\r\n                }\r\n                if (mv.right) {\r\n                    editors.push({ line: getMatchingEditLine(line, mv.right.chunks),\r\n                        cm: mv.right.ownEditor });\r\n                }\r\n                if (mv.merge) {\r\n                    editors.push({ line: getMatchingEditLine(line, mv.merge.chunks),\r\n                        cm: mv.merge.ownEditor });\r\n                }\r\n                let mark = collapseStretch(size, editors);\r\n                mv.collapsedRanges.push({ line, size });\r\n                mark.on('clear', () => {\r\n                    for (let i = 0; i < mv.collapsedRanges.length; ++i) {\r\n                        let range = mv.collapsedRanges[i];\r\n                        if (range.line === line) {\r\n                            mv.collapsedRanges.splice(i, 1);\r\n                            return;\r\n                        }\r\n                    }\r\n                });\r\n                if (mv.options.onCollapse) {\r\n                    mv.options.onCollapse(mv, line, size, mark);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n// General utilities\r\nfunction elt(tag, content, className, style) {\r\n    let e = document.createElement(tag);\r\n    if (className) {\r\n        e.className = className;\r\n    }\r\n    if (style) {\r\n        e.style.cssText = style;\r\n    }\r\n    if (typeof content === 'string') {\r\n        e.appendChild(document.createTextNode(content));\r\n    }\r\n    else if (content) {\r\n        for (let i = 0; i < content.length; ++i) {\r\n            e.appendChild((content)[i]);\r\n        }\r\n    }\r\n    return e;\r\n}\r\nfunction findPrevDiff(chunks, start, isOrig) {\r\n    for (let i = chunks.length - 1; i >= 0; i--) {\r\n        let chunk = chunks[i];\r\n        let to = (isOrig ? chunk.remoteTo : chunk.baseTo) - 1;\r\n        if (to < start) {\r\n            return to;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction findNextDiff(chunks, start, isOrig) {\r\n    for (let i = 0; i < chunks.length; i++) {\r\n        let chunk = chunks[i];\r\n        let from = (isOrig ? chunk.remoteFrom : chunk.baseFrom);\r\n        if (from > start) {\r\n            return from;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nvar DiffDirection;\r\n(function (DiffDirection) {\r\n    DiffDirection[DiffDirection[\"Previous\"] = -1] = \"Previous\";\r\n    DiffDirection[DiffDirection[\"Next\"] = 1] = \"Next\";\r\n})(DiffDirection || (DiffDirection = {}));\r\nfunction goNearbyDiff(cm, dir) {\r\n    let found = null;\r\n    let views = cm.state.diffViews;\r\n    let line = cm.getDoc().getCursor().line;\r\n    if (views) {\r\n        for (let i = 0; i < views.length; i++) {\r\n            let dv = views[i];\r\n            let isOrig = cm === dv.ownEditor;\r\n            let pos = dir === DiffDirection.Previous ?\r\n                findPrevDiff(dv.chunks, line, isOrig) :\r\n                findNextDiff(dv.chunks, line, isOrig);\r\n            if (pos !== null && (found === null ||\r\n                (dir === DiffDirection.Previous ? pos > found : pos < found))) {\r\n                found = pos;\r\n            }\r\n        }\r\n    }\r\n    if (found !== null) {\r\n        cm.getDoc().setCursor(found, 0);\r\n    }\r\n    else {\r\n        return CodeMirror.Pass;\r\n    }\r\n}\r\nCodeMirror.commands.goNextDiff = function (cm) {\r\n    return goNearbyDiff(cm, DiffDirection.Next);\r\n};\r\nCodeMirror.commands.goPrevDiff = function (cm) {\r\n    return goNearbyDiff(cm, DiffDirection.Previous);\r\n};\r\n//# sourceMappingURL=mergeview.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.buildSelect = exports.copyObj = exports.stableSort = exports.intersection = exports.unique = exports.accumulateLengths = exports.repeatString = exports.sortByKey = exports.isPrefixArray = exports.findSharedPrefix = exports.arraysEqual = exports.shallowCopy = exports.deepCopy = exports.splitLines = exports.hasEntries = exports.valueIn = void 0;\r\n/**\r\n * Check whether a value is in an array.\r\n */\r\nfunction valueIn(value, array) {\r\n    return array.indexOf(value) >= 0;\r\n}\r\nexports.valueIn = valueIn;\r\n/**\r\n * Check whether array is null or empty, and type guards agains null\r\n */\r\nfunction hasEntries(array) {\r\n    return array !== null && array.length !== 0;\r\n}\r\nexports.hasEntries = hasEntries;\r\n/**\r\n * Splits a multinline string into an array of lines\r\n *\r\n * @export\r\n * @param {string} multiline\r\n * @returns {string[]}\r\n */\r\nfunction splitLines(multiline) {\r\n    // Split lines (retaining newlines)\r\n    // We use !postfix, as we also match empty string,\r\n    // so we are guaranteed to get at elast one match\r\n    return multiline.match(/^.*(\\r\\n|\\r|\\n|$)/gm);\r\n}\r\nexports.splitLines = splitLines;\r\nfunction deepCopy(obj) {\r\n    if (typeof obj !== 'object') {\r\n        if (valueIn(typeof obj, ['string', 'number', 'boolean'])) {\r\n            return obj;\r\n        }\r\n        throw new TypeError('Cannot deepcopy non-object');\r\n    }\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    else if (Array.isArray(obj)) {\r\n        let l = obj.length;\r\n        let o = new Array(l);\r\n        for (let i = 0; i < l; i++) {\r\n            o[i] = deepCopy(obj[i]);\r\n        }\r\n        return o;\r\n    }\r\n    else {\r\n        let a = obj;\r\n        let r = {};\r\n        if (a.prototype !== undefined) {\r\n            r.prototype = a.prototype;\r\n        }\r\n        for (let k in obj) {\r\n            r[k] = deepCopy(a[k]);\r\n        }\r\n        return r;\r\n    }\r\n}\r\nexports.deepCopy = deepCopy;\r\n/**\r\n * Shallow copy routine for objects\r\n */\r\nfunction shallowCopy(original) {\r\n    // First create an empty object with\r\n    // same prototype of our original source\r\n    let clone = Object.create(Object.getPrototypeOf(original));\r\n    for (let k in original) {\r\n        // Don't copy function\r\n        let ok = original[k];\r\n        if (ok !== null && ok !== undefined &&\r\n            ok.hasOwnProperty('constructor') &&\r\n            ok.constructor === Function) {\r\n            continue;\r\n        }\r\n        let pDesc = Object.getOwnPropertyDescriptor(original, k);\r\n        // Don't copy properties with getter\r\n        if (!pDesc || pDesc.get) {\r\n            continue;\r\n        }\r\n        // copy each property into the clone\r\n        Object.defineProperty(clone, k, pDesc);\r\n    }\r\n    return clone;\r\n}\r\nexports.shallowCopy = shallowCopy;\r\n/**\r\n * Do a shallow, element-wise equality comparison on two arrays.\r\n */\r\nfunction arraysEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    if (a === null || b === null) {\r\n        return false;\r\n    }\r\n    if (a.length !== b.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < a.length; ++i) {\r\n        if (a[i] !== b[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexports.arraysEqual = arraysEqual;\r\n/**\r\n * Find the shared common starting sequence in two arrays\r\n */\r\nfunction findSharedPrefix(a, b) {\r\n    if (a === null || b === null) {\r\n        return null;\r\n    }\r\n    if (a === b) { // Only checking for instance equality\r\n        return a.slice();\r\n    }\r\n    let i = 0;\r\n    for (; i < Math.min(a.length, b.length); ++i) {\r\n        if (a[i] !== b[i]) {\r\n            break;\r\n        }\r\n    }\r\n    return a.slice(0, i);\r\n}\r\nexports.findSharedPrefix = findSharedPrefix;\r\n/**\r\n * Check whether `parent` is contained within the start of `child`\r\n *\r\n * Note on terminology: Parent is here the shortest array, as it will\r\n * be the parent in a tree-view of values, e.g. a path. In other words, parent\r\n * is a subsequence of child.\r\n */\r\nfunction isPrefixArray(parent, child) {\r\n    if (parent === child) {\r\n        return true;\r\n    }\r\n    if (parent === null || parent.length === 0) {\r\n        return true;\r\n    }\r\n    if (child === null || parent.length > child.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < parent.length; ++i) {\r\n        if (parent[i] !== child[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexports.isPrefixArray = isPrefixArray;\r\n/**\r\n * Sort array by attribute `key` (i.e. compare by array[0][key] < array[1][key]). Stable.\r\n */\r\nfunction sortByKey(array, key) {\r\n    return stableSort(array, function (a, b) {\r\n        let x = a[key];\r\n        let y = b[key];\r\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n    });\r\n}\r\nexports.sortByKey = sortByKey;\r\n/**\r\n * Utility function to repeat a string\r\n */\r\nfunction repeatString(str, count) {\r\n    if (count < 1) {\r\n        return '';\r\n    }\r\n    let result = '';\r\n    let pattern = str.valueOf();\r\n    while (count > 1) {\r\n        if (count & 1) {\r\n            result += pattern;\r\n        }\r\n        count >>= 1, pattern += pattern;\r\n    }\r\n    return result + pattern;\r\n}\r\nexports.repeatString = repeatString;\r\n/**\r\n * Calculate the cumulative sum of string lengths for an array of strings\r\n *\r\n * Example:\r\n *   For the arary ['ab', '123', 'y', '\\t\\nfoo'], the output would be\r\n *   [2, 5, 6, 11]\r\n */\r\nfunction accumulateLengths(arr) {\r\n    let ret = [];\r\n    arr.reduce(function (a, b, i) {\r\n        return ret[i] = a + b.length;\r\n    }, 0);\r\n    return ret;\r\n}\r\nexports.accumulateLengths = accumulateLengths;\r\n/**\r\n * Filter for Array.filter to only have unique values\r\n */\r\nfunction unique(value, index, self) {\r\n    return self.indexOf(value) === index;\r\n}\r\nexports.unique = unique;\r\n/**\r\n * Return the intersection of two arrays (with no duplicates)\r\n */\r\nfunction intersection(a, b) {\r\n    let ret = [];\r\n    // Loop over longest, so that indexOf works on shortest\r\n    [a, b] = a.length > b.length ? [a, b] : [b, a];\r\n    for (let ia of a) {\r\n        if (b.indexOf(ia) !== -1) {\r\n            ret.push(ia);\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nexports.intersection = intersection;\r\n/**\r\n * Similar to Array.sort, but guaranteed to keep order stable\r\n * when compare function returns 0\r\n */\r\nfunction stableSort(arr, compare) {\r\n    let sorters = [];\r\n    for (let i = 0; i < arr.length; ++i) {\r\n        sorters.push({ index: i, key: arr[i] });\r\n    }\r\n    sorters = sorters.sort((a, b) => {\r\n        return compare(a.key, b.key) || a.index - b.index;\r\n    });\r\n    let out = new Array(arr.length);\r\n    for (let i = 0; i < arr.length; ++i) {\r\n        out[i] = arr[sorters[i].index];\r\n    }\r\n    return out;\r\n}\r\nexports.stableSort = stableSort;\r\nfunction copyObj(obj, target) {\r\n    if (!target) {\r\n        target = {};\r\n    }\r\n    for (let prop in obj) {\r\n        if (obj.hasOwnProperty(prop)) {\r\n            target[prop] = obj[prop];\r\n        }\r\n    }\r\n    return target;\r\n}\r\nexports.copyObj = copyObj;\r\n/**\r\n * Create or populate a select element with string options\r\n */\r\nfunction buildSelect(options, select) {\r\n    if (select === undefined) {\r\n        select = document.createElement('select');\r\n    }\r\n    for (let option of options) {\r\n        let opt = document.createElement('option');\r\n        opt.text = option;\r\n        select.appendChild(opt);\r\n    }\r\n    return select;\r\n}\r\nexports.buildSelect = buildSelect;\r\n//# sourceMappingURL=util.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validateObjectOp = exports.validateSequenceOp = exports.opPatch = exports.opRemoveRange = exports.opAddRange = exports.opRemove = exports.opAdd = exports.opReplace = void 0;\r\nconst util_1 = require(\"../common/util\");\r\n/** Create a replacement diff entry */\r\nfunction opReplace(key, value) {\r\n    return { op: 'replace', key: key, value: value };\r\n}\r\nexports.opReplace = opReplace;\r\n/** Create an addition diff entry */\r\nfunction opAdd(key, value) {\r\n    return { op: 'add', key: key, value: value };\r\n}\r\nexports.opAdd = opAdd;\r\n/** Create a removal diff entry */\r\nfunction opRemove(key) {\r\n    return { op: 'remove', key: key };\r\n}\r\nexports.opRemove = opRemove;\r\n/** Create a removal diff entry */\r\nfunction opAddRange(key, valuelist) {\r\n    return { op: 'addrange', key: key, valuelist: valuelist };\r\n}\r\nexports.opAddRange = opAddRange;\r\n/** Create a range removal diff entry */\r\nfunction opRemoveRange(key, length) {\r\n    return { op: 'removerange', key: key, length: length };\r\n}\r\nexports.opRemoveRange = opRemoveRange;\r\n/** Create a range removal diff entry */\r\nfunction opPatch(key, diff) {\r\n    return { op: 'patch', key: key, diff: diff };\r\n}\r\nexports.opPatch = opPatch;\r\n/**\r\n * Validate that a diff operation is valid to apply on a given base sequence\r\n */\r\nfunction validateSequenceOp(base, entry) {\r\n    if (typeof entry.key !== 'number') {\r\n        console.info('Invalid patch details', base, entry);\r\n        throw new TypeError(`Invalid patch sequence op: Key is not a number: ${entry.key}`);\r\n    }\r\n    let index = entry.key;\r\n    if (entry.op === 'addrange') {\r\n        if (index < 0 || index > base.length || isNaN(index)) {\r\n            throw new RangeError('Invalid add range diff op: Key out of range: ' + index);\r\n        }\r\n    }\r\n    else if (entry.op === 'removerange') {\r\n        if (index < 0 || index >= base.length || isNaN(index)) {\r\n            throw new RangeError('Invalid remove range diff op: Key out of range: ' + index);\r\n        }\r\n        let skip = entry.length;\r\n        if (index + skip > base.length || isNaN(index)) {\r\n            throw new RangeError('Invalid remove range diff op: Range too long!');\r\n        }\r\n    }\r\n    else if (entry.op === 'patch') {\r\n        if (index < 0 || index >= base.length || isNaN(index)) {\r\n            throw new RangeError('Invalid patch diff op: Key out of range: ' + index);\r\n        }\r\n    }\r\n    else {\r\n        throw new Error('Invalid op: ' + entry.op);\r\n    }\r\n}\r\nexports.validateSequenceOp = validateSequenceOp;\r\n/**\r\n * Validate that a diff operation is valid to apply on a given base object\r\n */\r\nfunction validateObjectOp(base, entry, keys) {\r\n    let op = entry.op;\r\n    if (typeof entry.key !== 'string') {\r\n        console.info('Invalid patch details', base, entry, keys);\r\n        throw new TypeError(`Invalid patch object op: Key is not a string: ${entry.key}`);\r\n    }\r\n    let key = entry.key;\r\n    if (op === 'add') {\r\n        if (util_1.valueIn(key, keys)) {\r\n            throw new Error('Invalid add key diff op: Key already present: ' + key);\r\n        }\r\n    }\r\n    else if (op === 'remove') {\r\n        if (!util_1.valueIn(key, keys)) {\r\n            throw new Error('Invalid remove key diff op: Missing key: ' + key);\r\n        }\r\n    }\r\n    else if (op === 'replace') {\r\n        if (!util_1.valueIn(key, keys)) {\r\n            throw new Error('Invalid replace key diff op: Missing key: ' + key);\r\n        }\r\n    }\r\n    else if (op === 'patch') {\r\n        if (!util_1.valueIn(key, keys)) {\r\n            throw new Error('Invalid patch key diff op: Missing key: ' + key);\r\n        }\r\n    }\r\n    else {\r\n        throw new Error('Invalid op: ' + op);\r\n    }\r\n}\r\nexports.validateObjectOp = validateObjectOp;\r\n//# sourceMappingURL=diffentries.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.createDeletedCellDiffModel = exports.createAddedCellDiffModel = exports.createUnchangedCellDiffModel = exports.createPatchedCellDiffModel = exports.CellDiffModel = void 0;\r\nconst nbformat = require(\"@jupyterlab/nbformat\");\r\nconst exceptions_1 = require(\"../../common/exceptions\");\r\nconst util_1 = require(\"../util\");\r\nconst string_1 = require(\"./string\");\r\nconst output_1 = require(\"./output\");\r\nconst immutable_1 = require(\"./immutable\");\r\n/**\r\n * Diff model for individual Notebook Cells\r\n */\r\nclass CellDiffModel {\r\n    constructor(source, metadata, outputs, executionCount, cellType) {\r\n        this.source = source;\r\n        this.metadata = metadata;\r\n        this.outputs = outputs;\r\n        this.executionCount = executionCount;\r\n        this.cellType = cellType;\r\n        if (outputs === null && cellType === 'code') {\r\n            throw new exceptions_1.NotifyUserError('Invalid code cell, missing outputs!');\r\n        }\r\n        this.metadata.collapsible = true;\r\n        this.metadata.collapsibleHeader = 'Metadata changed';\r\n        this.metadata.startCollapsed = true;\r\n    }\r\n    /**\r\n     * Whether the cell has remained unchanged\r\n     */\r\n    get unchanged() {\r\n        let unchanged = this.source.unchanged;\r\n        unchanged = unchanged &&\r\n            (this.metadata ? this.metadata.unchanged : true);\r\n        if (this.outputs) {\r\n            for (let o of this.outputs) {\r\n                unchanged = unchanged && o.unchanged;\r\n            }\r\n        }\r\n        if (this.executionCount) {\r\n            // TODO: Ignore if option 'ignore minor' set?\r\n            unchanged = unchanged && this.executionCount.unchanged;\r\n        }\r\n        return unchanged;\r\n    }\r\n    /**\r\n     * Whether the cell has been added to the notebook (new cell)\r\n     */\r\n    get added() {\r\n        return this.source.added;\r\n    }\r\n    /**\r\n     * Whether the cell has been deleted/removed from the notebook\r\n     */\r\n    get deleted() {\r\n        return this.source.deleted;\r\n    }\r\n    /**\r\n     * Chunked outputs\r\n     */\r\n    getChunkedOutputs() {\r\n        if (this.outputs === null) {\r\n            return null;\r\n        }\r\n        const chunks = [];\r\n        if (this.added || this.deleted) {\r\n            // Should not chunk outputs for added/deleted cells\r\n            // simply make one element chunks:\r\n            for (let o of this.outputs) {\r\n                chunks.push([o]);\r\n            }\r\n        }\r\n        else {\r\n            let currentChunk = [];\r\n            for (let o of this.outputs) {\r\n                if (o.added || o.deleted) {\r\n                    currentChunk.push(o);\r\n                }\r\n                else {\r\n                    if (currentChunk.length) {\r\n                        chunks.push(currentChunk);\r\n                    }\r\n                    chunks.push([o]);\r\n                    currentChunk = [];\r\n                }\r\n            }\r\n            if (currentChunk.length) {\r\n                chunks.push(currentChunk);\r\n            }\r\n        }\r\n        return chunks;\r\n    }\r\n}\r\nexports.CellDiffModel = CellDiffModel;\r\nfunction createPatchedCellDiffModel(base, diff, nbMimetype) {\r\n    let source = null;\r\n    let metadata = null;\r\n    let outputs = null;\r\n    let executionCount = null;\r\n    let subDiff = util_1.getSubDiffByKey(diff, 'source');\r\n    if (subDiff) {\r\n        source = string_1.createPatchStringDiffModel(base.source, subDiff);\r\n    }\r\n    else {\r\n        source = string_1.createDirectStringDiffModel(base.source, base.source);\r\n    }\r\n    string_1.setMimetypeFromCellType(source, base, nbMimetype);\r\n    subDiff = util_1.getSubDiffByKey(diff, 'metadata');\r\n    metadata = subDiff ?\r\n        string_1.createPatchStringDiffModel(base.metadata, subDiff) :\r\n        string_1.createDirectStringDiffModel(base.metadata, base.metadata);\r\n    if (nbformat.isCode(base)) {\r\n        let outputsBase = base.outputs;\r\n        let outputsDiff = util_1.getSubDiffByKey(diff, 'outputs');\r\n        if (outputsDiff) {\r\n            // Outputs patched\r\n            outputs = output_1.makeOutputModels(outputsBase, null, outputsDiff);\r\n        }\r\n        else {\r\n            // Outputs unchanged\r\n            outputs = output_1.makeOutputModels(outputsBase, outputsBase);\r\n        }\r\n        let execBase = base.execution_count;\r\n        let execDiff = util_1.getDiffEntryByKey(diff, 'execution_count');\r\n        // Pass base as remote, which means fall back to unchanged if no diff:\r\n        executionCount = immutable_1.createImmutableModel(execBase, execBase, execDiff);\r\n    }\r\n    return new CellDiffModel(source, metadata, outputs, executionCount, base.cell_type);\r\n}\r\nexports.createPatchedCellDiffModel = createPatchedCellDiffModel;\r\nfunction createUnchangedCellDiffModel(base, nbMimetype) {\r\n    let source = string_1.createDirectStringDiffModel(base.source, base.source);\r\n    string_1.setMimetypeFromCellType(source, base, nbMimetype);\r\n    let metadata = string_1.createDirectStringDiffModel(base.metadata, base.metadata);\r\n    let outputs = null;\r\n    let executionCount = null;\r\n    if (nbformat.isCode(base)) {\r\n        outputs = output_1.makeOutputModels(base.outputs, base.outputs);\r\n        let execBase = base.execution_count;\r\n        executionCount = immutable_1.createImmutableModel(execBase, execBase);\r\n    }\r\n    else { // markdown or raw cell\r\n    }\r\n    return new CellDiffModel(source, metadata, outputs, executionCount, base.cell_type);\r\n}\r\nexports.createUnchangedCellDiffModel = createUnchangedCellDiffModel;\r\nfunction createAddedCellDiffModel(remote, nbMimetype) {\r\n    let source = string_1.createDirectStringDiffModel(null, remote.source);\r\n    string_1.setMimetypeFromCellType(source, remote, nbMimetype);\r\n    let metadata = string_1.createDirectStringDiffModel(null, remote.metadata);\r\n    let outputs = null;\r\n    let executionCount = null;\r\n    if (nbformat.isCode(remote)) {\r\n        outputs = output_1.makeOutputModels(null, remote.outputs);\r\n        executionCount = immutable_1.createImmutableModel(null, remote.execution_count);\r\n    }\r\n    return new CellDiffModel(source, metadata, outputs, executionCount, remote.cell_type);\r\n}\r\nexports.createAddedCellDiffModel = createAddedCellDiffModel;\r\nfunction createDeletedCellDiffModel(base, nbMimetype) {\r\n    let source = string_1.createDirectStringDiffModel(base.source, null);\r\n    string_1.setMimetypeFromCellType(source, base, nbMimetype);\r\n    let metadata = string_1.createDirectStringDiffModel(base.metadata, null);\r\n    let outputs = null;\r\n    let executionCount = null;\r\n    if (nbformat.isCode(base)) {\r\n        outputs = output_1.makeOutputModels(base.outputs, null);\r\n        let execBase = base.execution_count;\r\n        executionCount = immutable_1.createImmutableModel(execBase, null);\r\n    }\r\n    return new CellDiffModel(source, metadata, outputs, executionCount, base.cell_type);\r\n}\r\nexports.createDeletedCellDiffModel = createDeletedCellDiffModel;\r\n//# sourceMappingURL=cell.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=common.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.createImmutableModel = exports.ImmutableDiffModel = void 0;\r\n/**\r\n * Standard implementation of the IStringDiffModel interface.\r\n */\r\nclass ImmutableDiffModel {\r\n    /**\r\n     * ImmutableDiffModel constructor.\r\n     *\r\n     * `collapsible` and `collapsed` both defaults to false.\r\n     */\r\n    constructor(base, remote, collapsible, header, collapsed) {\r\n        this.base = base;\r\n        this.remote = remote;\r\n        this.collapsible = collapsible === true;\r\n        if (this.collapsible) {\r\n            this.collapsibleHeader = header ? header : '';\r\n            this.startCollapsed = collapsed === true;\r\n        }\r\n    }\r\n    get unchanged() {\r\n        return this.base === this.remote;\r\n    }\r\n    get added() {\r\n        return this.base === undefined;\r\n    }\r\n    get deleted() {\r\n        return this.remote === undefined;\r\n    }\r\n}\r\nexports.ImmutableDiffModel = ImmutableDiffModel;\r\n/**\r\n * Create an ImmutableDiffModel from a base value, a remote value, and a single diff entry.\r\n *\r\n * Note: The requirement of a single diff entry means it will not support\r\n * an add/replace pair on the same key, as this should instead be represented\r\n * by a 'replace' op.\r\n *\r\n * @export\r\n * @param {(ImmutableValue | undefined)} base : The base value\r\n * @param {(IDiffImmutableObjectEntry | null)} diff : The diff entry, or null if unchanged\r\n * @returns {ImmutableDiffModel}\r\n */\r\nfunction createImmutableModel(base, remote, diff) {\r\n    if (!diff) {\r\n        return new ImmutableDiffModel(base, remote);\r\n    }\r\n    else if (diff.op === 'add') {\r\n        if (base !== undefined) {\r\n            throw new Error('Invalid diff op on immutable value');\r\n        }\r\n        return new ImmutableDiffModel(base, diff.value);\r\n    }\r\n    else if (diff.op === 'remove') {\r\n        if (base === undefined) {\r\n            throw new Error('Invalid diff op on immutable value');\r\n        }\r\n        return new ImmutableDiffModel(base, undefined);\r\n    }\r\n    else { // diff.op === 'replace'\r\n        if (base === undefined) {\r\n            throw new Error('Invalid diff op on immutable value');\r\n        }\r\n        return new ImmutableDiffModel(base, diff.value);\r\n    }\r\n}\r\nexports.createImmutableModel = createImmutableModel;\r\n//# sourceMappingURL=immutable.js.map","\"use strict\";\r\n// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__exportStar(require(\"./cell\"), exports);\r\n__exportStar(require(\"./common\"), exports);\r\n__exportStar(require(\"./immutable\"), exports);\r\n__exportStar(require(\"./notebook\"), exports);\r\n__exportStar(require(\"./output\"), exports);\r\n__exportStar(require(\"./renderable\"), exports);\r\n__exportStar(require(\"./string\"), exports);\r\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NotebookDiffModel = void 0;\r\nconst util_1 = require(\"../util\");\r\nconst string_1 = require(\"./string\");\r\nconst cell_1 = require(\"./cell\");\r\n/**\r\n * Diff model for a Jupyter Notebook\r\n */\r\nclass NotebookDiffModel {\r\n    /**\r\n     * Create a new NotebookDiffModel from a base notebook and a list of diffs.\r\n     *\r\n     * The base as well as the diff entries are normally supplied by the nbdime\r\n     * server.\r\n     */\r\n    constructor(base, diff) {\r\n        // Process global notebook metadata field\r\n        let metaDiff = util_1.getSubDiffByKey(diff, 'metadata');\r\n        if (base.metadata && metaDiff) {\r\n            this.metadata = string_1.createPatchStringDiffModel(base.metadata, metaDiff);\r\n        }\r\n        else {\r\n            this.metadata = null;\r\n        }\r\n        if (this.metadata) {\r\n            this.metadata.collapsible = true;\r\n            this.metadata.collapsibleHeader = 'Notebook metadata changed';\r\n            this.metadata.startCollapsed = true;\r\n        }\r\n        // The notebook metadata MIME type is used for determining the MIME type\r\n        // of source cells, so store it easily accessible:\r\n        let mimetype;\r\n        try {\r\n            mimetype = base.metadata.language_info.mimetype;\r\n        }\r\n        catch (e) {\r\n            // missing metadata (probably old notebook)\r\n        }\r\n        this.mimetype = mimetype || 'text/python';\r\n        // Build cell diff models. Follows similar logic to patching code:\r\n        this.cells = [];\r\n        this.chunkedCells = [];\r\n        let take = 0;\r\n        let skip = 0;\r\n        let previousChunkIndex = -1;\r\n        let currentChunk = [];\r\n        for (let e of util_1.getSubDiffByKey(diff, 'cells') || []) {\r\n            let index = e.key;\r\n            // diff is sorted on index, so take any preceding cells as unchanged:\r\n            for (let i = take; i < index; i++) {\r\n                let cell = cell_1.createUnchangedCellDiffModel(base.cells[i], this.mimetype);\r\n                this.cells.push(cell);\r\n                this.chunkedCells.push([cell]);\r\n            }\r\n            if (index !== previousChunkIndex) {\r\n                currentChunk = [];\r\n                this.chunkedCells.push(currentChunk);\r\n                previousChunkIndex = index;\r\n            }\r\n            // Process according to diff type:\r\n            if (e.op === 'addrange') {\r\n                // One or more inserted/added cells:\r\n                for (let ei of e.valuelist) {\r\n                    let cell = cell_1.createAddedCellDiffModel(ei, this.mimetype);\r\n                    this.cells.push(cell);\r\n                    currentChunk.push(cell);\r\n                }\r\n                skip = 0;\r\n            }\r\n            else if (e.op === 'removerange') {\r\n                // One or more removed/deleted cells:\r\n                skip = e.length;\r\n                for (let i = index; i < index + skip; i++) {\r\n                    let cell = cell_1.createDeletedCellDiffModel(base.cells[i], this.mimetype);\r\n                    this.cells.push(cell);\r\n                    currentChunk.push(cell);\r\n                }\r\n            }\r\n            else if (e.op === 'patch') {\r\n                // Ensure patches gets their own chunk, even if they share index:\r\n                if (currentChunk.length > 0) {\r\n                    currentChunk = [];\r\n                    this.chunkedCells.push(currentChunk);\r\n                }\r\n                // A cell has changed:\r\n                let cell = cell_1.createPatchedCellDiffModel(base.cells[index], e.diff, this.mimetype);\r\n                this.cells.push(cell);\r\n                currentChunk.push(cell);\r\n                skip = 1;\r\n            }\r\n            // Skip the specified number of elements, but never decrement take.\r\n            // Note that take can pass index in diffs with repeated +/- on the\r\n            // same index, i.e. [op_remove(index), op_add(index, value)]\r\n            take = Math.max(take, index + skip);\r\n        }\r\n        // Take unchanged values at end\r\n        for (let i = take; i < base.cells.length; i++) {\r\n            let cell = cell_1.createUnchangedCellDiffModel(base.cells[i], this.mimetype);\r\n            this.cells.push(cell);\r\n            this.chunkedCells.push([cell]);\r\n        }\r\n    }\r\n}\r\nexports.NotebookDiffModel = NotebookDiffModel;\r\n//# sourceMappingURL=notebook.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.makeOutputModels = exports.OutputDiffModel = void 0;\r\nconst nbformat = require(\"@jupyterlab/nbformat\");\r\nconst exceptions_1 = require(\"../../common/exceptions\");\r\nconst renderable_1 = require(\"./renderable\");\r\nconst TEXT_MIMETYPES = ['text/plain', 'application/vnd.jupyter.stdout',\r\n    'application/vnd.jupyter.stderr'];\r\n/**\r\n * Diff model for single cell output entries.\r\n *\r\n * Can converted to a StringDiffModel via the method `stringify()`, which also\r\n * takes an optional argument `key` which specifies a subpath of the IOutput to\r\n * make the model from.\r\n */\r\nclass OutputDiffModel extends renderable_1.RenderableDiffModel {\r\n    /**\r\n     * Checks whether the given mimetype is present in the output's mimebundle.\r\n     * If so, it returns the path/key to that mimetype's data. If not present,\r\n     * it returns null.\r\n     *\r\n     * See also: innerMimeType\r\n     */\r\n    hasMimeType(mimetype) {\r\n        let outputs = this.base || this.remote;\r\n        if (nbformat.isStream(outputs) &&\r\n            TEXT_MIMETYPES.indexOf(mimetype) !== -1) {\r\n            return 'text';\r\n        }\r\n        else if (nbformat.isError(outputs)) {\r\n            return 'traceback';\r\n        }\r\n        else if (nbformat.isExecuteResult(outputs) || nbformat.isDisplayData(outputs)) {\r\n            let data = outputs.data;\r\n            if (mimetype in data) {\r\n                return ['data', mimetype];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the expected MIME type of the IOutput subpath specified by `key`,\r\n     * as determined by the notebook format specification.\r\n     *\r\n     * Throws an error for unknown keys.\r\n     *\r\n     * See also: hasMimeType\r\n     */\r\n    innerMimeType(key) {\r\n        let t = (this.base || this.remote).output_type;\r\n        if (t === 'stream' && key === 'text' || t === 'error' && key === 'traceback') {\r\n            // TODO: 'application/vnd.jupyter.console-text'?\r\n            return 'text/plain';\r\n        }\r\n        else if ((t === 'execute_result' || t === 'display_data') &&\r\n            Array.isArray(key)) {\r\n            return key[1];\r\n        }\r\n        throw new exceptions_1.NotifyUserError('Unknown MIME type for key: ' + key);\r\n    }\r\n    /**\r\n     * Can be converted to a StringDiffModel via the method `stringify()`, which also\r\n     * takes an optional argument `key` which specifies a subpath of the IOutput to\r\n     * make the model from.\r\n     */\r\n    stringify(key) {\r\n        let model = super.stringify(key);\r\n        if (key) {\r\n            model.mimetype = this.innerMimeType(key);\r\n        }\r\n        return model;\r\n    }\r\n}\r\nexports.OutputDiffModel = OutputDiffModel;\r\n/**\r\n * Function used to create a list of models for a list diff\r\n *\r\n * - If base and remote are both non-null and equal, it returns\r\n *   a list of models representing unchanged entries.\r\n * - If base and a diff is given, it ignores remote and returns\r\n *   a list of models representing the diff.\r\n * - If base is null, it returns a list of models representing\r\n *   added entries.\r\n * - If remote is null, it returns a list of models representing\r\n *   deleted entries.\r\n */\r\nfunction makeOutputModels(base, remote, diff) {\r\n    let models = [];\r\n    if (remote === null && !diff) {\r\n        if (base === null) {\r\n            throw new Error('Either base or remote need to be specififed!');\r\n        }\r\n        // Cell deleted\r\n        for (let o of base) {\r\n            models.push(new OutputDiffModel(o, null));\r\n        }\r\n    }\r\n    else if (base === null) {\r\n        if (remote === null) {\r\n            throw new Error('Either base or remote need to be specififed!');\r\n        }\r\n        // Cell added\r\n        for (let o of remote) {\r\n            models.push(new OutputDiffModel(null, o));\r\n        }\r\n    }\r\n    else if (remote === base) {\r\n        // All entries unchanged\r\n        for (let o of base) {\r\n            models.push(new OutputDiffModel(o, o));\r\n        }\r\n    }\r\n    else if (diff) {\r\n        // Entries patched, remote will be null\r\n        let consumed = 0;\r\n        let skip = 0;\r\n        for (let d of diff) {\r\n            let index = d.key;\r\n            for (let o of base.slice(consumed, index)) {\r\n                // Add unchanged entries\r\n                models.push(new OutputDiffModel(o, o));\r\n            }\r\n            if (d.op === 'addrange') {\r\n                // Entries added\r\n                for (let o of d.valuelist) {\r\n                    models.push(new OutputDiffModel(null, o));\r\n                }\r\n                skip = 0;\r\n            }\r\n            else if (d.op === 'removerange') {\r\n                // Entries removed\r\n                let len = d.length;\r\n                for (let i = index; i < index + len; i++) {\r\n                    models.push(new OutputDiffModel(base[i], null));\r\n                }\r\n                skip = len;\r\n            }\r\n            else if (d.op === 'patch') {\r\n                // Entry changed\r\n                models.push(new OutputDiffModel(base[index], null, d.diff));\r\n                skip = 1;\r\n            }\r\n            else {\r\n                throw new Error('Invalid diff operation: ' + d);\r\n            }\r\n            consumed = Math.max(consumed, index + skip);\r\n        }\r\n        for (let o of base.slice(consumed)) {\r\n            // Add unchanged entries\r\n            models.push(new OutputDiffModel(o, o));\r\n        }\r\n    }\r\n    else {\r\n        throw new Error('Invalid arguments to makeOutputModels()');\r\n    }\r\n    return models;\r\n}\r\nexports.makeOutputModels = makeOutputModels;\r\n//# sourceMappingURL=output.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RenderableDiffModel = void 0;\r\nconst coreutils_1 = require(\"@lumino/coreutils\");\r\nconst signaling_1 = require(\"@lumino/signaling\");\r\nconst util_1 = require(\"../util\");\r\nconst patch_1 = require(\"../../patch\");\r\nconst string_1 = require(\"./string\");\r\n/**\r\n * Diff model for a renderable object (something that has an internal MimeBundle)\r\n *\r\n * Can be converted to a StringDiffModel via the method `stringify()`, which also\r\n * takes an optional argument `key` which specifies a subpath of the IOutput to\r\n * make the model from.\r\n */\r\nclass RenderableDiffModel {\r\n    constructor(base, remote, diff) {\r\n        this.trustedChanged = new signaling_1.Signal(this);\r\n        if (!remote && !base) {\r\n            throw new Error('Either remote or base value need to be given');\r\n        }\r\n        this.base = base;\r\n        if (!remote && diff) {\r\n            this.remote = patch_1.patch(base, diff);\r\n        }\r\n        else {\r\n            this.remote = remote;\r\n        }\r\n        this.diff = diff || null;\r\n        this.collapsible = false;\r\n    }\r\n    get unchanged() {\r\n        return JSON.stringify(this.base) === JSON.stringify(this.remote);\r\n    }\r\n    get added() {\r\n        return this.base === null;\r\n    }\r\n    get deleted() {\r\n        return this.remote === null;\r\n    }\r\n    /**\r\n     * Convert to a StringDiffModel.\r\n     *\r\n     * Takes an optional argument `key` which specifies a subpath of the MimeBundle to\r\n     * make the model from.\r\n     */\r\n    stringify(key) {\r\n        let getMemberByPath = function (obj, key, f) {\r\n            if (!obj) {\r\n                return obj;\r\n            }\r\n            if (Array.isArray(key)) {\r\n                const tail = key.length > 2 ? key.slice(1) : key[1];\r\n                if (f) {\r\n                    return getMemberByPath(f(obj, key[0]), tail, f);\r\n                }\r\n                return getMemberByPath(obj[key[0]], tail, f);\r\n            }\r\n            else if (f) {\r\n                return f(obj, key);\r\n            }\r\n            return obj[key];\r\n        };\r\n        const baseCopy = coreutils_1.JSONExt.deepCopy(this.base);\r\n        let base = key ? getMemberByPath(baseCopy, key) : baseCopy;\r\n        const remoteCopy = coreutils_1.JSONExt.deepCopy(this.remote);\r\n        let remote = key ? getMemberByPath(remoteCopy, key) : remoteCopy;\r\n        let diff = (this.diff && key) ?\r\n            getMemberByPath(this.diff, key, util_1.getSubDiffByKey) :\r\n            this.diff;\r\n        let model = null;\r\n        if (this.unchanged || this.added || this.deleted || !diff) {\r\n            model = string_1.createDirectStringDiffModel(base, remote);\r\n        }\r\n        else {\r\n            model = string_1.createPatchStringDiffModel(base, diff);\r\n        }\r\n        model.mimetype = key ? this.innerMimeType(key) : 'application/json';\r\n        model.collapsible = this.collapsible;\r\n        model.collapsibleHeader = this.collapsibleHeader;\r\n        model.startCollapsed = this.startCollapsed;\r\n        return model;\r\n    }\r\n    /**\r\n     * Whether outputs are trusted\r\n     */\r\n    get trusted() {\r\n        return this._trusted;\r\n    }\r\n    set trusted(value) {\r\n        if (this._trusted !== value) {\r\n            this._trusted = value;\r\n            this.trustedChanged.emit(value);\r\n        }\r\n    }\r\n    /**\r\n     * The present values of model.base/remote\r\n     */\r\n    get contents() {\r\n        let ret = [];\r\n        if (this.base) {\r\n            ret.push(this.base);\r\n        }\r\n        if (this.remote && this.remote !== this.base) {\r\n            ret.push(this.remote);\r\n        }\r\n        return ret;\r\n    }\r\n}\r\nexports.RenderableDiffModel = RenderableDiffModel;\r\n//# sourceMappingURL=renderable.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.setMimetypeFromCellType = exports.createDirectStringDiffModel = exports.createPatchStringDiffModel = exports.StringDiffModel = void 0;\r\nconst nbformat = require(\"@jupyterlab/nbformat\");\r\nconst coreutils_1 = require(\"@lumino/coreutils\");\r\nconst range_1 = require(\"../range\");\r\nconst chunking_1 = require(\"../../chunking\");\r\nconst patch_1 = require(\"../../patch\");\r\n/**\r\n * Standard implementation of the IStringDiffModel interface.\r\n */\r\nclass StringDiffModel {\r\n    /**\r\n     * StringDiffModel constructor.\r\n     *\r\n     * Will translate additions and deletions from absolute\r\n     * coordinates, into {line, ch} based coordinates.\r\n     * Both should be sorted on the `from` position before passing.\r\n     *\r\n     * Collapsible and collapsed both defaults to false.\r\n     */\r\n    constructor(base, remote, additions, deletions, collapsible, header, collapsed) {\r\n        this.base = base;\r\n        this.remote = remote;\r\n        if (base === null) {\r\n            console.assert(deletions.length === 0);\r\n            this.deletions = [];\r\n        }\r\n        else {\r\n            this.deletions = range_1.raw2Pos(deletions, base);\r\n        }\r\n        if (remote === null) {\r\n            console.assert(additions.length === 0);\r\n            this.additions = [];\r\n        }\r\n        else {\r\n            this.additions = range_1.raw2Pos(additions, remote);\r\n        }\r\n        this.collapsible = collapsible === true;\r\n        if (this.collapsible) {\r\n            this.collapsibleHeader = header ? header : '';\r\n            this.startCollapsed = collapsed === true;\r\n        }\r\n    }\r\n    iterateDiffs() {\r\n        return new StringDiffModel.DiffIter(this);\r\n    }\r\n    /**\r\n     * Chunk additions/deletions into line-based chunks\r\n     */\r\n    getLineChunks() {\r\n        let chunker = new chunking_1.LineChunker();\r\n        let i = this.iterateDiffs();\r\n        for (let v = i.next(); v !== undefined; v = i.next()) {\r\n            chunker.addDiff(v.range, v.isAddition);\r\n        }\r\n        return chunker.chunks;\r\n    }\r\n    get unchanged() {\r\n        return this.base === this.remote;\r\n    }\r\n    get added() {\r\n        return this.base === null;\r\n    }\r\n    get deleted() {\r\n        return this.remote === null;\r\n    }\r\n}\r\nexports.StringDiffModel = StringDiffModel;\r\n(function (StringDiffModel) {\r\n    class DiffIter {\r\n        constructor(model) {\r\n            this.editOffset = 0;\r\n            this.done = false;\r\n            this.ia = 0;\r\n            this.id = 0;\r\n            this.hintTakeDeletion = false;\r\n            this.model = model;\r\n        }\r\n        next() {\r\n            // Figure out which element to take next\r\n            let isAddition = null;\r\n            let range = null;\r\n            let additions = this.model.additions;\r\n            let deletions = this.model.deletions;\r\n            let hintTakeDeletion = this.hintTakeDeletion;\r\n            this.hintTakeDeletion = false;\r\n            if (this.ia < this.model.additions.length) {\r\n                if (this.id < deletions.length) {\r\n                    let ra = additions[this.ia];\r\n                    let rd = deletions[this.id];\r\n                    if (ra.from.line === rd.from.line - this.editOffset &&\r\n                        ra.from.ch === rd.from.ch) {\r\n                        // An addition and deletion start at seemingly same location\r\n                        // Take addition, and flag to ensure deletion gets taken next\r\n                        if (hintTakeDeletion) {\r\n                            isAddition = false;\r\n                        }\r\n                        else {\r\n                            this.hintTakeDeletion = true;\r\n                            isAddition = true;\r\n                        }\r\n                    }\r\n                    else if (ra.from.line < rd.from.line - this.editOffset ||\r\n                        (ra.from.line === rd.from.line - this.editOffset &&\r\n                            ra.from.ch < rd.from.ch)) {\r\n                        // TODO: Character editOffset should also be used\r\n                        isAddition = true;\r\n                    }\r\n                    else {\r\n                        isAddition = false;\r\n                    }\r\n                }\r\n                else {\r\n                    // No more deletions\r\n                    isAddition = true;\r\n                }\r\n            }\r\n            else if (this.id < deletions.length) {\r\n                // No more additions\r\n                isAddition = false;\r\n            }\r\n            else {\r\n                // Out of ranges!\r\n                this.done = true;\r\n                return undefined;\r\n            }\r\n            if (isAddition) {\r\n                range = additions[this.ia++];\r\n            }\r\n            else {\r\n                range = deletions[this.id++];\r\n            }\r\n            let linediff = range.to.line - range.from.line;\r\n            if (range.endsOnNewline) {\r\n                linediff += 1;\r\n            }\r\n            this.editOffset += isAddition ? -linediff : linediff;\r\n            return { range: range, isAddition: isAddition };\r\n        }\r\n    }\r\n    StringDiffModel.DiffIter = DiffIter;\r\n    class SyncedDiffIter {\r\n        constructor(models) {\r\n            this.currentOffset = 0;\r\n            this.models = [];\r\n            this.iterators = [];\r\n            this.values = [];\r\n            this.offsets = [];\r\n            // Set up iterator and dummy chunkers for other models\r\n            for (let m of models) {\r\n                if (m === null) {\r\n                    continue;\r\n                }\r\n                this.models.push(m);\r\n                let it = m.iterateDiffs();\r\n                this.iterators.push(it);\r\n                this.offsets.push(0);\r\n                this.values.push(it.next());\r\n            }\r\n        }\r\n        static cmp(a, b, offsetA, offsetB) {\r\n            if (a === undefined && b === undefined) {\r\n                return 0;\r\n            }\r\n            else if (a === undefined) {\r\n                return 1;\r\n            }\r\n            else if (b === undefined) {\r\n                return -1;\r\n            }\r\n            let lineA = a.range.from.line + (a.isAddition ? offsetA : 0);\r\n            let lineB = b.range.from.line + (b.isAddition ? offsetB : 0);\r\n            if (lineA < lineB || a.range.from.ch < b.range.from.ch) {\r\n                return -1;\r\n            }\r\n            else if (lineA > lineB || a.range.from.ch > b.range.from.ch) {\r\n                return 1;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        }\r\n        next() {\r\n            // Compare in base index to see which diff is next\r\n            let i = 0;\r\n            for (let j = 1; j < this.values.length; ++j) {\r\n                if (0 > SyncedDiffIter.cmp(this.values[j], this.values[i], this.iterators[j].editOffset, this.iterators[i].editOffset)) {\r\n                    i = j;\r\n                }\r\n            }\r\n            this.i = i;\r\n            let ret = this.values[i];\r\n            // Store the edit offset before taking next value\r\n            this.currentOffset = this.offsets[i];\r\n            this.offsets[i] = this.iterators[i].editOffset;\r\n            // Check if complete\r\n            if (ret !== undefined) {\r\n                this.values[i] = this.iterators[i].next();\r\n            }\r\n            return ret;\r\n        }\r\n        currentModel() {\r\n            return this.models[this.i];\r\n        }\r\n    }\r\n    StringDiffModel.SyncedDiffIter = SyncedDiffIter;\r\n})(StringDiffModel = exports.StringDiffModel || (exports.StringDiffModel = {}));\r\n/**\r\n * Creates a StringDiffModel based on a patch operation.\r\n *\r\n * If base is not a string, it is assumed to be a JSON object/array,\r\n * and it will be stringified according to JSON stringification\r\n * rules.\r\n */\r\nfunction createPatchStringDiffModel(base, diff) {\r\n    console.assert(!!diff, 'Patch model needs diff.');\r\n    const baseCopy = coreutils_1.JSONExt.deepCopy(base);\r\n    let baseStr = patch_1.stringifyAndBlankNull(baseCopy);\r\n    let out = patch_1.patchStringified(baseCopy, diff);\r\n    return new StringDiffModel(baseStr, out.remote, out.additions, out.deletions);\r\n}\r\nexports.createPatchStringDiffModel = createPatchStringDiffModel;\r\n/**\r\n * Factory for creating cell diff models for added, removed or unchanged content.\r\n *\r\n * If base is null, it will be treated as added, if remote is null it will be\r\n * treated as removed. Otherwise base and remote should be equal, represeting\r\n * unchanged content.\r\n */\r\nfunction createDirectStringDiffModel(base, remote) {\r\n    let baseStr = patch_1.stringifyAndBlankNull(base);\r\n    let remoteStr = patch_1.stringifyAndBlankNull(remote);\r\n    let additions = [];\r\n    let deletions = [];\r\n    if (base === null && remote === null) {\r\n        throw new Error('Invalid arguments to createDirectStringDiffModel(). ' +\r\n            'Both base and remote cannot be equal!');\r\n    }\r\n    else if (base === null) {\r\n        // Added cell\r\n        baseStr = null;\r\n        additions.push(new range_1.DiffRangeRaw(0, remoteStr.length, undefined));\r\n    }\r\n    else if (remote === null) {\r\n        // Deleted cell\r\n        remoteStr = null;\r\n        deletions.push(new range_1.DiffRangeRaw(0, baseStr.length, undefined));\r\n    }\r\n    else if (remoteStr !== baseStr) {\r\n        throw new Error('Invalid arguments to createDirectStringDiffModel(). ' +\r\n            'Either base or remote should be null, or they should be equal!');\r\n    }\r\n    return new StringDiffModel(baseStr, remoteStr, additions, deletions);\r\n}\r\nexports.createDirectStringDiffModel = createDirectStringDiffModel;\r\n/**\r\n * Assign MIME type to an IStringDiffModel based on the cell type.\r\n *\r\n * The parameter nbMimetype is the MIME type set for the entire notebook, and is\r\n * used as the MIME type for code cells.\r\n */\r\nfunction setMimetypeFromCellType(model, cell, nbMimetype) {\r\n    if (cell.cell_type === 'code') {\r\n        model.mimetype = nbMimetype;\r\n    }\r\n    else if (cell.cell_type === 'markdown') {\r\n        model.mimetype = 'text/markdown';\r\n    }\r\n    else if (nbformat.isRaw(cell)) {\r\n        model.mimetype = cell.metadata.format || 'text/plain';\r\n    }\r\n}\r\nexports.setMimetypeFromCellType = setMimetypeFromCellType;\r\n//# sourceMappingURL=string.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.raw2Pos = exports.DiffRangePos = exports.DiffRangeRaw = void 0;\r\nconst CodeMirror = require(\"codemirror\");\r\nconst util_1 = require(\"../common/util\");\r\n/**\r\n * Represents a range in a diff (typically in a string), in absolute indices (1D)\r\n */\r\nclass DiffRangeRaw {\r\n    /**\r\n     * Create a new range [from, to = from + length)\r\n     */\r\n    constructor(from, length, source) {\r\n        this.from = from;\r\n        this.to = from + length;\r\n        this.source = source;\r\n    }\r\n    /**\r\n     * Change both `from` and `to` fields by the given offset\r\n     */\r\n    offset(offset) {\r\n        this.from += offset;\r\n        this.to += offset;\r\n    }\r\n}\r\nexports.DiffRangeRaw = DiffRangeRaw;\r\n/**\r\n * Class representing a string (diff) range in the format of\r\n * CodeMirror.Positions. Mainly makes sense for string diffs.\r\n *\r\n * The class also has fields to ease chunking of diffs without reparsing the\r\n * text.\r\n */\r\nclass DiffRangePos {\r\n    /**\r\n     * Create a diff range. The `ch` field of the `to` position is defined as\r\n     * non-inclusive, i.e., it follows the syntax of String.slice().\r\n     */\r\n    constructor(from, to, chunkStartLine, endsOnNewline) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.chunkStartLine = chunkStartLine === true;\r\n        this.endsOnNewline = endsOnNewline === true;\r\n    }\r\n}\r\nexports.DiffRangePos = DiffRangePos;\r\n/**\r\n * Utility function to find the line number of a given string index,\r\n * given the positions of all newlines.\r\n */\r\nfunction findLineNumber(nlPos, index) {\r\n    if (nlPos.length === 0) {\r\n        return 0;\r\n    }\r\n    let lineNo = null;\r\n    nlPos.some(function (el, i) {\r\n        if (el >= index) {\r\n            lineNo = i;\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n    if (lineNo === null) {\r\n        return nlPos.length;\r\n    }\r\n    return lineNo;\r\n}\r\n/**\r\n * Function to convert an array of DiffRangeRaw to DiffRangePos. The\r\n * `text` parameter is the text in which the ranges exist.\r\n */\r\nfunction raw2Pos(raws, text) {\r\n    // Find all newline's indices in text\r\n    let adIdx = [];\r\n    let i = -1;\r\n    while (-1 !== (i = text.indexOf('\\n', i + 1))) {\r\n        adIdx.push(i);\r\n    }\r\n    let result = [];\r\n    // Find line numbers from raw index\r\n    for (let r of raws) {\r\n        // First `from` position:\r\n        let line = findLineNumber(adIdx, r.from);\r\n        let lineStartIdx = line > 0 ? adIdx[line - 1] + 1 : 0;\r\n        let from = CodeMirror.Pos(line, r.from - lineStartIdx);\r\n        // Then `to` position:\r\n        line = findLineNumber(adIdx, r.to - 1); // `to` is non-inclusive\r\n        lineStartIdx = line > 0 ? adIdx[line - 1] + 1 : 0;\r\n        let to = CodeMirror.Pos(line, r.to - lineStartIdx);\r\n        // Finally, add some chunking hints:\r\n        let startsOnNewLine = util_1.valueIn(r.from, adIdx);\r\n        let endsOnNewline = util_1.valueIn(r.to - 1, adIdx); // non-inclusive\r\n        let firstLineNew = from.ch === 0 && (from.line !== to.line || endsOnNewline || r.to === text.length);\r\n        let chunkFirstLine = (firstLineNew ||\r\n            !startsOnNewLine ||\r\n            (\r\n            // Neither preceding nor following character is a newline\r\n            !util_1.valueIn(r.from - 1, adIdx) &&\r\n                !util_1.valueIn(r.to, adIdx)));\r\n        let pos = new DiffRangePos(from, to, chunkFirstLine, endsOnNewline);\r\n        pos.source = r.source;\r\n        result.push(pos);\r\n    }\r\n    return result;\r\n}\r\nexports.raw2Pos = raw2Pos;\r\n//# sourceMappingURL=range.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.flattenStringDiff = exports.stripSource = exports.getDiffEntryByKey = exports.getSubDiffByKey = exports.JSON_INDENT = void 0;\r\nconst util_1 = require(\"../common/util\");\r\nconst diffentries_1 = require(\"./diffentries\");\r\n/**\r\n * The indentation to use for JSON stringify.\r\n */\r\nexports.JSON_INDENT = '  ';\r\n/**\r\n * Search the list of diffs for an entry with the given key.\r\n *\r\n * Returns the first found entry, or null if not entry was found.\r\n */\r\nfunction getSubDiffByKey(diff, key) {\r\n    if (!diff) {\r\n        return null;\r\n    }\r\n    for (let i = 0; i < diff.length; ++i) {\r\n        if (diff[i].key === key) {\r\n            return diff[i].diff || null;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexports.getSubDiffByKey = getSubDiffByKey;\r\n/**\r\n * Search the list of diffs for an entry with the given key.\r\n *\r\n * Returns the first found entry, or null if not entry was found.\r\n */\r\nfunction getDiffEntryByKey(diff, key) {\r\n    if (!diff) {\r\n        return null;\r\n    }\r\n    for (let i = 0; i < diff.length; ++i) {\r\n        if (diff[i].key === key) {\r\n            return diff[i];\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexports.getDiffEntryByKey = getDiffEntryByKey;\r\nfunction validateStringDiff(base, entry, lineToChar) {\r\n    // First valdiate line ops:\r\n    diffentries_1.validateSequenceOp(base, entry);\r\n    if (entry.op === 'patch') {\r\n        let line = base[entry.key];\r\n        let diff = entry.diff;\r\n        if (diff !== null) {\r\n            for (let d of diff) {\r\n                diffentries_1.validateSequenceOp(line, d);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Remove the merge source indicator from a diff (returns a copy).\r\n */\r\nfunction stripSource(diff) {\r\n    if (!diff) {\r\n        return null;\r\n    }\r\n    let ret = [];\r\n    for (let e of diff) {\r\n        if (e.op === 'patch') {\r\n            ret.push({\r\n                key: e.key,\r\n                op: e.op,\r\n                diff: stripSource(e.diff)\r\n            });\r\n        }\r\n        else {\r\n            let d = util_1.shallowCopy(e);\r\n            delete d.source;\r\n            ret.push(d);\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nexports.stripSource = stripSource;\r\n/**\r\n * Translates a diff of strings split by str.splitlines() to a diff of the\r\n * joined multiline string\r\n */\r\nfunction flattenStringDiff(val, diff) {\r\n    if (typeof val === 'string') {\r\n        val = util_1.splitLines(val);\r\n    }\r\n    let lineToChar = [0].concat(util_1.accumulateLengths(val));\r\n    let flattened = [];\r\n    for (let e of diff) {\r\n        // Frist validate op:\r\n        validateStringDiff(val, e, lineToChar);\r\n        let lineOffset = lineToChar[e.key];\r\n        if (e.op === 'patch') {\r\n            let pdiff = e.diff;\r\n            if (pdiff !== null) {\r\n                for (let p of pdiff) {\r\n                    let d = util_1.shallowCopy(p);\r\n                    d.key += lineOffset;\r\n                    flattened.push(d);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // Other ops simply have keys which refer to lines\r\n            let d = null;\r\n            if (e.op === 'addrange') {\r\n                d = diffentries_1.opAddRange(lineOffset, e.valuelist.join(''));\r\n            }\r\n            else { // e.op === 'removerange'\r\n                let idx = e.key + e.length;\r\n                d = diffentries_1.opRemoveRange(lineOffset, lineToChar[idx] - lineOffset);\r\n            }\r\n            d.source = e.source;\r\n            flattened.push(d);\r\n        }\r\n    }\r\n    // Finally, sort on key (leaving equal items in original order)\r\n    // This is done since the original diffs are sorted deeper first!\r\n    return util_1.sortByKey(flattened, 'key');\r\n}\r\nexports.flattenStringDiff = flattenStringDiff;\r\n//# sourceMappingURL=util.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CellDiffWidget = exports.OUTPUTS_DIFF_CLASS = exports.CELLDIFF_CLASS = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst rendermime_1 = require(\"@jupyterlab/rendermime\");\r\nconst flexpanel_1 = require(\"../../upstreaming/flexpanel\");\r\nconst collapsiblepanel_1 = require(\"../../common/collapsiblepanel\");\r\nconst mergeview_1 = require(\"../../common/mergeview\");\r\nconst util_1 = require(\"../../common/util\");\r\nconst model_1 = require(\"../model\");\r\nconst common_1 = require(\"./common\");\r\nconst output_1 = require(\"./output\");\r\n/**\r\n * The class name added to the prompt area of cell.\r\n */\r\nconst PROMPT_CLASS = 'jp-InputPrompt';\r\nexports.CELLDIFF_CLASS = 'jp-Cell-diff';\r\nexports.OUTPUTS_DIFF_CLASS = 'jp-Diff-outputsContainer';\r\nconst EXECUTIONCOUNT_ROW_CLASS = 'jp-Cellrow-executionCount';\r\nconst SOURCE_ROW_CLASS = 'jp-Cellrow-source';\r\nconst METADATA_ROW_CLASS = 'jp-Cellrow-metadata';\r\nconst OUTPUTS_ROW_CLASS = 'jp-Cellrow-outputs';\r\n/**\r\n * CellDiffWidget for cell changes\r\n */\r\nclass CellDiffWidget extends widgets_1.Panel {\r\n    /**\r\n     *\r\n     */\r\n    constructor(model, rendermime, mimetype) {\r\n        super();\r\n        this.addClass(exports.CELLDIFF_CLASS);\r\n        this._model = model;\r\n        this._rendermime = rendermime;\r\n        this.mimetype = mimetype;\r\n        this.init();\r\n    }\r\n    init() {\r\n        let model = this.model;\r\n        // Add 'cell added/deleted' notifiers, as appropriate\r\n        let CURR_DIFF_CLASSES = common_1.DIFF_CLASSES.slice(); // copy\r\n        if (model.added) {\r\n            this.addClass(common_1.ADDED_DIFF_CLASS);\r\n            CURR_DIFF_CLASSES = common_1.DIFF_CLASSES.slice(1, 2);\r\n        }\r\n        else if (model.deleted) {\r\n            this.addClass(common_1.DELETED_DIFF_CLASS);\r\n            CURR_DIFF_CLASSES = common_1.DIFF_CLASSES.slice(0, 1);\r\n        }\r\n        else if (model.unchanged) {\r\n            this.addClass(common_1.UNCHANGED_DIFF_CLASS);\r\n        }\r\n        else {\r\n            this.addClass(common_1.TWOWAY_DIFF_CLASS);\r\n        }\r\n        // Add inputs and outputs, on a row-by-row basis\r\n        let sourceView = CellDiffWidget.createView(model.source, model, CURR_DIFF_CLASSES, this._rendermime);\r\n        sourceView.addClass(SOURCE_ROW_CLASS);\r\n        if (model.executionCount) {\r\n            sourceView.insertWidget(0, CellDiffWidget.createPrompts(model.executionCount, model));\r\n        }\r\n        this.addWidget(sourceView);\r\n        if (!model.metadata.unchanged) {\r\n            let metadataView = CellDiffWidget.createView(model.metadata, model, CURR_DIFF_CLASSES, this._rendermime);\r\n            metadataView.addClass(METADATA_ROW_CLASS);\r\n            this.addWidget(metadataView);\r\n        }\r\n        const chunks = model.getChunkedOutputs();\r\n        if (util_1.hasEntries(chunks)) {\r\n            let container = new widgets_1.Panel();\r\n            container.addClass(exports.OUTPUTS_DIFF_CLASS);\r\n            let changed = false;\r\n            for (let chunk of chunks) {\r\n                if (chunk.length === 1) {\r\n                    let o = chunk[0];\r\n                    let outputsWidget = CellDiffWidget.createView(o, model, CURR_DIFF_CLASSES, this._rendermime);\r\n                    container.addWidget(outputsWidget);\r\n                    changed = changed || !o.unchanged || o.added || o.deleted;\r\n                }\r\n                else {\r\n                    // Create add/remove chunk wrappers\r\n                    let chunkPanel = new widgets_1.Panel();\r\n                    chunkPanel.addClass(common_1.CHUNK_PANEL_CLASS);\r\n                    let addedPanel = new widgets_1.Panel();\r\n                    addedPanel.addClass(common_1.ADDED_CHUNK_PANEL_CLASS);\r\n                    let removedPanel = new widgets_1.Panel();\r\n                    removedPanel.addClass(common_1.REMOVED_CHUNK_PANEL_CLASS);\r\n                    for (let o of chunk) {\r\n                        let target = o.deleted ? removedPanel : addedPanel;\r\n                        let outputsWidget = CellDiffWidget.createView(o, model, CURR_DIFF_CLASSES, this._rendermime);\r\n                        target.addWidget(outputsWidget);\r\n                        changed = changed || !o.unchanged || o.added || o.deleted;\r\n                    }\r\n                    chunkPanel.addWidget(addedPanel);\r\n                    chunkPanel.addWidget(removedPanel);\r\n                    container.addWidget(chunkPanel);\r\n                }\r\n            }\r\n            if (model.added || model.deleted) {\r\n                container.addClass(OUTPUTS_ROW_CLASS);\r\n                this.addWidget(container);\r\n            }\r\n            else {\r\n                let collapsed = !changed;\r\n                let header = changed ? 'Outputs changed' : 'Outputs unchanged';\r\n                let collapser = new collapsiblepanel_1.CollapsiblePanel(container, header, collapsed);\r\n                collapser.addClass(OUTPUTS_ROW_CLASS);\r\n                this.addWidget(collapser);\r\n            }\r\n        }\r\n    }\r\n    static createPrompts(model, parent) {\r\n        let prompts = [];\r\n        if (!parent.added) {\r\n            let base = model.base;\r\n            let baseStr = `In [${base || ' '}]:`;\r\n            prompts.push(baseStr);\r\n        }\r\n        if (!parent.unchanged && !parent.deleted) {\r\n            let remote = model.remote;\r\n            let remoteStr = `In [${remote || ' '}]:`;\r\n            prompts.push(remoteStr);\r\n        }\r\n        let container = new flexpanel_1.FlexPanel({ direction: 'left-to-right' });\r\n        for (let text of prompts) {\r\n            let w = new widgets_1.Widget();\r\n            w.node.innerText = text;\r\n            w.addClass(PROMPT_CLASS);\r\n            container.addWidget(w);\r\n            flexpanel_1.FlexPanel.setGrow(w, 1);\r\n        }\r\n        container.addClass(EXECUTIONCOUNT_ROW_CLASS);\r\n        return container;\r\n    }\r\n    /**\r\n     * Create a new sub-view.\r\n     */\r\n    static createView(model, parent, editorClasses, rendermime) {\r\n        let view;\r\n        if (model instanceof model_1.StringDiffModel) {\r\n            let inner = null;\r\n            if (model.unchanged && parent.cellType === 'markdown') {\r\n                let mimeModel = new rendermime_1.MimeModel({ data: { 'text/markdown': model.base } });\r\n                let mimeType = rendermime.preferredMimeType(mimeModel.data, 'ensure');\r\n                if (!mimeType) {\r\n                    throw new Error('No renderer for output');\r\n                }\r\n                let renderer = rendermime.createRenderer(mimeType);\r\n                renderer.renderModel(mimeModel);\r\n                inner = renderer;\r\n            }\r\n            else {\r\n                inner = mergeview_1.createNbdimeMergeView(model);\r\n            }\r\n            if (model.collapsible) {\r\n                view = new collapsiblepanel_1.CollapsiblePanel(inner, model.collapsibleHeader, model.startCollapsed);\r\n            }\r\n            else {\r\n                view = new widgets_1.Panel();\r\n                view.addWidget(inner);\r\n            }\r\n        }\r\n        else if (model instanceof model_1.OutputDiffModel) {\r\n            view = new output_1.OutputPanel(model, parent, editorClasses, rendermime);\r\n            if (model.added) {\r\n                view.addClass(common_1.ADDED_DIFF_CLASS);\r\n            }\r\n            else if (model.deleted) {\r\n                view.addClass(common_1.DELETED_DIFF_CLASS);\r\n            }\r\n            else if (model.unchanged) {\r\n                view.addClass(common_1.UNCHANGED_DIFF_CLASS);\r\n            }\r\n            else {\r\n                view.addClass(common_1.TWOWAY_DIFF_CLASS);\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Unrecognized model type.');\r\n        }\r\n        return view;\r\n    }\r\n    /**\r\n     * Get the model for the widget.\r\n     *\r\n     * #### Notes\r\n     * This is a read-only property.\r\n     */\r\n    get model() {\r\n        return this._model;\r\n    }\r\n}\r\nexports.CellDiffWidget = CellDiffWidget;\r\n//# sourceMappingURL=cell.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ADD_DEL_LABEL_CLASS = exports.REMOVED_CHUNK_PANEL_CLASS = exports.ADDED_CHUNK_PANEL_CLASS = exports.CHUNK_PANEL_CLASS = exports.DIFF_CLASSES = exports.UNCHANGED_DIFF_CLASS = exports.DELETED_DIFF_CLASS = exports.ADDED_DIFF_CLASS = exports.TWOWAY_DIFF_CLASS = void 0;\r\nexports.TWOWAY_DIFF_CLASS = 'jp-Diff-twoway';\r\nexports.ADDED_DIFF_CLASS = 'jp-Diff-added';\r\nexports.DELETED_DIFF_CLASS = 'jp-Diff-deleted';\r\nexports.UNCHANGED_DIFF_CLASS = 'jp-Diff-unchanged';\r\nexports.DIFF_CLASSES = ['jp-Diff-base', 'jp-Diff-remote'];\r\nexports.CHUNK_PANEL_CLASS = 'jp-Diff-addremchunk';\r\nexports.ADDED_CHUNK_PANEL_CLASS = 'jp-Diff-addedchunk';\r\nexports.REMOVED_CHUNK_PANEL_CLASS = 'jp-Diff-removedchunk';\r\nexports.ADD_DEL_LABEL_CLASS = 'jp-Diff-label';\r\n//# sourceMappingURL=common.js.map","\"use strict\";\r\n// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__exportStar(require(\"./cell\"), exports);\r\n__exportStar(require(\"./notebook\"), exports);\r\n__exportStar(require(\"./metadata\"), exports);\r\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MetadataDiffWidget = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst mergeview_1 = require(\"../../common/mergeview\");\r\nconst collapsiblepanel_1 = require(\"../../common/collapsiblepanel\");\r\nconst common_1 = require(\"./common\");\r\nconst ROOT_METADATA_CLASS = 'jp-Metadata-diff';\r\n/**\r\n * MetadataWidget for changes to Notebook-level metadata\r\n */\r\nclass MetadataDiffWidget extends widgets_1.Panel {\r\n    constructor(model) {\r\n        super();\r\n        this._model = model;\r\n        console.assert(!model.added && !model.deleted);\r\n        this.addClass(ROOT_METADATA_CLASS);\r\n        this.init();\r\n    }\r\n    init() {\r\n        let model = this._model;\r\n        if (!model.unchanged) {\r\n            this.addClass(common_1.TWOWAY_DIFF_CLASS);\r\n            let view = mergeview_1.createNbdimeMergeView(model);\r\n            if (model.collapsible) {\r\n                view = new collapsiblepanel_1.CollapsiblePanel(view, model.collapsibleHeader, model.startCollapsed);\r\n            }\r\n            this.addWidget(view);\r\n        }\r\n    }\r\n}\r\nexports.MetadataDiffWidget = MetadataDiffWidget;\r\n//# sourceMappingURL=metadata.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NotebookDiffWidget = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst cell_1 = require(\"./cell\");\r\nconst common_1 = require(\"./common\");\r\nconst metadata_1 = require(\"./metadata\");\r\nconst NBDIFF_CLASS = 'jp-Notebook-diff';\r\n/**\r\n * NotebookDiffWidget\r\n */\r\nclass NotebookDiffWidget extends widgets_1.Panel {\r\n    constructor(model, rendermime) {\r\n        super();\r\n        this._model = model;\r\n        this._rendermime = rendermime;\r\n        this.addClass(NBDIFF_CLASS);\r\n    }\r\n    /**\r\n     * Start adding sub-widgets.\r\n     *\r\n     * Separated from constructor to allow 'live' adding of widgets\r\n     */\r\n    init() {\r\n        let model = this._model;\r\n        let rendermime = this._rendermime;\r\n        let work = Promise.resolve();\r\n        work = work.then(() => {\r\n            if (model.metadata) {\r\n                this.addWidget(new metadata_1.MetadataDiffWidget(model.metadata));\r\n            }\r\n        });\r\n        for (let chunk of model.chunkedCells) {\r\n            work = work.then(() => {\r\n                return new Promise(resolve => {\r\n                    if (chunk.length === 1 && !(chunk[0].added || chunk[0].deleted)) {\r\n                        this.addWidget(new cell_1.CellDiffWidget(chunk[0], rendermime, model.mimetype));\r\n                    }\r\n                    else {\r\n                        let chunkPanel = new widgets_1.Panel();\r\n                        chunkPanel.addClass(common_1.CHUNK_PANEL_CLASS);\r\n                        let addedPanel = new widgets_1.Panel();\r\n                        addedPanel.addClass(common_1.ADDED_CHUNK_PANEL_CLASS);\r\n                        let removedPanel = new widgets_1.Panel();\r\n                        removedPanel.addClass(common_1.REMOVED_CHUNK_PANEL_CLASS);\r\n                        for (let cell of chunk) {\r\n                            let target = cell.deleted ? removedPanel : addedPanel;\r\n                            target.addWidget(new cell_1.CellDiffWidget(cell, rendermime, model.mimetype));\r\n                        }\r\n                        chunkPanel.addWidget(addedPanel);\r\n                        chunkPanel.addWidget(removedPanel);\r\n                        this.addWidget(chunkPanel);\r\n                    }\r\n                    // This limits us to drawing 60 cells per second, which shouldn't\r\n                    // be a problem...\r\n                    requestAnimationFrame(() => {\r\n                        resolve();\r\n                    });\r\n                });\r\n            });\r\n        }\r\n        return work;\r\n    }\r\n    /**\r\n     * Get the model for the widget.\r\n     *\r\n     * #### Notes\r\n     * This is a read-only property.\r\n     */\r\n    get model() {\r\n        return this._model;\r\n    }\r\n}\r\nexports.NotebookDiffWidget = NotebookDiffWidget;\r\n//# sourceMappingURL=notebook.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RenderableOutputView = exports.OutputPanel = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst algorithm_1 = require(\"@lumino/algorithm\");\r\nconst rendermime_1 = require(\"@jupyterlab/rendermime\");\r\nconst collapsiblepanel_1 = require(\"../../common/collapsiblepanel\");\r\nconst mergeview_1 = require(\"../../common/mergeview\");\r\nconst util_1 = require(\"../../common/util\");\r\nconst common_1 = require(\"./common\");\r\nconst renderable_1 = require(\"./renderable\");\r\n/**\r\n * Class for output panel\r\n */\r\nconst OUTPUT_PANEL_CLASS = 'jp-Diff-outputPanel';\r\n/**\r\n * Class for a single rendered output view\r\n */\r\nconst RENDERED_OUTPUT_CLASS = 'jp-Diff-renderedOutput';\r\n/**\r\n * Output is untrusted, and can benefit from being trusted\r\n */\r\nconst UNTRUSTED_CLASS = 'jp-Diff-trustCandidate';\r\n/**\r\n * Menu with actions for outputs\r\n */\r\nconst HOVER_MENU_CLASS = 'jp-Diff-outputMenu';\r\n/**\r\n * Menu button to trust output content\r\n */\r\nconst TRUST_BUTTON_CLASS = 'jp-Diff-trustOutputButton';\r\n/**\r\n * Menu button for showing output as text instead of rendered\r\n */\r\nconst SOURCE_BUTTON_CLASS = 'jp-Diff-showOutputSourceButton';\r\n/**\r\n * Class for outputs which data is base64\r\n */\r\nconst DATA_IS_BASE64_CLASS = 'jp-diff-base64Output';\r\n/**\r\n * Class of dropdown for selecting mimetype to show\r\n */\r\nconst MIMETYPE_SELECT_CLASS = 'jp-Diff-outputMimetypeSelect';\r\n/**\r\n * A list of outputs that are sanitizable.\r\n */\r\nconst sanitizable = ['text/html'];\r\nlet _base64 = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;\r\nfunction isBase64(data, minLength = 64) {\r\n    return data !== null && data.length > minLength && _base64.test(data.replace('\\n', ''));\r\n}\r\n/**\r\n * A panel responsible for rendering an output diff\r\n */\r\nclass OutputPanel extends widgets_1.Panel {\r\n    /**\r\n     *\r\n     */\r\n    constructor(model, parentModel, editorClasses, rendermime) {\r\n        super();\r\n        this._mimetype = null;\r\n        this.forceText = false;\r\n        this.model = model;\r\n        this.rendermime = rendermime;\r\n        this.editorClasses = editorClasses;\r\n        model.trustedChanged.connect((sender, trusted) => {\r\n            this.trustedChanged(trusted);\r\n        });\r\n        if (OutputPanel.isTrustSignificant(model, this.rendermime)) {\r\n            this.addClass(UNTRUSTED_CLASS);\r\n        }\r\n        if (model.added) {\r\n            if (!parentModel.added) {\r\n                // Implies this is added output\r\n                let addSpacer = new widgets_1.Widget();\r\n                addSpacer.node.textContent = 'Output added';\r\n                addSpacer.addClass(common_1.ADD_DEL_LABEL_CLASS);\r\n                this.addWidget(addSpacer);\r\n            }\r\n            this.addClass(common_1.ADDED_DIFF_CLASS);\r\n        }\r\n        else if (model.deleted) {\r\n            if (!parentModel.deleted) {\r\n                // Implies this is deleted output\r\n                let delSpacer = new widgets_1.Widget();\r\n                delSpacer.node.textContent = 'Output deleted';\r\n                delSpacer.addClass(common_1.ADD_DEL_LABEL_CLASS);\r\n                this.addWidget(delSpacer);\r\n            }\r\n            this.addClass(common_1.DELETED_DIFF_CLASS);\r\n        }\r\n        else if (model.unchanged) {\r\n            this.addClass(common_1.UNCHANGED_DIFF_CLASS);\r\n        }\r\n        else {\r\n            this.addClass(common_1.TWOWAY_DIFF_CLASS);\r\n        }\r\n        let view = this.createView();\r\n        this.initContainer(view);\r\n        this.createHoverMenu();\r\n        this.addClass(OUTPUT_PANEL_CLASS);\r\n    }\r\n    /**\r\n     * Add view to panel, possibly wrapped\r\n     */\r\n    initContainer(view) {\r\n        if (this.model.collapsible) {\r\n            this.container = new collapsiblepanel_1.CollapsiblePanel(view, this.model.collapsibleHeader, this.model.startCollapsed);\r\n        }\r\n        else {\r\n            this.container = this;\r\n            this.container.addWidget(view);\r\n        }\r\n        this.view = view;\r\n    }\r\n    /**\r\n     * Replace a view with a new one\r\n     */\r\n    replaceView(view) {\r\n        let old = this.view;\r\n        let i = this.container.widgets.indexOf(old);\r\n        this.container.insertWidget(i, view);\r\n        old.parent = null;\r\n        this.view = view;\r\n    }\r\n    /**\r\n     * Create a text or rendered view of the output diff model\r\n     */\r\n    createView(forceText = false) {\r\n        let view = null;\r\n        let model = this.model;\r\n        let rendermime = this.rendermime;\r\n        // Take one of three actions, depending on output types\r\n        // 1) Renderable types: Side-by-side comparison.\r\n        // 2) Text-type output: Show a MergeView with text diff.\r\n        // 3) Unknown types: Stringified JSON diff.\r\n        let renderable = RenderableOutputView.canRender(model, rendermime);\r\n        if (renderable && !forceText) {\r\n            // 1.\r\n            let rov = new RenderableOutputView(model, this.editorClasses, rendermime, this.selectedMimetype);\r\n            view = rov;\r\n        }\r\n        else {\r\n            // 2. or 3.\r\n            view = this.createOutputTextView();\r\n        }\r\n        return view;\r\n    }\r\n    /**\r\n     * Create text view of output\r\n     */\r\n    createOutputTextView() {\r\n        // Take one of three actions, depending on output types\r\n        // 1) N/A here, see method createView above\r\n        // 2) Known, non-binary MIME: Show a MergeView with text diff.\r\n        // 3) Unknown types: Stringified JSON diff.\r\n        let view;\r\n        let model = this.model;\r\n        // Find highest order MIME-type supported by rendermime\r\n        let key = null;\r\n        if (this.selectedMimetype === null) {\r\n            algorithm_1.find(this.rendermime.mimeTypes, (mt) => {\r\n                key = model.hasMimeType(mt);\r\n                return key !== null;\r\n            });\r\n        }\r\n        else {\r\n            key = model.hasMimeType(this.selectedMimetype);\r\n        }\r\n        if (key) {\r\n            let stringModel = model.stringify(key);\r\n            let aValue = stringModel.base || stringModel.remote;\r\n            if (!isBase64(aValue)) {\r\n                // 2.\r\n                view = mergeview_1.createNbdimeMergeView(stringModel);\r\n            }\r\n        }\r\n        if (!view) {\r\n            // 3.\r\n            view = mergeview_1.createNbdimeMergeView(model.stringify());\r\n        }\r\n        return view;\r\n    }\r\n    /**\r\n     * Creates a menu that is shown when hovering over the output.\r\n     *\r\n     * Stored in this.menu.\r\n     */\r\n    createHoverMenu() {\r\n        this.menu = new widgets_1.Panel();\r\n        this.menu.addClass(HOVER_MENU_CLASS);\r\n        this.container.addWidget(this.menu);\r\n        // Add rendered/source toggle:\r\n        let btnSource = document.createElement('button');\r\n        let sourceText = ['Show source', 'Render'];\r\n        btnSource.innerText = sourceText[0];\r\n        btnSource.onclick = (ev) => {\r\n            this.forceText = !this.forceText;\r\n            btnSource.innerText = sourceText[this.forceText ? 1 : 0];\r\n            this.updateView();\r\n        };\r\n        let w = new widgets_1.Widget({ node: btnSource });\r\n        w.addClass(SOURCE_BUTTON_CLASS);\r\n        this.menu.addWidget(w);\r\n        // Add trust button:\r\n        let btnTrust = document.createElement('button');\r\n        btnTrust.innerText = 'Trust';\r\n        btnTrust.onclick = (ev) => {\r\n            // Triggers change event:\r\n            this.model.trusted = !this.model.trusted;\r\n        };\r\n        w = new widgets_1.Widget({ node: btnTrust });\r\n        w.addClass(TRUST_BUTTON_CLASS);\r\n        this.menu.addWidget(w);\r\n        // Add mimetype select:\r\n        let mimetypes = [];\r\n        for (let output of this.model.contents) {\r\n            let bundle = rendermime_1.OutputModel.getData(output);\r\n            mimetypes = mimetypes.concat(Object.keys(bundle));\r\n        }\r\n        mimetypes = mimetypes.filter(util_1.unique);\r\n        if (mimetypes.length > 1) {\r\n            let cboMimetype = util_1.buildSelect(mimetypes);\r\n            let selectedMimetype = this.selectedMimetype;\r\n            if (selectedMimetype) {\r\n                cboMimetype.selectedIndex = mimetypes.indexOf(selectedMimetype);\r\n            }\r\n            cboMimetype.onchange = (ev) => {\r\n                this.selectedMimetype = mimetypes[cboMimetype.selectedIndex];\r\n            };\r\n            w = new widgets_1.Widget({ node: cboMimetype });\r\n            w.addClass(MIMETYPE_SELECT_CLASS);\r\n            this.menu.addWidget(w);\r\n        }\r\n        else if (mimetypes.length === 1) {\r\n            let mtLabel = document.createElement('span');\r\n            mtLabel.innerText = mimetypes[0];\r\n            w = new widgets_1.Widget({ node: mtLabel });\r\n            // w.addClass(MIMETYPE_SELECT_CLASS);\r\n            this.menu.addWidget(w);\r\n        }\r\n    }\r\n    /**\r\n     * Update trusted status\r\n     */\r\n    trustedChanged(trusted) {\r\n        this.updateView();\r\n        if (trusted) {\r\n            this.removeClass(UNTRUSTED_CLASS);\r\n        }\r\n        else if (OutputPanel.isTrustSignificant(this.model, this.rendermime)) {\r\n            this.addClass(UNTRUSTED_CLASS);\r\n        }\r\n    }\r\n    /**\r\n     * Update view\r\n     */\r\n    updateView() {\r\n        let model = this.model;\r\n        if (this.view instanceof RenderableOutputView) {\r\n            // Previosuly rendered\r\n            if (!this.forceText && RenderableOutputView.canRender(model, this.rendermime)) {\r\n                // Can still render\r\n                this.view.updateView(this.selectedMimetype, model.trusted);\r\n            }\r\n            else {\r\n                // Can no longer render\r\n                let view = this.createView(this.forceText);\r\n                this.replaceView(view);\r\n            }\r\n        }\r\n        else {\r\n            // Previously text output\r\n            // Here, we replace the view irregardles of old vs new type\r\n            let view = this.createView(this.forceText);\r\n            this.replaceView(view);\r\n        }\r\n    }\r\n    get selectedMimetype() {\r\n        if (this._mimetype !== null) {\r\n            return this._mimetype;\r\n        }\r\n        let data = rendermime_1.OutputModel.getData(this.model.base || this.model.remote);\r\n        let mt = this.rendermime.preferredMimeType(data, this.model.trusted ? 'any' : 'ensure');\r\n        return mt === undefined ? null : mt;\r\n    }\r\n    set selectedMimetype(value) {\r\n        if (this._mimetype !== value) {\r\n            this._mimetype = value;\r\n            this.updateView();\r\n        }\r\n    }\r\n    /**\r\n     * Whether trust can affect the output rendering.\r\n     */\r\n    static isTrustSignificant(model, rendermime) {\r\n        if (model.trusted) {\r\n            return false;\r\n        }\r\n        let toTest = [];\r\n        if (model.base) {\r\n            toTest.push(model.base);\r\n        }\r\n        if (model.remote && model.remote !== model.base) {\r\n            toTest.push(model.remote);\r\n        }\r\n        for (let o of toTest) {\r\n            let untrustedModel = new rendermime_1.OutputModel({ value: o, trusted: false });\r\n            let modelMimeTypes = Object.keys(untrustedModel.data);\r\n            let rendererMimeTypes = algorithm_1.toArray(rendermime.mimeTypes);\r\n            let candidates = util_1.intersection(modelMimeTypes, rendererMimeTypes);\r\n            for (let mimeType of candidates) {\r\n                let factory = rendermime.getFactory(mimeType);\r\n                if (factory && (!factory.safe || sanitizable.indexOf(mimeType) !== -1)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexports.OutputPanel = OutputPanel;\r\n/**\r\n * Widget for an output with renderable MIME data.\r\n */\r\nclass RenderableOutputView extends renderable_1.RenderableDiffView {\r\n    constructor(model, editorClass, rendermime, mimetype) {\r\n        super(model, editorClass, rendermime, mimetype);\r\n    }\r\n    /**\r\n     * Create a widget which renders the given cell output\r\n     */\r\n    createSubView(output, trusted) {\r\n        let panel = new RenderedOutputWidget(this.rendermime);\r\n        panel.updateView(output, trusted, this.mimetype);\r\n        return panel;\r\n    }\r\n    /**\r\n     * Update trusted status\r\n     */\r\n    updateView(mimeType, trusted) {\r\n        let i = 0;\r\n        let model = this.model;\r\n        this.mimetype = mimeType;\r\n        algorithm_1.each(this.layout.widgets, (w) => {\r\n            if (w instanceof RenderedOutputWidget) {\r\n                let output = null;\r\n                if (i === 0 && model.base) {\r\n                    // Use base data\r\n                    output = model.base;\r\n                }\r\n                else if (model.remote) {\r\n                    output = model.remote;\r\n                }\r\n                if (output) {\r\n                    w.updateView(output, trusted, mimeType);\r\n                }\r\n                ++i;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Checks if a cell output can be rendered (either safe/trusted or\r\n     * sanitizable)\r\n     */\r\n    static canRender(model, rendermime) {\r\n        let toTest = model.contents;\r\n        for (let o of toTest) {\r\n            let bundle = rendermime_1.OutputModel.getData(o);\r\n            let mimetype = rendermime.preferredMimeType(bundle, model.trusted ? 'any' : 'ensure');\r\n            if (!mimetype) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexports.RenderableOutputView = RenderableOutputView;\r\nclass RenderedOutputWidget extends widgets_1.Panel {\r\n    /**\r\n     *\r\n     */\r\n    constructor(rendermime) {\r\n        super();\r\n        this.rendermime = rendermime;\r\n    }\r\n    updateView(output, trusted, mimetype) {\r\n        let old = this.renderer;\r\n        this.renderer = this.createRenderer(output, trusted, mimetype);\r\n        if (old !== undefined) {\r\n            old.dispose();\r\n        }\r\n        this.addWidget(this.renderer);\r\n    }\r\n    createRenderer(output, trusted, mimetype) {\r\n        let model = new rendermime_1.OutputModel({ value: output, trusted });\r\n        let widget = this.rendermime.createRenderer(mimetype);\r\n        widget.renderModel(model);\r\n        widget.addClass(RENDERED_OUTPUT_CLASS);\r\n        let bundle = rendermime_1.OutputModel.getData(output);\r\n        if (isBase64(bundle[mimetype])) {\r\n            widget.addClass(DATA_IS_BASE64_CLASS);\r\n        }\r\n        return widget;\r\n    }\r\n}\r\n//# sourceMappingURL=output.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RenderableDiffView = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\n/**\r\n * Widget for outputs with renderable MIME data.\r\n */\r\nclass RenderableDiffView extends widgets_1.Widget {\r\n    constructor(model, editorClass, rendermime, mimetype) {\r\n        super();\r\n        this.rendermime = rendermime;\r\n        this.model = model;\r\n        this.mimetype = mimetype;\r\n        let bdata = model.base;\r\n        let rdata = model.remote;\r\n        this.layout = new widgets_1.PanelLayout();\r\n        let ci = 0;\r\n        if (bdata) {\r\n            let widget = this.createSubView(bdata, model.trusted);\r\n            this.layout.addWidget(widget);\r\n            widget.addClass(editorClass[ci++]);\r\n        }\r\n        if (rdata && rdata !== bdata) {\r\n            let widget = this.createSubView(rdata, model.trusted);\r\n            this.layout.addWidget(widget);\r\n            widget.addClass(editorClass[ci++]);\r\n        }\r\n    }\r\n}\r\nexports.RenderableDiffView = RenderableDiffView;\r\n//# sourceMappingURL=renderable.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n// This code is based on the CodeMirror mergeview.js source:\r\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\r\n// Distributed under an MIT license: http://codemirror.net/LICENSE\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.filterDecisions = exports.pushPatchDecision = exports.buildDiffs = exports.applyDecisions = exports.resolveCommonPaths = exports.pushPath = exports.popPath = exports.addSorted = exports.decisionSortKey = exports.decisionPathSortKey = exports.MergeDecision = void 0;\r\nconst diffentries_1 = require(\"../diff/diffentries\");\r\nconst util_1 = require(\"../diff/util\");\r\nconst patch_1 = require(\"../patch\");\r\nconst util_2 = require(\"../common/util\");\r\nfunction validateAction(action) {\r\n    if (util_2.valueIn(action, ['base', 'local', 'remote', 'local_then_remote',\r\n        'remote_then_local', 'custom', 'clear', 'clear_parent', 'either'])) {\r\n        return action;\r\n    }\r\n    throw new Error('Invalid merge decision action: ' + action);\r\n}\r\n/**\r\n * Take the value, or take default if value is undefined\r\n */\r\nfunction valueOrDefault(value, defaultValue) {\r\n    return value === undefined ? defaultValue : value;\r\n}\r\nclass MergeDecision {\r\n    constructor(obj, localDiff = null, remoteDiff = null, action = 'base', conflict = false, customDiff = null, similarInsert = null) {\r\n        this.level = 0;\r\n        if (obj instanceof Array) {\r\n            this._path = obj;\r\n        }\r\n        else if (obj instanceof MergeDecision) {\r\n            this._path = obj.absolutePath.slice();\r\n            localDiff = obj.localDiff;\r\n            remoteDiff = obj.remoteDiff;\r\n            action = obj.action;\r\n            conflict = obj.conflict;\r\n            customDiff = obj.customDiff;\r\n            similarInsert = obj.similarInsert;\r\n            this.level = obj.level;\r\n        }\r\n        else {\r\n            this._path = valueOrDefault(obj.common_path, []);\r\n            localDiff = valueOrDefault(obj.local_diff, localDiff);\r\n            remoteDiff = valueOrDefault(obj.remote_diff, remoteDiff);\r\n            action = validateAction(valueOrDefault(obj.action, action));\r\n            conflict = valueOrDefault(obj.conflict, conflict);\r\n            customDiff = valueOrDefault(obj.custom_diff, customDiff);\r\n            similarInsert = valueOrDefault(obj.similar_insert, similarInsert);\r\n        }\r\n        this.localDiff = localDiff;\r\n        this.remoteDiff = remoteDiff;\r\n        this.action = action;\r\n        this.conflict = conflict;\r\n        this.customDiff = customDiff;\r\n        this.similarInsert = similarInsert;\r\n    }\r\n    setValuesFrom(other) {\r\n        this._path = other.absolutePath.slice();\r\n        this.localDiff = other.localDiff;\r\n        this.remoteDiff = other.remoteDiff;\r\n        this.action = other.action;\r\n        this.conflict = other.conflict;\r\n        this.customDiff = other.customDiff;\r\n        this.similarInsert = other.similarInsert;\r\n        this.level = other.level;\r\n    }\r\n    get localPath() {\r\n        return this._path.slice(this.level);\r\n    }\r\n    get absolutePath() {\r\n        return this._path;\r\n    }\r\n    set absolutePath(value) {\r\n        this._path = value;\r\n    }\r\n    pushPath(key) {\r\n        this._path.push(key);\r\n    }\r\n    get diffs() {\r\n        let diffs = [this.localDiff, this.remoteDiff];\r\n        if (this.customDiff) {\r\n            diffs.push(this.customDiff);\r\n        }\r\n        return diffs;\r\n    }\r\n    set diffs(value) {\r\n        this.localDiff = value[0];\r\n        this.remoteDiff = value[1];\r\n        if (value.length > 2) {\r\n            this.customDiff = value[2];\r\n        }\r\n    }\r\n    serialize() {\r\n        return {\r\n            common_path: this.absolutePath.slice(),\r\n            local_diff: util_1.stripSource(this.localDiff),\r\n            remote_diff: util_1.stripSource(this.remoteDiff),\r\n            action: this.action,\r\n            conflict: this.conflict,\r\n            custom_diff: util_1.stripSource(this.customDiff)\r\n        };\r\n    }\r\n}\r\nexports.MergeDecision = MergeDecision;\r\n/**\r\n * Compare to DecisionPath's for sorting.\r\n *\r\n * The rules are that deeper paths sort before other paths\r\n * with the same prefix, as they correspond to patch ops,\r\n * which will not affect the indexing of following decisions\r\n * on lists.\r\n *\r\n * @param {DecisionPath} a The first decision path\r\n * @param {DecisionPath} b The second decision path\r\n * @returns {number} Returns a negative number if a should\r\n *  sort first, positive number if b should sort first, or\r\n *  zero if the are identical.\r\n */\r\nfunction decisionPathSortKey(a, b) {\r\n    if (a.length === b.length) {\r\n        // Equally deep, sort on keys\r\n        for (let lvl = 0; lvl < a.length; ++lvl) {\r\n            if (a[lvl] === b[lvl]) {\r\n                // Keys are equal, try a deeper level\r\n                continue;\r\n            }\r\n            // Keys differ on this level!\r\n            return a[lvl] < b[lvl] ? -1 : 1;\r\n        }\r\n        // Paths are identical\r\n        return 0;\r\n    }\r\n    else {\r\n        // Sort deeper paths first\r\n        return b.length - a.length;\r\n    }\r\n}\r\nexports.decisionPathSortKey = decisionPathSortKey;\r\n/**\r\n * Compare the paths of two decisions for sorting.\r\n *\r\n * This is a thin wrapper around decisionPathSortKey\r\n *\r\n * @export\r\n * @param {MergeDecision} a The first decision\r\n * @param {MergeDecision} b The second decision\r\n * @returns {number}  Returns a negative number if a should\r\n *  sort first, positive number if b should sort first, or\r\n *  zero if the are identical.\r\n */\r\nfunction decisionSortKey(a, b) {\r\n    return decisionPathSortKey(a.absolutePath, b.absolutePath);\r\n}\r\nexports.decisionSortKey = decisionSortKey;\r\n/**\r\n * Adds a decision to an existing, sorted collection of merge decisions\r\n *\r\n * Ensures that the location of the newly added decision\r\n * will comply with the format specification\r\n *\r\n * @export\r\n * @param {MergeDecision[]} decisions\r\n * @param {MergeDecision} toAdd\r\n * @param {(number | string)} [firstKey]\r\n * @returns {void}\r\n */\r\nfunction addSorted(decisions, toAdd, firstKey) {\r\n    let idx = 0;\r\n    for (; idx < decisions.length; ++idx) {\r\n        let c = decisionPathSortKey(decisions[idx].absolutePath, toAdd.absolutePath);\r\n        if (c > 0) {\r\n            decisions.splice(idx, 0, toAdd);\r\n            return;\r\n        }\r\n        else if (firstKey !== undefined && c === 0) {\r\n            let key = null;\r\n            for (let diff of decisions[idx].diffs) {\r\n                if (!diff) {\r\n                    continue;\r\n                }\r\n                for (let d of diff) {\r\n                    if (!key || d.key < key) {\r\n                        key = d.key;\r\n                    }\r\n                }\r\n            }\r\n            if (firstKey === key) {\r\n                throw new Error('Shouldn\\'t have multiple decisions with diff on same key');\r\n            }\r\n            else if (key === null || firstKey < key) {\r\n                decisions.splice(idx, 0, toAdd);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    decisions.push(toAdd);\r\n}\r\nexports.addSorted = addSorted;\r\nfunction popPath(diffs, popInner) {\r\n    if (diffs.length < 1) {\r\n        return null;\r\n    }\r\n    // Find first non-null, non-empty diff list:\r\n    let i = 0;\r\n    for (let di of diffs) {\r\n        if (di !== null && di.length > 0) {\r\n            break;\r\n        }\r\n        i++;\r\n    }\r\n    // Assert that we have at least one non-null diff:\r\n    if (i === diffs.length) {\r\n        console.log('Empty merge decision (no diffs)!');\r\n        return null;\r\n    }\r\n    // Check if ops and keys are equal for all non-null diffs\r\n    let d = diffs[i];\r\n    let op = d[0].op;\r\n    let key = d[0].key;\r\n    for (let di of diffs) {\r\n        if (di && di.length > 0) {\r\n            // Note that while diff lists can have 2 entries, they should never cause\r\n            // a pop, as they will have a difference in op.\r\n            for (let dj of di) {\r\n                if (dj.op !== op || dj.key !== key) {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Inspect patch op further along:\r\n    if (op === 'patch') {\r\n        // Only pop if sub-diff has length 1 (unless popInner is true)\r\n        if (popInner !== true) {\r\n            for (let di of diffs) {\r\n                if (di && di.length > 0 && (di.length !== 1 ||\r\n                    !di[0].diff ||\r\n                    di[0].diff.length !== 1)) {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        let retDiffs = [];\r\n        for (let di of diffs) {\r\n            if (di && di.length > 0) {\r\n                retDiffs.push(di[0].diff);\r\n            }\r\n            else {\r\n                retDiffs.push(null);\r\n            }\r\n        }\r\n        return { diffs: retDiffs, key: key };\r\n    }\r\n    return null;\r\n}\r\nexports.popPath = popPath;\r\nfunction pushPath(diffs, prefix) {\r\n    for (let key of prefix.reverse()) {\r\n        diffs = [diffentries_1.opPatch(key, diffs)];\r\n    }\r\n    return diffs;\r\n}\r\nexports.pushPath = pushPath;\r\n/**\r\n * Expand the `common_path` field of the merge decisions for optimized\r\n * processing. Modifies the merge decisions in-place.\r\n */\r\nfunction resolveCommonPaths(decisions) {\r\n    for (let md of decisions) {\r\n        let diffs = md.diffs;\r\n        let path = md.absolutePath || [];\r\n        let popped = popPath(diffs, true);\r\n        while (popped) {\r\n            path.push(popped.key);\r\n            diffs = popped.diffs;\r\n            popped = popPath(diffs, true);\r\n        }\r\n        md.absolutePath = path;\r\n        md.diffs = diffs;\r\n    }\r\n}\r\nexports.resolveCommonPaths = resolveCommonPaths;\r\n/**\r\n * Make a new 'cleared' value of the right type.\r\n */\r\nfunction makeClearedValue(value) {\r\n    if (value instanceof Array) {\r\n        // Clearing e.g. an outputs list means setting it to an empty array\r\n        return [];\r\n    }\r\n    else if (typeof (value) === 'string') {\r\n        // Clearing e.g. a source string means setting it to an empty string\r\n        return '';\r\n    }\r\n    else if (value === null || util_2.valueIn(typeof (value), ['number', 'boolean'])) {\r\n        // Clearing anything else (atomic values) means setting it to null\r\n        return null;\r\n    }\r\n    else {\r\n        // Clearing e.g. a metadata dict means setting it to an empty Object\r\n        return {};\r\n    }\r\n}\r\nfunction _resolvePathInObject(obj, path) {\r\n    for (let key of path) {\r\n        obj = obj[key]; // Should throw if key missing\r\n    }\r\n    return obj;\r\n}\r\nfunction _combineDiffs(a, b) {\r\n    if (a && b) {\r\n        return a.concat(b);\r\n    }\r\n    else if (a) {\r\n        return a.slice();\r\n    }\r\n    else if (b) {\r\n        return b.slice();\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction resolveAction(base, decision) {\r\n    let a = decision.action;\r\n    if (a === 'base') {\r\n        return []; // no-op\r\n    }\r\n    else if (a === 'local' || a === 'either') {\r\n        return decision.localDiff ? decision.localDiff.slice() : [];\r\n    }\r\n    else if (a === 'remote') {\r\n        return decision.remoteDiff ? decision.remoteDiff.slice() : [];\r\n    }\r\n    else if (a === 'custom') {\r\n        return decision.customDiff ? decision.customDiff.slice() : [];\r\n    }\r\n    else if (a === 'local_then_remote') {\r\n        return _combineDiffs(decision.localDiff, decision.remoteDiff);\r\n    }\r\n    else if (a === 'remote_then_local') {\r\n        return _combineDiffs(decision.remoteDiff, decision.localDiff);\r\n    }\r\n    else if (a === 'clear') {\r\n        let key = null;\r\n        if (typeof base !== 'object') {\r\n            throw new TypeError('Can only use `\\'clear\\'` action on objects/dicts');\r\n        }\r\n        for (let d of _combineDiffs(decision.localDiff, decision.remoteDiff)) {\r\n            if (key) {\r\n                if (key !== d.key) {\r\n                    throw new Error('Cannot combine diffs with different keys');\r\n                }\r\n            }\r\n            else {\r\n                key = d.key;\r\n            }\r\n        }\r\n        if (key) {\r\n            let d = diffentries_1.opReplace(key, makeClearedValue(base[key]));\r\n            d.source = { decision, action: 'custom' };\r\n            return [d];\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    }\r\n    else if (a === 'clear_parent') {\r\n        if (Array.isArray(base)) {\r\n            let d = diffentries_1.opRemoveRange(0, base.length);\r\n            d.source = { decision, action: 'custom' };\r\n            return [d];\r\n        }\r\n        else if (typeof (base) === 'string') {\r\n            let len = util_2.splitLines(base).length;\r\n            let d = diffentries_1.opRemoveRange(0, len);\r\n            d.source = { decision, action: 'custom' };\r\n            return [d];\r\n        }\r\n        else {\r\n            // Ideally we would do a opReplace on the parent, but this is not\r\n            // easily combined with this method, so simply remove all keys\r\n            let diff = [];\r\n            for (let key of base) {\r\n                let d = diffentries_1.opRemove(key);\r\n                d.source = { decision, action: 'custom' };\r\n                diff.push(d);\r\n            }\r\n            return diff;\r\n        }\r\n    }\r\n    else {\r\n        throw new Error('The action \\\"' + a + '\\\" is not defined');\r\n    }\r\n}\r\n/**\r\n * Prevent paths from pointing to specific string lines.\r\n *\r\n * Check if path points to a specific line in a string, if so, split off index.\r\n *\r\n * Returns a tuple of path and any line key.\r\n */\r\nfunction splitDiffStringPath(base, path) {\r\n    for (let i = 0; i < path.length; ++i) {\r\n        if (typeof base === 'string') {\r\n            return [path.slice(0, i), path.slice(i)];\r\n        }\r\n        base = base[path[i]];\r\n    }\r\n    return [path, null];\r\n}\r\nfunction applyDecisions(base, decisions) {\r\n    let merged = util_2.deepCopy(base);\r\n    let prevPath = null;\r\n    let parent = null;\r\n    let lastKey = null;\r\n    let resolved = null;\r\n    let diffs = [];\r\n    // clear_parent actions should override other decisions on same obj, so\r\n    // we need to track it\r\n    let clearParent = false;\r\n    for (let md of decisions) {\r\n        let spl = splitDiffStringPath(merged, md.localPath);\r\n        let path = spl[0];\r\n        let line = spl[1];\r\n        // We patch all decisions with the same path in one op\r\n        if (util_2.arraysEqual(path, prevPath)) {\r\n            if (clearParent) {\r\n                // Another entry will clear the parent, so all other decisions\r\n                // should be dropped\r\n            }\r\n            else {\r\n                if (md.action === 'clear_parent') {\r\n                    clearParent = true;\r\n                    diffs = []; // Clear any exisiting decsions!\r\n                }\r\n                let ad = resolveAction(resolved, md);\r\n                if (line) {\r\n                    ad = pushPath(ad, line);\r\n                }\r\n                diffs = diffs.concat(ad);\r\n            }\r\n        }\r\n        else {\r\n            // Different path, start a new collection\r\n            if (prevPath !== null) {\r\n                // First, apply previous diffs\r\n                if (parent === null) {\r\n                    // Operations on root create new merged object\r\n                    merged = patch_1.patch(resolved, diffs);\r\n                }\r\n                else {\r\n                    // If not, overwrite entry in parent (which is an entry in merged).\r\n                    // This is ok, as no paths should point to subobjects of the patched\r\n                    // object.\r\n                    parent[lastKey] = patch_1.patch(resolved, diffs);\r\n                }\r\n            }\r\n            prevPath = path.slice();\r\n            // Resolve path in base and output\r\n            resolved = merged;\r\n            parent = null;\r\n            lastKey = null;\r\n            for (let key of path) {\r\n                parent = resolved;\r\n                resolved = resolved[key]; // Should throw if key missing\r\n                lastKey = key;\r\n            }\r\n            diffs = resolveAction(resolved, md);\r\n            if (line) {\r\n                diffs = pushPath(diffs, line);\r\n            }\r\n            clearParent = md.action === 'clear_parent';\r\n        }\r\n    }\r\n    // Apply the last collection of diffs, if present (same as above)\r\n    if (prevPath !== null) {\r\n        if (parent === null) {\r\n            merged = patch_1.patch(resolved, diffs);\r\n        }\r\n        else {\r\n            parent[lastKey] = patch_1.patch(resolved, diffs);\r\n        }\r\n    }\r\n    return merged;\r\n}\r\nexports.applyDecisions = applyDecisions;\r\n/**\r\n * Merge a tree of diffs at varying path levels to one diff at their shared root\r\n *\r\n * Relies on the format specification about decision ordering to help\r\n * simplify the process (deeper paths should come before its parent paths).\r\n * This is realized by the `sortedPaths` argument.\r\n */\r\nfunction _mergeTree(tree, sortedPaths) {\r\n    let trunk = [];\r\n    let root = null;\r\n    for (let i = 0; i < sortedPaths.length; ++i) {\r\n        let path = tree[sortedPaths[i]].path;\r\n        let subdiffs = tree[sortedPaths[i]].diff;\r\n        trunk = trunk.concat(subdiffs);\r\n        let nextPath;\r\n        if (i === sortedPaths.length - 1) {\r\n            nextPath = root;\r\n        }\r\n        else {\r\n            nextPath = tree[sortedPaths[i + 1]].path;\r\n        }\r\n        // First, check if path is subpath of nextPath:\r\n        if (util_2.isPrefixArray(nextPath, path)) {\r\n            // We can simply promote existing diffs to next path\r\n            if (nextPath !== null) {\r\n                trunk = pushPath(trunk, path.slice(nextPath.length));\r\n                root = nextPath;\r\n            }\r\n        }\r\n        else {\r\n            // We have started on a new trunk\r\n            // Collect branches on the new trunk, and merge the trunks\r\n            let newTrunk = _mergeTree(tree, sortedPaths.slice(i + 1));\r\n            nextPath = tree[sortedPaths[sortedPaths.length - 1]].path;\r\n            let prefix = util_2.findSharedPrefix(path, nextPath);\r\n            let pl = prefix ? prefix.length : 0;\r\n            trunk = pushPath(trunk, path.slice(pl)).concat(pushPath(newTrunk, nextPath.slice(pl)));\r\n            break; // Recursion will exhaust sortedPaths\r\n        }\r\n    }\r\n    return trunk;\r\n}\r\n/**\r\n * Builds a diff for direct application on base. The `which` argument either\r\n * selects the 'local', 'remote' or 'merged' diffs.\r\n */\r\nfunction buildDiffs(base, decisions, which) {\r\n    let tree = {};\r\n    let sortedPaths = [];\r\n    let local = which === 'local';\r\n    let merged = which === 'merged';\r\n    if (!local && !merged) {\r\n        console.assert(which === 'remote');\r\n    }\r\n    for (let md of decisions) {\r\n        let subdiffs = null;\r\n        let spl = splitDiffStringPath(base, md.localPath);\r\n        let path = spl[0];\r\n        let line = spl[1];\r\n        if (merged) {\r\n            let sub = _resolvePathInObject(base, path);\r\n            subdiffs = resolveAction(sub, md);\r\n        }\r\n        else {\r\n            subdiffs = local ? md.localDiff : md.remoteDiff;\r\n            if (subdiffs === null) {\r\n                continue;\r\n            }\r\n        }\r\n        let strPath = '/' + path.join('/');\r\n        if (tree.hasOwnProperty(strPath)) {\r\n            // Existing tree entry, simply add diffs to it\r\n            if (line) {\r\n                let matchDiff = util_1.getSubDiffByKey(tree[strPath].diff, line[0]);\r\n                if (matchDiff) {\r\n                    matchDiff.push.apply(matchDiff, subdiffs);\r\n                }\r\n                else {\r\n                    subdiffs = pushPath(subdiffs, line);\r\n                    tree[strPath].diff.push(subdiffs[0]);\r\n                }\r\n            }\r\n            else {\r\n                tree[strPath].diff = tree[strPath].diff.concat(subdiffs);\r\n            }\r\n        }\r\n        else {\r\n            // Make new entry in tree\r\n            if (line) {\r\n                subdiffs = pushPath(subdiffs, line);\r\n            }\r\n            tree[strPath] = { diff: subdiffs, path: path };\r\n            sortedPaths.push(strPath);\r\n        }\r\n    }\r\n    if (Object.keys(tree).length === 0) {\r\n        return null;\r\n    }\r\n    if (!tree.hasOwnProperty('/')) {\r\n        tree['/'] = { diff: [], path: [] };\r\n        sortedPaths.push('/');\r\n    }\r\n    // Tree is constructed, now join all branches at diverging points (joints)\r\n    return _mergeTree(tree, sortedPaths);\r\n}\r\nexports.buildDiffs = buildDiffs;\r\n/**\r\n * Move a path prefix in a merge decision from `common_path` to the diffs.\r\n *\r\n * This is done by wrapping the diffs in nested patch ops.\r\n */\r\nfunction pushPatchDecision(decision, prefix) {\r\n    let dec = new MergeDecision(decision);\r\n    // We need to start with inner most key to nest correctly, so reverse:\r\n    for (let key of prefix.slice().reverse()) {\r\n        if (dec.absolutePath.length === 0) {\r\n            throw new Error('Cannot remove key from empty decision path: ' + key + ', ' + dec);\r\n        }\r\n        let popped = dec.absolutePath.pop();\r\n        if (popped !== key) { // Pop and assert\r\n            throw Error('Cannot push a patch that doesn\\'t correspond to ' +\r\n                'a key in the decision path! Key: ' + key +\r\n                '; Remaining path: ' + dec.absolutePath.concat([popped]));\r\n        }\r\n        let ld = dec.localDiff && dec.localDiff.length > 0;\r\n        let rd = dec.remoteDiff && dec.remoteDiff.length > 0;\r\n        let cd = dec.customDiff && dec.customDiff.length > 0;\r\n        dec.localDiff = ld ? [diffentries_1.opPatch(key, dec.localDiff)] : null;\r\n        dec.remoteDiff = rd ? [diffentries_1.opPatch(key, dec.remoteDiff)] : null;\r\n        dec.customDiff = cd ? [diffentries_1.opPatch(key, dec.customDiff)] : null;\r\n    }\r\n    return dec;\r\n}\r\nexports.pushPatchDecision = pushPatchDecision;\r\n/**\r\n * Filter decisions based on matching (segment of) path\r\n *\r\n * Checks whether each decision's path start with `path`. If `skipLevels` is\r\n * given, the first levels of the decision's path is ignored for the comparison.\r\n *\r\n * Once matched, the matching decisions' levels are adjusted such that they\r\n * point to after the matching segment.\r\n *\r\n * Example:\r\n * Given a list of decisions with paths:\r\n *   /cells/0/outputs/0\r\n *   /cells/0/outputs/1\r\n *   /cells/2/outputs/1\r\n *   /cells/12/outputs/0/data\r\n *\r\n * If called with path `['cells']`:\r\n *   All decisions will be returned, with level set to 1\r\n * If called with path `['cells', 0]`:\r\n *   The first two will be returned, with level set to 2\r\n * If called with path `['outputs']`, and skipLevel = 2:\r\n *   All decisions will be returned, with level set to 3\r\n * If called with path `['outputs', 0]`, and skipLevel = 2:\r\n *   Decision 1 and 4 will be returned, with level set to 4\r\n *\r\n * Note that since the same decision instances are returned, this will modify\r\n * the level of the passed decisions.\r\n */\r\nfunction filterDecisions(decisions, path, skipLevels, maxLength) {\r\n    let ret = [];\r\n    skipLevels = skipLevels || 0;\r\n    for (let md of decisions) {\r\n        if (maxLength !== undefined && md.absolutePath.length > maxLength) {\r\n            continue;\r\n        }\r\n        if (util_2.isPrefixArray(path, md.absolutePath.slice(skipLevels))) {\r\n            md.level = skipLevels + path.length;\r\n            ret.push(md);\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nexports.filterDecisions = filterDecisions;\r\n//# sourceMappingURL=decisions.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CellMergeModel = void 0;\r\nconst nbformat = require(\"@jupyterlab/nbformat\");\r\nconst signaling_1 = require(\"@lumino/signaling\");\r\nconst util_1 = require(\"../../diff/util\");\r\nconst model_1 = require(\"../../diff/model\");\r\nconst decisions_1 = require(\"../../merge/decisions\");\r\nconst patch_1 = require(\"../../patch\");\r\nconst util_2 = require(\"../../common/util\");\r\nconst chunking_1 = require(\"../../chunking\");\r\nconst common_1 = require(\"./common\");\r\nconst exceptions_1 = require(\"../../common/exceptions\");\r\n/**\r\n * Create a cell diff model based on a set of merge\r\n * decisions that patch the cell.\r\n */\r\nfunction createPatchedCellDecisionDiffModel(base, decisions, local, remote, mimetype) {\r\n    for (let md of decisions) {\r\n        if (md.localPath.length === 0) {\r\n            let val = decisions_1.popPath(md.diffs, true);\r\n            if (val !== null) {\r\n                md.diffs = val.diffs;\r\n                md.pushPath(val.key);\r\n            }\r\n        }\r\n    }\r\n    let source = new common_1.DecisionStringDiffModel(base.source, decisions_1.filterDecisions(decisions, ['source'], 2), [local ? local.source : null,\r\n        remote ? remote.source : null]);\r\n    model_1.setMimetypeFromCellType(source, base, mimetype);\r\n    let metadata = new common_1.DecisionStringDiffModel(base.metadata, decisions_1.filterDecisions(decisions, ['metadata'], 2), [local ? local.metadata : null,\r\n        remote ? remote.metadata : null]);\r\n    let outputs = null;\r\n    let executionCount = null;\r\n    if (nbformat.isCode(base)) {\r\n        if (base.outputs) {\r\n            let outputBase = base.outputs;\r\n            let outputDec = decisions_1.filterDecisions(decisions, ['outputs'], 2);\r\n            let mergedDiff = decisions_1.buildDiffs(outputBase, outputDec, 'merged');\r\n            let merged;\r\n            if (mergedDiff && mergedDiff.length > 0) {\r\n                merged = patch_1.patch(outputBase, mergedDiff);\r\n            }\r\n            else {\r\n                merged = outputBase;\r\n            }\r\n            outputs = model_1.makeOutputModels(outputBase, merged, mergedDiff);\r\n        }\r\n        let execBase = base.execution_count;\r\n        let cellDecs = decisions_1.filterDecisions(decisions, ['cells'], 0, 2);\r\n        for (let dec of cellDecs) {\r\n            if (util_1.getDiffEntryByKey(dec.localDiff, 'execution_count') !== null ||\r\n                util_1.getDiffEntryByKey(dec.remoteDiff, 'execution_count') !== null ||\r\n                util_1.getDiffEntryByKey(dec.customDiff, 'execution_count') !== null) {\r\n                dec.level = 2;\r\n                let mergeExecDiff = decisions_1.buildDiffs(base, [dec], 'merged');\r\n                let execDiff = util_2.hasEntries(mergeExecDiff) ? mergeExecDiff[0] : null;\r\n                // Pass base as remote, which means fall back to unchanged if no diff:\r\n                executionCount = model_1.createImmutableModel(execBase, execBase, execDiff);\r\n            }\r\n        }\r\n    }\r\n    return new model_1.CellDiffModel(source, metadata, outputs, executionCount, base.cell_type);\r\n}\r\n/**\r\n * CellMergeModel\r\n */\r\nclass CellMergeModel extends common_1.ObjectMergeModel {\r\n    constructor(base, decisions, mimetype) {\r\n        // TODO: Remove/extend whitelist once we support more\r\n        super(base, [], mimetype, ['source', 'metadata', 'outputs', 'execution_count']);\r\n        this.deleteCellChanged = new signaling_1.Signal(this);\r\n        this._clearOutputs = false;\r\n        this.clearOutputsChanged = new signaling_1.Signal(this);\r\n        this.onesided = false;\r\n        this._deleteCell = false;\r\n        this.processDecisions(decisions);\r\n    }\r\n    /**\r\n     * Run time flag whether the user wants to delete the cell\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    get deleteCell() {\r\n        return this._deleteCell;\r\n    }\r\n    set deleteCell(value) {\r\n        if (this._deleteCell !== value) {\r\n            this._deleteCell = value;\r\n            this.deleteCellChanged.emit(value);\r\n        }\r\n    }\r\n    /**\r\n     * Run time flag whether the user wants to clear the outputs of the cell\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    get clearOutputs() {\r\n        return this._clearOutputs;\r\n    }\r\n    set clearOutputs(value) {\r\n        if (this._clearOutputs !== value) {\r\n            this._clearOutputs = value;\r\n            this.clearOutputsChanged.emit(value);\r\n        }\r\n    }\r\n    /**\r\n     * Whether source is the same in local and remote\r\n     */\r\n    get agreedSource() {\r\n        return !!this.local && !!this.remote &&\r\n            this.local.source.remote === this.remote.source.remote;\r\n    }\r\n    /**\r\n     * Whether metadata is the same in local and remote\r\n     */\r\n    get agreedMetadata() {\r\n        if (!this.local || !this.remote) {\r\n            return false;\r\n        }\r\n        return this.local.metadata.remote === this.remote.metadata.remote;\r\n    }\r\n    /**\r\n     * Whether outputs are the same in local and remote\r\n     */\r\n    get agreedOutputs() {\r\n        if (!this.local || !this.remote) {\r\n            return false;\r\n        }\r\n        let lo = this.local.outputs;\r\n        let ro = this.remote.outputs;\r\n        if (!util_2.hasEntries(lo) || !util_2.hasEntries(ro)) {\r\n            return !util_2.hasEntries(lo) && !util_2.hasEntries(ro);\r\n        }\r\n        if (lo.length !== ro.length) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < lo.length; ++i) {\r\n            if (JSON.stringify(lo[i].remote) !== JSON.stringify(ro[i].remote)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Whether cell is the same in local and remote\r\n     */\r\n    get agreedCell() {\r\n        // TODO: Also check other fields?\r\n        return this.agreedSource && this.agreedMetadata && this.agreedOutputs;\r\n    }\r\n    /**\r\n     * Whether the cell has any conflicted decisions.\r\n     */\r\n    get conflicted() {\r\n        for (let dec of this.decisions) {\r\n            if (dec.conflict) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Whether the cell has any conflicted decisions on a specific key.\r\n     */\r\n    hasConflictsOn(key) {\r\n        let decs = decisions_1.filterDecisions(this.decisions, [key], 2);\r\n        for (let dec of decs) {\r\n            if (dec.conflict) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Whether the cell has any conflicted decisions on source.\r\n     */\r\n    get sourceConflicted() {\r\n        return this.hasConflictsOn('source');\r\n    }\r\n    /**\r\n     * Whether the cell has any conflicted decisions on metadata.\r\n     */\r\n    get metadataConflicted() {\r\n        return this.hasConflictsOn('metadata');\r\n    }\r\n    /**\r\n     * Whether the cell has any conflicted decisions.\r\n     */\r\n    get outputsConflicted() {\r\n        return this.hasConflictsOn('outputs');\r\n    }\r\n    /**\r\n     * Clear any conflicts on decisions on outputs\r\n     */\r\n    clearOutputConflicts() {\r\n        let decs = decisions_1.filterDecisions(this.decisions, ['outputs'], 2);\r\n        for (let dec of decs) {\r\n            dec.conflict = false;\r\n        }\r\n    }\r\n    /**\r\n     * Get the decision on `execution_count` field (should only be one).\r\n     *\r\n     * Returns null if no decision on `execution_count` was found.\r\n     */\r\n    getExecutionCountDecision() {\r\n        let cellDecs = decisions_1.filterDecisions(this.decisions, ['cells'], 0, 2);\r\n        for (let dec of cellDecs) {\r\n            if (util_1.getDiffEntryByKey(dec.localDiff, 'execution_count') !== null ||\r\n                util_1.getDiffEntryByKey(dec.remoteDiff, 'execution_count') !== null ||\r\n                util_1.getDiffEntryByKey(dec.customDiff, 'execution_count') !== null) {\r\n                return dec;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Apply merge decisions to create the merged cell\r\n     */\r\n    serialize() {\r\n        if (this.deleteCell) {\r\n            return null;\r\n        }\r\n        if (this.base === null) {\r\n            // Only possibility is that cell is added\r\n            if (this.decisions.length > 1 || !this.merged.added) {\r\n                throw new exceptions_1.NotifyUserError('Invalid cell decision');\r\n            }\r\n            let dec = this.decisions[0];\r\n            // Either onesided or identical inserts, but possibly with\r\n            // a custom diff on top!\r\n            let d;\r\n            if (dec.action === 'local' || dec.action === 'either') {\r\n                if (!dec.localDiff) {\r\n                    throw new exceptions_1.NotifyUserError('Invalid cell decision');\r\n                }\r\n                d = dec.localDiff[0];\r\n            }\r\n            else if (dec.action === 'remote') {\r\n                if (!dec.remoteDiff) {\r\n                    throw new exceptions_1.NotifyUserError('Invalid cell decision');\r\n                }\r\n                d = dec.remoteDiff[0];\r\n            }\r\n            else if (dec.action === 'custom') {\r\n                if (!dec.customDiff) {\r\n                    throw new exceptions_1.NotifyUserError('Invalid cell decision');\r\n                }\r\n                d = dec.customDiff[0];\r\n            }\r\n            else {\r\n                throw new exceptions_1.NotifyUserError('Invalid cell decision');\r\n            }\r\n            if (d.op !== 'addrange') {\r\n                throw new exceptions_1.NotifyUserError('Invalid cell decision');\r\n            }\r\n            return d.valuelist[0];\r\n        }\r\n        let decisions = [];\r\n        for (let md of this.decisions) {\r\n            let nmd = new decisions_1.MergeDecision(md);\r\n            nmd.level = 2;\r\n            decisions.push(nmd);\r\n        }\r\n        let output = decisions_1.applyDecisions(this.base, decisions);\r\n        let src = output.source;\r\n        if (Array.isArray(src)) {\r\n            src = src.join('');\r\n        }\r\n        if (src !== this._merged.source.remote) {\r\n            console.warn('Serialized outputs doesn\\'t match model value! ' +\r\n                'Keeping the model value.');\r\n            output.source = util_2.splitLines(this._merged.source.remote);\r\n        }\r\n        if (this.clearOutputs && nbformat.isCode(output)) {\r\n            output.outputs = [];\r\n        }\r\n        return output;\r\n    }\r\n    processDecisions(decisions) {\r\n        // First check for cell-level decisions:\r\n        if (decisions.length === 1) {\r\n            if (util_2.arraysEqual(decisions[0].absolutePath, ['cells'])) {\r\n                // We have a cell level decision\r\n                let md = decisions[0];\r\n                decisions = this.applyCellLevelDecision(md);\r\n                if (decisions.length === 0) {\r\n                    this.decisions.push(md);\r\n                }\r\n            }\r\n        }\r\n        for (let md of decisions) {\r\n            md.level = 2;\r\n            if (md.absolutePath.length < 2 ||\r\n                md.absolutePath[0] !== 'cells') {\r\n                throw new Error('Not a valid path for a cell decision');\r\n            }\r\n            else if (md.absolutePath.length === 2 && (util_2.hasEntries(md.localDiff) || util_2.hasEntries(md.remoteDiff))) {\r\n                // Have decision on /cells/X/.\r\n                // Split the decision on subkey:\r\n                // Nest diff as a patch on cell, which can be split by `splitPatch`:\r\n                let splitDec = decisions_1.pushPatchDecision(md, md.absolutePath.slice(1, 2));\r\n                let localDiff = util_2.hasEntries(splitDec.localDiff) ?\r\n                    splitDec.localDiff[0] : null;\r\n                let remoteDiff = util_2.hasEntries(splitDec.remoteDiff) ?\r\n                    splitDec.remoteDiff[0] : null;\r\n                let subDecisions = this.splitPatch(splitDec, localDiff, remoteDiff);\r\n                // Add all split decisions:\r\n                for (let subdec of subDecisions) {\r\n                    subdec.level = 2;\r\n                    this.decisions.push(subdec);\r\n                }\r\n            }\r\n            else { // Decision has path on subkey\r\n                // Make local path relative to cell\r\n                this.decisions.push(md);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Apply a cell level decision to the model\r\n     *\r\n     * This creates the revelant kinds of models\r\n     */\r\n    applyCellLevelDecision(md) {\r\n        let newDecisions = [];\r\n        /* Possibilities:\r\n         1. Insertion: base is null! Null diff of missing side (unchanged).\r\n         2. Deletion: Null diff of present side (unchanged). Set deleteCell\r\n            depending on action.\r\n         3. Deletion vs patch: Same as 2., but split patch decision onto\r\n            source/metadata/outputs.\r\n         4. Identical ops (insertion or deletion)\r\n         Cases that shouldn't happen:\r\n         5. Insertion vs insertion: Shouldn't happen! Should have been split\r\n            into two decisions with an insertion each before creating model.\r\n         6. Patch vs patch: Shouldn't occur, as those should have been recursed\r\n         */\r\n        console.assert(!this.onesided, 'Cannot have multiple cell decisions on one cell!');\r\n        this.onesided = true; // We set this to distinguish case 3 from normal\r\n        if (!util_2.hasEntries(md.localDiff)) {\r\n            // 1. or 2.:\r\n            this._local = null;\r\n            if (!md.remoteDiff || md.remoteDiff.length !== 1) {\r\n                throw new Error('Merge decision does not conform to expectation: ' + md);\r\n            }\r\n            if (this.base === null) {\r\n                // 1.\r\n                let first = md.remoteDiff[0];\r\n                if (first.op !== 'addrange') {\r\n                    throw new Error('Merge decision does not conform to expectation: ' + md);\r\n                }\r\n                let v = first.valuelist[0];\r\n                this._remote = model_1.createAddedCellDiffModel(v, this.mimetype);\r\n                this._merged = model_1.createAddedCellDiffModel(v, this.mimetype);\r\n            }\r\n            else {\r\n                // 2.\r\n                this._remote = model_1.createDeletedCellDiffModel(this.base, this.mimetype);\r\n                this._merged = model_1.createDeletedCellDiffModel(this.base, this.mimetype);\r\n                this.deleteCell = util_2.valueIn(md.action, ['remote', 'either']);\r\n            }\r\n        }\r\n        else if (!util_2.hasEntries(md.remoteDiff)) {\r\n            // 1. or 2.:\r\n            this._remote = null;\r\n            if (!md.localDiff || md.localDiff.length !== 1) {\r\n                throw new Error('Merge decision does not conform to expectation: ' + md);\r\n            }\r\n            if (this.base === null) {\r\n                // 1.\r\n                let first = md.localDiff[0];\r\n                if (first.op !== 'addrange') {\r\n                    throw new Error('Merge decision does not conform to expectation: ' + md);\r\n                }\r\n                let v = first.valuelist[0];\r\n                this._local = model_1.createAddedCellDiffModel(v, this.mimetype);\r\n                this._merged = model_1.createAddedCellDiffModel(v, this.mimetype);\r\n            }\r\n            else {\r\n                // 2.\r\n                this._local = model_1.createDeletedCellDiffModel(this.base, this.mimetype);\r\n                this._merged = model_1.createDeletedCellDiffModel(this.base, this.mimetype);\r\n                this.deleteCell = util_2.valueIn(md.action, ['local', 'either']);\r\n            }\r\n        }\r\n        else {\r\n            console.assert(util_2.hasEntries(md.localDiff) && util_2.hasEntries(md.remoteDiff));\r\n            console.assert(md.localDiff.length === 1 && md.remoteDiff.length === 1);\r\n            // 3. or 4.\r\n            if (md.localDiff[0].op === md.remoteDiff[0].op) {\r\n                // 4.\r\n                if (this.base === null) {\r\n                    // Identical insertions (this relies on preprocessing to ensure only\r\n                    // one value in valuelist)\r\n                    let v = md.localDiff[0].valuelist[0];\r\n                    this._local = model_1.createAddedCellDiffModel(v, this.mimetype);\r\n                    this._remote = model_1.createAddedCellDiffModel(v, this.mimetype);\r\n                    this._merged = model_1.createAddedCellDiffModel(v, this.mimetype);\r\n                }\r\n                else {\r\n                    // Identical delections\r\n                    this._local = model_1.createDeletedCellDiffModel(this.base, this.mimetype);\r\n                    this._remote = model_1.createDeletedCellDiffModel(this.base, this.mimetype);\r\n                    this._merged = model_1.createDeletedCellDiffModel(this.base, this.mimetype);\r\n                    this.deleteCell = util_2.valueIn(md.action, ['local', 'remote', 'either']);\r\n                }\r\n            }\r\n            else {\r\n                // 3., by method of elimination\r\n                let ops = [md.localDiff[0].op, md.remoteDiff[0].op];\r\n                console.assert(util_2.valueIn('removerange', ops) && util_2.valueIn('patch', ops));\r\n                if (this.base === null) {\r\n                    throw new Error('Invalid merge decision, ' +\r\n                        'cannot have null base for deleted cell: ' + md);\r\n                }\r\n                if (ops[0] === 'removerange') {\r\n                    this._local = model_1.createDeletedCellDiffModel(this.base, this.mimetype);\r\n                    this.deleteCell = md.action === 'local';\r\n                    // The patch op will be on cell level. Split it on sub keys!\r\n                    newDecisions = newDecisions.concat(this.splitPatch(md, null, md.remoteDiff[0]));\r\n                }\r\n                else {\r\n                    this._remote = model_1.createDeletedCellDiffModel(this.base, this.mimetype);\r\n                    this.deleteCell = md.action === 'remote';\r\n                    // The patch op will be on cell level. Split it on sub keys!\r\n                    newDecisions = newDecisions.concat(this.splitPatch(md, md.localDiff[0], null));\r\n                }\r\n                decisions_1.resolveCommonPaths(newDecisions);\r\n            }\r\n        }\r\n        return newDecisions;\r\n    }\r\n    /**\r\n     * Split a decision with a patch on one side into one decision\r\n     * for each sub entry in the patch.\r\n     */\r\n    splitPatch(md, localPatch, remotePatch) {\r\n        let local = !!localPatch && util_2.hasEntries(localPatch.diff);\r\n        let remote = !!remotePatch && util_2.hasEntries(remotePatch.diff);\r\n        if (!local && !remote) {\r\n            return [];\r\n        }\r\n        let localDiff = local ? localPatch.diff : null;\r\n        let remoteDiff = remote ? remotePatch.diff : null;\r\n        let split = [];\r\n        let keys = [];\r\n        if (local) {\r\n            for (let d of localDiff) {\r\n                keys.push(d.key);\r\n            }\r\n        }\r\n        if (remote) {\r\n            for (let d of remoteDiff) {\r\n                keys.push(d.key);\r\n            }\r\n        }\r\n        keys = keys.filter(util_2.unique);\r\n        if (local && remote) {\r\n            // Sanity check\r\n            if (localPatch.key !== remotePatch.key) {\r\n                throw new Error('Different keys of patch ops given to `splitPatch`.');\r\n            }\r\n        }\r\n        let patchKey = local ? localPatch.key : remotePatch.key;\r\n        for (let key of keys) {\r\n            if (this._whitelist && !util_2.valueIn(key, this._whitelist)) {\r\n                throw new exceptions_1.NotifyUserError('Currently not able to handle decisions on variable \\\"' +\r\n                    key + '\\\"');\r\n            }\r\n            let el = util_1.getDiffEntryByKey(localDiff, key);\r\n            let er = util_1.getDiffEntryByKey(remoteDiff, key);\r\n            let onsesided = !(el && er);\r\n            let action = md.action;\r\n            // If one-sided, change 'base' actions to present side\r\n            if (action === 'base' && onsesided) {\r\n                action = el ? 'local' : 'remote';\r\n            }\r\n            // Create new action:\r\n            split.push(new decisions_1.MergeDecision(md.absolutePath.concat([patchKey]), el ? [el] : null, er ? [er] : null, action, md.conflict));\r\n        }\r\n        let ret = this.splitOnSourceChunks(split);\r\n        decisions_1.resolveCommonPaths(ret);\r\n        return util_2.stableSort(ret, decisions_1.decisionSortKey);\r\n    }\r\n    /**\r\n     * Split decisions on 'source' by chunks.\r\n     *\r\n     * This prevents one decision from contributing to more than one chunk.\r\n     */\r\n    splitOnSourceChunks(decisions) {\r\n        let out = [];\r\n        for (let i = 0; i < decisions.length; ++i) {\r\n            let dec = decisions[i];\r\n            if (dec.absolutePath[2] === 'source') {\r\n                let base = this.base.source;\r\n                if (!Array.isArray(base)) {\r\n                    base = util_2.splitLines(base);\r\n                }\r\n                dec.level = 3;\r\n                let sub = chunking_1.splitMergeDecisionsOnChunks(base, [dec]);\r\n                decisions_1.resolveCommonPaths(sub);\r\n                out = out.concat(util_2.stableSort(sub, decisions_1.decisionSortKey));\r\n            }\r\n            else {\r\n                out.push(dec);\r\n            }\r\n        }\r\n        return out;\r\n    }\r\n    createDiffModel(diff) {\r\n        if (this.base === null) {\r\n            throw new Error('Cannot create a patched or unchanged diff model with null base!');\r\n        }\r\n        if (diff && diff.length > 0) {\r\n            return model_1.createPatchedCellDiffModel(this.base, diff, this.mimetype);\r\n        }\r\n        else {\r\n            return model_1.createUnchangedCellDiffModel(this.base, this.mimetype);\r\n        }\r\n    }\r\n    createMergedDiffModel() {\r\n        if (this.base === null) {\r\n            throw new Error('Cannot create a patched or unchanged merged diff model with null base!');\r\n        }\r\n        return createPatchedCellDecisionDiffModel(this.base, this.decisions, this.local, this.remote, this.mimetype);\r\n    }\r\n}\r\nexports.CellMergeModel = CellMergeModel;\r\n//# sourceMappingURL=cell.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ObjectMergeModel = exports.DecisionStringDiffModel = void 0;\r\nconst range_1 = require(\"../../diff/range\");\r\nconst model_1 = require(\"../../diff/model\");\r\nconst decisions_1 = require(\"../../merge/decisions\");\r\nconst chunking_1 = require(\"../../chunking\");\r\nconst patch_1 = require(\"../../patch\");\r\n/**\r\n * A string diff model based on merge decisions.\r\n */\r\nclass DecisionStringDiffModel extends model_1.StringDiffModel {\r\n    constructor(base, decisions, sourceModels, collapsible, header, collapsed) {\r\n        // Set up initial parameters for super call\r\n        let baseStr = patch_1.stringifyAndBlankNull(base);\r\n        super(baseStr, '', [], [], collapsible, header, collapsed);\r\n        this.rawBase = base;\r\n        this.decisions = decisions;\r\n        this._outdated = true;\r\n        this._sourceModels = sourceModels;\r\n        this._update();\r\n    }\r\n    get additions() {\r\n        if (this._outdated) {\r\n            this._update();\r\n        }\r\n        return this._additions;\r\n    }\r\n    set additions(value) {\r\n        this._additions = value;\r\n    }\r\n    get deletions() {\r\n        if (this._outdated) {\r\n            this._update();\r\n        }\r\n        return this._deletions;\r\n    }\r\n    set deletions(value) {\r\n        this._deletions = value;\r\n    }\r\n    get remote() {\r\n        if (this._outdated) {\r\n            this._update();\r\n        }\r\n        return this._remote;\r\n    }\r\n    set remote(value) {\r\n        this._remote = value;\r\n    }\r\n    invalidate() {\r\n        this._outdated = true;\r\n    }\r\n    get invalid() {\r\n        return this._outdated;\r\n    }\r\n    /**\r\n     * Chunk additions/deletions into line-based chunks, while also producing\r\n     * chunks from source models where the decision is a no-op (action 'base').\r\n     */\r\n    getLineChunks() {\r\n        let models = [this];\r\n        models = models.concat(this._sourceModels);\r\n        let chunker = new chunking_1.LineChunker();\r\n        let iter = new model_1.StringDiffModel.SyncedDiffIter(models);\r\n        for (let v = iter.next(); v !== undefined; v = iter.next()) {\r\n            if (iter.currentModel() === this) {\r\n                // Chunk diffs in own model normally\r\n                // (they should already be present in own model)\r\n                chunker.addDiff(v.range, v.isAddition);\r\n            }\r\n            else {\r\n                // Skip ops in other models that are not no-ops\r\n                if (!v.range.source || v.range.source.decision.action !== 'base') {\r\n                    continue;\r\n                }\r\n                // Other model\r\n                chunker.addGhost(v.range, v.isAddition, iter.currentOffset);\r\n            }\r\n        }\r\n        return chunker.chunks;\r\n    }\r\n    _update() {\r\n        this._outdated = false;\r\n        let diff = decisions_1.buildDiffs(this.rawBase, this.decisions, 'merged');\r\n        let out = patch_1.patchStringified(this.rawBase, diff);\r\n        this._additions = range_1.raw2Pos(out.additions, out.remote);\r\n        this._deletions = range_1.raw2Pos(out.deletions, this.base || '');\r\n        this._remote = out.remote;\r\n    }\r\n}\r\nexports.DecisionStringDiffModel = DecisionStringDiffModel;\r\n/**\r\n * Abstract base class for a merge model of objects of the type ObjectType,\r\n * which uses DiffModelType to model each side internally.\r\n *\r\n * Implementors need to define the abstract functions createDiffModel and\r\n * createMergedDiffModel.\r\n */\r\nclass ObjectMergeModel {\r\n    /**\r\n     *\r\n     */\r\n    constructor(base, decisions, mimetype, whitelist) {\r\n        this._finalized = false;\r\n        this.base = base;\r\n        this.mimetype = mimetype;\r\n        this._whitelist = whitelist || null;\r\n        this.decisions = decisions;\r\n    }\r\n    /**\r\n     * Apply merge decisions to create the merged cell\r\n     */\r\n    serialize() {\r\n        if (this.base === null) {\r\n            return null;\r\n        }\r\n        return decisions_1.applyDecisions(this.base, this.decisions);\r\n    }\r\n    /**\r\n     * Model of the local diff vs. base\r\n     */\r\n    get local() {\r\n        if (this._local === undefined) {\r\n            // We're builiding from decisions\r\n            this._finalizeDecisions();\r\n            let diff = decisions_1.buildDiffs(this.base, this.decisions, 'local');\r\n            this._local = this.createDiffModel(diff);\r\n        }\r\n        return this._local;\r\n    }\r\n    /**\r\n     * Model of the remote diff vs. base\r\n     */\r\n    get remote() {\r\n        if (this._remote === undefined) {\r\n            this._finalizeDecisions();\r\n            let diff = decisions_1.buildDiffs(this.base, this.decisions, 'remote');\r\n            this._remote = this.createDiffModel(diff);\r\n        }\r\n        return this._remote;\r\n    }\r\n    /**\r\n     * Model of the diff of the merged cell vs. base\r\n     */\r\n    get merged() {\r\n        if (this._merged === undefined) {\r\n            this._finalizeDecisions();\r\n            // Merge model needs access to local and remote models to also include\r\n            // chunks from them\r\n            this._merged = this.createMergedDiffModel();\r\n        }\r\n        return this._merged;\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    get subModels() {\r\n        return [this.local, this.remote, this.merged];\r\n    }\r\n    /**\r\n     * Prevent further changes to decisions, and label the diffs\r\n     *\r\n     * The labels are used for picking of decisions\r\n     */\r\n    _finalizeDecisions() {\r\n        if (!this._finalized) {\r\n            for (let md of this.decisions) {\r\n                if (md.action === 'either') {\r\n                    chunking_1.labelSource(md.localDiff, { decision: md, action: 'either' });\r\n                    chunking_1.labelSource(md.remoteDiff, { decision: md, action: 'either' });\r\n                }\r\n                else {\r\n                    chunking_1.labelSource(md.localDiff, { decision: md, action: 'local' });\r\n                    chunking_1.labelSource(md.remoteDiff, { decision: md, action: 'remote' });\r\n                }\r\n                chunking_1.labelSource(md.customDiff, { decision: md, action: 'custom' });\r\n            }\r\n            this._finalized = true;\r\n        }\r\n    }\r\n}\r\nexports.ObjectMergeModel = ObjectMergeModel;\r\n//# sourceMappingURL=common.js.map","\"use strict\";\r\n// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__exportStar(require(\"./cell\"), exports);\r\n__exportStar(require(\"./common\"), exports);\r\n__exportStar(require(\"./metadata\"), exports);\r\n__exportStar(require(\"./notebook\"), exports);\r\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MetadataMergeModel = void 0;\r\nconst model_1 = require(\"../../diff/model\");\r\nconst common_1 = require(\"./common\");\r\nconst coreutils_1 = require(\"@lumino/coreutils\");\r\n/**\r\n * Model of a merge of metadata with decisions\r\n */\r\nclass MetadataMergeModel extends common_1.ObjectMergeModel {\r\n    constructor(base, decisions) {\r\n        super(base, decisions, 'application/json');\r\n    }\r\n    serialize() {\r\n        if (!this.merged || this.merged.remote === null) {\r\n            throw new Error('Missing notebook metadata merge data.');\r\n        }\r\n        // This will check whether metadata is valid JSON.\r\n        // Validation of compatibility vs notebook format\r\n        // will happen on server side.\r\n        return JSON.parse(this.merged.remote);\r\n    }\r\n    createDiffModel(diff) {\r\n        if (diff && diff.length > 0) {\r\n            return model_1.createPatchStringDiffModel(this.base, diff);\r\n        }\r\n        else {\r\n            const baseCopy = coreutils_1.JSONExt.deepCopy(this.base);\r\n            return model_1.createDirectStringDiffModel(baseCopy, baseCopy);\r\n        }\r\n    }\r\n    createMergedDiffModel() {\r\n        return new common_1.DecisionStringDiffModel(this.base, this.decisions, [this.local, this.remote]);\r\n    }\r\n}\r\nexports.MetadataMergeModel = MetadataMergeModel;\r\n//# sourceMappingURL=metadata.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NotebookMergeModel = void 0;\r\nconst util_1 = require(\"../../common/util\");\r\nconst decisions_1 = require(\"../../merge/decisions\");\r\nconst chunking_1 = require(\"../../chunking\");\r\nconst patch_1 = require(\"../../patch\");\r\nconst cell_1 = require(\"./cell\");\r\nconst metadata_1 = require(\"./metadata\");\r\n/**\r\n * Diff model for a Jupyter Notebook\r\n */\r\nclass NotebookMergeModel {\r\n    /**\r\n     * Create a new NotebookMergeModel from a base notebook and a list of\r\n     * merge decisions.\r\n     *\r\n     * The base as well as the merge decisions are normally supplied by the\r\n     * nbdime server.\r\n     */\r\n    constructor(base, rawMergeDecisions) {\r\n        this.base = base;\r\n        let ctor = this.constructor;\r\n        let decisions = ctor.preprocessDecisions(rawMergeDecisions);\r\n        // The notebook metadata MIME type is used for determining the MIME type\r\n        // of source cells, so store it easily accessible:\r\n        let mimetype;\r\n        try {\r\n            mimetype = base.metadata.language_info.mimetype;\r\n        }\r\n        catch (e) {\r\n            // missing metadata(probably old notebook)\r\n        }\r\n        this.mimetype = mimetype || 'text/python';\r\n        this.cells = this.buildCellList(decisions);\r\n        let metadataDecs = decisions_1.filterDecisions(decisions, ['metadata']);\r\n        this.metadata = new metadata_1.MetadataMergeModel(base.metadata, metadataDecs);\r\n        this.unsavedChanges = false;\r\n    }\r\n    static preprocessDecisions(rawMergeDecisions) {\r\n        let mergeDecisions = [];\r\n        for (let rmd of rawMergeDecisions) {\r\n            mergeDecisions.push(new decisions_1.MergeDecision(rmd));\r\n        }\r\n        mergeDecisions = splitCellChunks(mergeDecisions);\r\n        mergeDecisions = splitCellRemovals(mergeDecisions);\r\n        mergeDecisions = splitCellInsertions(mergeDecisions);\r\n        mergeDecisions = splitCellListPatch(mergeDecisions);\r\n        decisions_1.resolveCommonPaths(mergeDecisions);\r\n        for (let md of mergeDecisions) {\r\n            if (md.action === 'either') {\r\n                chunking_1.labelSource(md.localDiff, { decision: md, action: 'either' });\r\n                chunking_1.labelSource(md.remoteDiff, { decision: md, action: 'either' });\r\n            }\r\n            else {\r\n                chunking_1.labelSource(md.localDiff, { decision: md, action: 'local' });\r\n                chunking_1.labelSource(md.remoteDiff, { decision: md, action: 'remote' });\r\n            }\r\n            chunking_1.labelSource(md.customDiff, { decision: md, action: 'custom' });\r\n        }\r\n        return mergeDecisions;\r\n    }\r\n    serialize() {\r\n        let nb = {};\r\n        // Simply copy all root-level fields except cells/metadata\r\n        for (let key in this.base) {\r\n            if (!util_1.valueIn(key, ['cells', 'metadata'])) {\r\n                nb[key] = this.base[key];\r\n            }\r\n        }\r\n        // Serialize metadata\r\n        nb['metadata'] = this.metadata.serialize();\r\n        // Serialzie cell list\r\n        let cells = [];\r\n        for (let c of this.cells) {\r\n            let s = c.serialize();\r\n            if (s !== null) {\r\n                cells.push(s);\r\n            }\r\n        }\r\n        nb['cells'] = cells;\r\n        // As long as base is a valid notebook, and sub-serialization is valid,\r\n        // this output should be a valid notebook.\r\n        return nb;\r\n    }\r\n    get decisions() {\r\n        let ret = [];\r\n        for (let c of this.cells) {\r\n            ret = ret.concat(c.decisions);\r\n        }\r\n        ret = ret.concat(this.metadata.decisions);\r\n        return ret;\r\n    }\r\n    get conflicts() {\r\n        let ret = [];\r\n        for (let md of this.decisions) {\r\n            if (md.conflict) {\r\n                ret.push(md);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    /**\r\n     * Correlate the different cells in the diff lists into a merge list\r\n     */\r\n    buildCellList(decisions) {\r\n        // We have to check for merge decisions on the `cells` object in\r\n        // order to check for added cells. This assumes that the common\r\n        // paths of the merge decisions have been resolved. It also assumes that\r\n        // no merge decision can have root as its common path.\r\n        // Create arrays of base value and decisions to match base cell list\r\n        let cellDecisions = [];\r\n        for (let bc of this.base.cells) {\r\n            // Create empty decisions array for now, add in below\r\n            cellDecisions.push({ base: bc, decisions: [] });\r\n        }\r\n        let insertOffset = 0;\r\n        // Assumes merge decisions come in order!\r\n        for (let md of decisions) {\r\n            let key = md.absolutePath;\r\n            if (key.length < 1 || key[0] !== 'cells') {\r\n                continue; // Only care about decisions on cells here\r\n            }\r\n            if (util_1.arraysEqual(key, ['cells'])) {\r\n                let idx = null;\r\n                let insertion = false;\r\n                for (let di of md.diffs) {\r\n                    // Ensure diff has exactly one item:\r\n                    if (!di || di.length === 0) {\r\n                        continue;\r\n                    }\r\n                    // All keys should be the same since we run splitCellChunks first\r\n                    idx = di[0].key;\r\n                    if (di[0].op === 'addrange') {\r\n                        // Insert entries into `cells` at idx\r\n                        let offsetIdx = insertOffset + idx;\r\n                        cellDecisions.splice(offsetIdx, 0, { base: null, decisions: [md] });\r\n                        insertOffset += 1;\r\n                        insertion = true; // flag to break outer loop\r\n                        break;\r\n                    }\r\n                    // Only checking for insertions in this loop, since insertions can\r\n                    // only be paired with other insertions.\r\n                }\r\n                if (insertion) {\r\n                    continue;\r\n                }\r\n                // If we reach this point, it is not an insertion merge!\r\n                if (idx === null) {\r\n                    throw new Error('No index could be found for merge decision!');\r\n                }\r\n                let cds = cellDecisions[idx + insertOffset].decisions;\r\n                cds.push(md);\r\n            }\r\n            else {\r\n                // Has a path into a cell\r\n                // Format specifies that these always comes before decisions that\r\n                // change the order of cells, so index is straight forward!\r\n                let idx = key[1];\r\n                let cds = cellDecisions[idx].decisions;\r\n                cds.push(md);\r\n            }\r\n        }\r\n        let cells = [];\r\n        for (let cellInfo of cellDecisions) {\r\n            cells.push(new cell_1.CellMergeModel(cellInfo.base, cellInfo.decisions, this.mimetype));\r\n        }\r\n        return cells;\r\n    }\r\n}\r\nexports.NotebookMergeModel = NotebookMergeModel;\r\nfunction isChunk(diff) {\r\n    return !!diff && diff.length === 2 &&\r\n        diff[0].key === diff[1].key;\r\n}\r\n/**\r\n * The merge format allows for chunking of sequence diffs such that one or more\r\n * entries in the diff lists have 2 entries, where the first is always an\r\n * insertion (addrange). For cells, we split these decisions in two, for easier\r\n * visualization. Note: When several diff entries have 2 entries, the second\r\n * entries are identical.\r\n */\r\nfunction splitCellChunks(mergeDecisions) {\r\n    let output = [];\r\n    for (let md of mergeDecisions) {\r\n        if (util_1.arraysEqual(md.absolutePath, ['cells'])) {\r\n            if (md.localDiff && !md.remoteDiff) {\r\n                for (let d of md.localDiff) {\r\n                    let nmd = new decisions_1.MergeDecision(md);\r\n                    nmd.localDiff = [d];\r\n                    output.push(nmd);\r\n                }\r\n            }\r\n            else if (md.remoteDiff && !md.localDiff) {\r\n                for (let d of md.remoteDiff) {\r\n                    let nmd = new decisions_1.MergeDecision(md);\r\n                    nmd.absolutePath = md.absolutePath.slice();\r\n                    nmd.remoteDiff = [d];\r\n                    output.push(nmd);\r\n                }\r\n            }\r\n            else if (isChunk(md.localDiff)) {\r\n                if (isChunk(md.remoteDiff)) {\r\n                    // Both diffs are chunks, split adds vs agreed removes\r\n                    let nmd = new decisions_1.MergeDecision(md);\r\n                    nmd.localDiff = md.localDiff.slice(0, 1);\r\n                    nmd.remoteDiff = md.remoteDiff.slice(0, 1);\r\n                    output.push(nmd);\r\n                    output.push(new decisions_1.MergeDecision(md.absolutePath.slice(), md.localDiff.slice(1), md.remoteDiff.slice(1), 'either'));\r\n                }\r\n                else {\r\n                    // Split off local\r\n                    let nmd = new decisions_1.MergeDecision(md);\r\n                    nmd.localDiff = md.localDiff.slice(0, 1);\r\n                    output.push(nmd);\r\n                    output.push(new decisions_1.MergeDecision(md.absolutePath.slice(), md.localDiff.slice(1), [], 'local', // Check for custom action first?\r\n                    md.conflict));\r\n                }\r\n            }\r\n            else if (isChunk(md.remoteDiff)) {\r\n                // Split off remote\r\n                let nmd = new decisions_1.MergeDecision(md);\r\n                nmd.remoteDiff = md.remoteDiff.slice(0, 1);\r\n                output.push(nmd);\r\n                output.push(new decisions_1.MergeDecision(md.absolutePath.slice(), [], md.remoteDiff.slice(1), 'remote', // Check for custom action first?\r\n                md.conflict));\r\n            }\r\n            else if (util_1.hasEntries(md.remoteDiff) && util_1.hasEntries(md.localDiff)) {\r\n                const ops = [md.remoteDiff[0].op, md.localDiff[0].op].sort();\r\n                if (ops.join(',') === 'addrange,removerange') {\r\n                    // Insertion and deletions on the same index are simply split\r\n                    // but both keep the conflict status\r\n                    // Just do local first (alt. do add first)\r\n                    let lmd = new decisions_1.MergeDecision(md);\r\n                    lmd.action = 'local';\r\n                    lmd.localDiff = md.localDiff.slice();\r\n                    lmd.remoteDiff = null;\r\n                    output.push(lmd);\r\n                    let rmd = new decisions_1.MergeDecision(md);\r\n                    rmd.action = 'remote';\r\n                    rmd.localDiff = null;\r\n                    rmd.remoteDiff = md.remoteDiff.slice();\r\n                    output.push(rmd);\r\n                }\r\n                else {\r\n                    output.push(md); // deepCopy?\r\n                }\r\n            }\r\n            else {\r\n                output.push(md); // deepCopy?\r\n            }\r\n        }\r\n        else {\r\n            output.push(md);\r\n        }\r\n    }\r\n    decisions_1.resolveCommonPaths(output);\r\n    return output;\r\n}\r\n/**\r\n * If any decisions have diffs on different cells, split them\r\n * up for one decision per cell.\r\n */\r\nfunction splitCellListPatch(mergeDecisions) {\r\n    let output = [];\r\n    for (let md of mergeDecisions) {\r\n        if (!util_1.arraysEqual(md.absolutePath, ['cells'])) {\r\n            output.push(md);\r\n            continue;\r\n        }\r\n        // Null out empty diffs\r\n        let dl = util_1.hasEntries(md.localDiff) ? md.localDiff : null;\r\n        let dr = util_1.hasEntries(md.remoteDiff) ? md.remoteDiff : null;\r\n        if (dl && dl.length < 2 && dr && dr.length < 2) {\r\n            // Single cell affected\r\n            output.push(md);\r\n            continue;\r\n        }\r\n        // Before this is called, we should have split up chunks\r\n        // as well as range addition/removal, so all diffs\r\n        // should have different keys\r\n        let maxlen = Math.max(dl ? dl.length : 0, dr ? dr.length : 0);\r\n        for (let i = 0; i < maxlen; ++i) {\r\n            let subdl = dl && i < dl.length ? [dl[i]] : null;\r\n            let subdr = dr && i < dr.length ? [dr[i]] : null;\r\n            output.push(new decisions_1.MergeDecision(md.absolutePath.slice(), subdl, subdr, md.action, md.conflict));\r\n        }\r\n    }\r\n    return util_1.stableSort(output, decisions_1.decisionSortKey);\r\n}\r\n/**\r\n * Split \"removerange\" diffs on cell list level into individual decisions!\r\n */\r\nfunction splitCellRemovals(mergeDecisions) {\r\n    let output = [];\r\n    let makeSplitPart = function (md, key, local, remote) {\r\n        let newMd = new decisions_1.MergeDecision(md.absolutePath.slice(), null, null, md.action, md.conflict);\r\n        let newDiff = [{\r\n                key: key,\r\n                op: 'removerange',\r\n                length: 1\r\n            }];\r\n        console.assert(local || remote);\r\n        if (local) {\r\n            newMd.localDiff = newDiff;\r\n        }\r\n        if (remote) {\r\n            newMd.remoteDiff = newDiff;\r\n        }\r\n        return newMd;\r\n    };\r\n    for (let md of mergeDecisions) {\r\n        if (!util_1.arraysEqual(md.absolutePath, ['cells'])) {\r\n            output.push(md);\r\n            continue;\r\n        }\r\n        let dl = util_1.hasEntries(md.localDiff) ? md.localDiff[md.localDiff.length - 1] : null;\r\n        let dr = util_1.hasEntries(md.remoteDiff) ? md.remoteDiff[md.remoteDiff.length - 1] : null;\r\n        // TODO: Does it make sense to split on custom?\r\n        if (dl && !dr || dr && !dl) {\r\n            // One-way diff\r\n            let d = (dl ? dl : dr);\r\n            if (d.op === 'removerange' && d.length > 1) {\r\n                // Found a one-way diff to split!\r\n                for (let i = 0; i < d.length; ++i) {\r\n                    output.push(makeSplitPart(md, d.key + i, !!dl, !!dr));\r\n                }\r\n            }\r\n            else {\r\n                // Not a removerange type:\r\n                output.push(md);\r\n                continue;\r\n            }\r\n        }\r\n        else if (dr && dl) {\r\n            // Two way diff, keys need to be matched\r\n            if (dl.op !== 'removerange' && dr.op !== 'removerange') {\r\n                // Not a removerange type:\r\n                output.push(md);\r\n                continue;\r\n            }\r\n            else if (dl.op === dr.op) {\r\n                // Both sides have removerange, just match keys/length\r\n                // Note: Assume that ranges have overlap, since they are in one decision\r\n                let klStart = dl.key;\r\n                let krStart = dr.key;\r\n                let start = Math.min(klStart, krStart);\r\n                let klEnd = klStart + dl.length;\r\n                let krEnd = krStart + dr.length;\r\n                let end = Math.max(klEnd, krEnd);\r\n                for (let i = start; i < end; ++i) {\r\n                    let local = i >= klStart && i < klEnd;\r\n                    let remote = i >= krStart && i < krEnd;\r\n                    output.push(makeSplitPart(md, i, local, remote));\r\n                }\r\n            }\r\n            else {\r\n                // One side has removerange, the other a patch op (implied)\r\n                let remLocal = dl.op === 'removerange';\r\n                let rOp = (remLocal ? dl : dr);\r\n                let pOp = (remLocal ? dr : dl);\r\n                console.assert(pOp.op === 'patch');\r\n                let pidx = pOp.key;\r\n                let start = rOp.key;\r\n                for (let i = start; i < start + rOp.length; ++i) {\r\n                    let newMd = makeSplitPart(md, i, remLocal, !remLocal);\r\n                    if (i === pidx) {\r\n                        if (remLocal) {\r\n                            newMd.remoteDiff = [pOp];\r\n                        }\r\n                        else {\r\n                            newMd.localDiff = [pOp];\r\n                        }\r\n                    }\r\n                    output.push(newMd);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Split \"addrange\" diffs on cell list level into individual decisions!\r\n * Also splits two-way insertions into two individual ones.\r\n */\r\nfunction splitCellInsertions(mergeDecisions) {\r\n    let output = [];\r\n    let makeSplitPart = function (md, value, local, remote) {\r\n        let newMd = new decisions_1.MergeDecision(md.absolutePath.slice(), null, null, md.action, md.conflict);\r\n        if ((local && !util_1.hasEntries(md.localDiff)) || (!local && !util_1.hasEntries(md.remoteDiff))) {\r\n            throw new Error('Invalid input: ' + md);\r\n        }\r\n        let key = (local ? md.localDiff : md.remoteDiff)[0].key;\r\n        let newDiff = [{\r\n                key: key,\r\n                op: 'addrange',\r\n                valuelist: [value]\r\n            }];\r\n        console.assert(local || remote);\r\n        if (local) {\r\n            newMd.localDiff = newDiff;\r\n        }\r\n        if (remote) {\r\n            newMd.remoteDiff = newDiff;\r\n        }\r\n        return newMd;\r\n    };\r\n    for (let md of mergeDecisions) {\r\n        // Just push decisions not on cells list:\r\n        if (!util_1.arraysEqual(md.absolutePath, ['cells'])) {\r\n            output.push(md);\r\n            continue;\r\n        }\r\n        // Check wether all diffs are pure addrange\r\n        let correctType = true;\r\n        if (md.localDiff) {\r\n            for (let dl of md.localDiff) {\r\n                if (dl.op !== 'addrange') {\r\n                    correctType = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (md.remoteDiff) {\r\n            for (let dl of md.remoteDiff) {\r\n                if (dl.op !== 'addrange') {\r\n                    correctType = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (!correctType) {\r\n            output.push(md);\r\n            continue;\r\n        }\r\n        let dl = md.localDiff && md.localDiff.length === 1 ? md.localDiff[0] : null;\r\n        let dr = md.remoteDiff && md.remoteDiff.length === 1 ? md.remoteDiff[0] : null;\r\n        if (dl && !dr || dr && !dl) {\r\n            // One-way diff\r\n            let d = (dl ? dl : dr);\r\n            let insert = d.valuelist;\r\n            for (let v of insert) {\r\n                output.push(makeSplitPart(md, v, !!dl, !!dr));\r\n            }\r\n        }\r\n        else if (dl && dr) {\r\n            // Two way diff\r\n            // First, check if both insertions are equal!\r\n            let eq = patch_1.stringify(dl.valuelist) === patch_1.stringify(dr.valuelist);\r\n            if (eq) {\r\n                // Split to one decision per cell\r\n                for (let c of dl.valuelist) {\r\n                    output.push(makeSplitPart(md, c, true, true));\r\n                }\r\n            }\r\n            else {\r\n                // Next, check decision for ruling on order (e.g.\r\n                // local_then_remote, which we will use as the default).\r\n                let start = dl.key;\r\n                console.assert(start === dr.key);\r\n                if (md.action === 'remote_then_local') {\r\n                    // Only case where we need to switch order!\r\n                    for (let c of dr.valuelist) {\r\n                        const part = makeSplitPart(md, c, false, true);\r\n                        part.action = 'remote';\r\n                        output.push(part);\r\n                    }\r\n                    for (let c of dl.valuelist) {\r\n                        const part = makeSplitPart(md, c, true, false);\r\n                        part.action = 'local';\r\n                        output.push(part);\r\n                    }\r\n                }\r\n                else {\r\n                    for (let c of dl.valuelist) {\r\n                        const part = makeSplitPart(md, c, true, false);\r\n                        part.action = 'local';\r\n                        output.push(part);\r\n                    }\r\n                    for (let c of dr.valuelist) {\r\n                        const part = makeSplitPart(md, c, false, true);\r\n                        part.action = 'remote';\r\n                        output.push(part);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return output;\r\n}\r\n//# sourceMappingURL=notebook.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CellMergeWidget = exports.CELLMERGE_CLASS = void 0;\r\nconst nbformat = require(\"@jupyterlab/nbformat\");\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst collapsiblepanel_1 = require(\"../../common/collapsiblepanel\");\r\nconst dragpanel_1 = require(\"../../common/dragpanel\");\r\nconst mergeview_1 = require(\"../../common/mergeview\");\r\nconst util_1 = require(\"../../common/util\");\r\nconst model_1 = require(\"../../diff/model\");\r\nconst widget_1 = require(\"../../diff/widget\");\r\nconst flexpanel_1 = require(\"../../upstreaming/flexpanel\");\r\nconst output_1 = require(\"./output\");\r\nconst common_1 = require(\"./common\");\r\nexports.CELLMERGE_CLASS = 'jp-Cell-merge';\r\nconst CELL_HEADER_CLASS = 'jp-Merge-cellHeader';\r\nconst CELL_HEADER_TITLE_CLASS = 'jp-Merge-cellHeader-title';\r\nconst MARKED_DELETE = 'jp-mod-todelete';\r\nconst MARKED_CLEAR_OUTPUTS = 'jp-mod-clearoutputs';\r\nconst CLEAR_OUTPUT_TOGGLE_CLASS = 'jp-Merge-clearOutput-toggle';\r\nconst DELETE_CELL_TOGGLE_CLASS = 'jp-Merge-delete-cell-toggle';\r\nconst EXECUTIONCOUNT_ROW_CLASS = 'jp-Cellrow-executionCount';\r\nconst SOURCE_ROW_CLASS = 'jp-Cellrow-source';\r\nconst METADATA_ROW_CLASS = 'jp-Cellrow-metadata';\r\nconst OUTPUTS_ROW_CLASS = 'jp-Cellrow-outputs';\r\nconst OUTPUTS_CONFLICTED_CLASS = 'jp-conflicted-outputs';\r\nconst MARK_OUTPUTS_RESOLVED_CLASS = 'jp-conflicted-outputs-button';\r\n/**\r\n * CellMergeWidget for cell changes\r\n */\r\nclass CellMergeWidget extends widgets_1.Panel {\r\n    /**\r\n     *\r\n     */\r\n    constructor(model, rendermime, mimetype) {\r\n        super();\r\n        this.sourceView = null;\r\n        this.metadataView = null;\r\n        this.outputViews = null;\r\n        this.addClass(exports.CELLMERGE_CLASS);\r\n        this._model = model;\r\n        this._rendermime = rendermime;\r\n        this.mimetype = mimetype;\r\n        this.init();\r\n    }\r\n    static createMergeView(local, remote, merged, editorClasses, readOnly = false) {\r\n        let view = null;\r\n        if (merged instanceof model_1.StringDiffModel) {\r\n            view = mergeview_1.createNbdimeMergeView(remote, local, merged, readOnly);\r\n        }\r\n        return view;\r\n    }\r\n    static getOutputs(models, base) {\r\n        let raw = [];\r\n        for (let m of models) {\r\n            if (base === true) {\r\n                if (m.base) {\r\n                    raw.push(m.base);\r\n                }\r\n            }\r\n            else {\r\n                if (m.remote) {\r\n                    raw.push(m.remote);\r\n                }\r\n            }\r\n        }\r\n        return raw;\r\n    }\r\n    validateMerged(candidate) {\r\n        if (this.sourceView && this.sourceView instanceof mergeview_1.MergeView) {\r\n            let text = this.sourceView.getMergedValue();\r\n            let lines = util_1.splitLines(text);\r\n            if (candidate.source !== lines) {\r\n                candidate.source = lines;\r\n            }\r\n        }\r\n        if (this.metadataView && this.metadataView instanceof mergeview_1.MergeView) {\r\n            let text = this.metadataView.getMergedValue();\r\n            if (JSON.stringify(candidate.metadata) !== text) {\r\n                // This will need to be validated server side,\r\n                // and should not be touched by client side\r\n                // (structure might differ from assumed form)\r\n                candidate.metadata = JSON.parse(text);\r\n            }\r\n        }\r\n        if (nbformat.isCode(candidate) && this.outputViews) {\r\n            let model = this.outputViews.merged;\r\n            let outputs = model.toJSON();\r\n            candidate.outputs = outputs;\r\n        }\r\n        return candidate;\r\n    }\r\n    init() {\r\n        let model = this.model;\r\n        let CURR_CLASSES = common_1.MERGE_CLASSES.slice(); // copy\r\n        this.createHeader();\r\n        // Mark cells that have no changes:\r\n        if (model.merged.unchanged &&\r\n            model.local && model.local.unchanged &&\r\n            model.remote && model.remote.unchanged) {\r\n            this.addClass(common_1.UNCHANGED_MERGE_CLASS);\r\n        }\r\n        /*\r\n         Two different display layouts depending on cell merge type:\r\n         1. Unchanged or one way insert/delete of cell, or identical insert/delete:\r\n            Single r/w editor (merged), with appropriate coloring for insert/delete\r\n         2. Everything else:\r\n            Full 4x merge view\r\n        */\r\n        let ladd = model.local && model.local.added;\r\n        let ldel = model.local && model.local.deleted;\r\n        let radd = model.remote && model.remote.added;\r\n        let rdel = model.remote && model.remote.deleted;\r\n        if (ladd && !radd || ldel && !rdel) {\r\n            this.headerTitle = ladd ? 'Cell added locally' : 'Cell deleted locally';\r\n        }\r\n        else if (radd && !ladd || rdel && !ldel) {\r\n            this.headerTitle = radd ? 'Cell added remotely' : 'Cell deleted remotely';\r\n        }\r\n        if (model.local === null || model.remote === null || ( // One sided change\r\n        model.local.unchanged && model.remote.unchanged &&\r\n            model.merged.unchanged) || // Unchanged\r\n            model.local.added !== model.remote.added || // Onesided addition\r\n            model.local.deleted && model.remote.unchanged || // Onesided deletion (other side unchanged)\r\n            model.local.unchanged && model.remote.deleted || // Onesided deletion (other side unchanged)\r\n            model.local.added && model.agreedCell || // Identical additions\r\n            model.local.deleted && model.remote.deleted // Deletion on both\r\n        ) {\r\n            CURR_CLASSES = CURR_CLASSES.slice(1, 3);\r\n            // Add single view of source:\r\n            let view = widget_1.CellDiffWidget.createView(model.merged.source, model.merged, CURR_CLASSES, this._rendermime);\r\n            if (ladd && !radd || ldel && !rdel) {\r\n                this.addClass(common_1.ONEWAY_LOCAL_CLASS);\r\n            }\r\n            else if (radd && !ladd || rdel && !ldel) {\r\n                this.addClass(common_1.ONEWAY_REMOTE_CLASS);\r\n            }\r\n            else if (ldel && rdel) {\r\n                this.headerTitle = 'Deleted on both sides';\r\n                this.addClass(common_1.TWOWAY_DELETION_CLASS);\r\n            }\r\n            else if (ladd && radd) {\r\n                this.headerTitle = 'Added on both sides';\r\n                this.addClass(common_1.TWOWAY_ADDITION_CLASS);\r\n            }\r\n            view.addClass(SOURCE_ROW_CLASS);\r\n            this.addWidget(view);\r\n            if (util_1.hasEntries(model.merged.outputs)) {\r\n                // Add single view of rendered output\r\n                let container = new widgets_1.Panel();\r\n                for (let m of model.merged.outputs) {\r\n                    view = widget_1.CellDiffWidget.createView(m, model.merged, CURR_CLASSES, this._rendermime);\r\n                    container.addWidget(view);\r\n                }\r\n                container.addClass(OUTPUTS_ROW_CLASS);\r\n                this.addWidget(container);\r\n            }\r\n        }\r\n        else {\r\n            // Setup full 4-way mergeview of source, metadata and outputs\r\n            // as needed (if changed). Source/metadata/output are each a \"row\"\r\n            let execDec = model.getExecutionCountDecision();\r\n            if (execDec && execDec.action === 'clear') {\r\n                let row = new flexpanel_1.FlexPanel({ direction: 'left-to-right' });\r\n                row.addClass(EXECUTIONCOUNT_ROW_CLASS);\r\n                let textWidget = new widgets_1.Widget();\r\n                textWidget.node.innerText = 'Execution count will be cleared.';\r\n                row.addWidget(textWidget);\r\n                this.addWidget(row);\r\n            }\r\n            let sourceView = null;\r\n            if (model.local && model.local.source.unchanged &&\r\n                model.remote && model.remote.source.unchanged &&\r\n                model.merged.source.unchanged) {\r\n                // Use single unchanged view of source\r\n                sourceView = widget_1.CellDiffWidget.createView(model.merged.source, model.merged, CURR_CLASSES, this._rendermime);\r\n            }\r\n            else {\r\n                sourceView = CellMergeWidget.createMergeView(model.local ? model.local.source : null, model.remote ? model.remote.source : null, model.merged.source, CURR_CLASSES);\r\n            }\r\n            if (sourceView === null) {\r\n                throw new Error('Was not able to create merge view for cell!');\r\n            }\r\n            this.sourceView = sourceView;\r\n            sourceView.addClass(SOURCE_ROW_CLASS);\r\n            this.addWidget(sourceView);\r\n            let metadataChanged = false;\r\n            let outputsChanged = false;\r\n            for (let m of model.subModels) {\r\n                if (!m || m.deleted) {\r\n                    // Don't consider deleted cells\r\n                    continue;\r\n                }\r\n                metadataChanged = metadataChanged || (!!m.metadata && !m.metadata.unchanged);\r\n                if (m.outputs && m.outputs.length > 0) {\r\n                    for (let o of m.outputs) {\r\n                        outputsChanged = outputsChanged || !o.unchanged;\r\n                    }\r\n                }\r\n            }\r\n            if (metadataChanged) {\r\n                let metadataView = CellMergeWidget.createMergeView(model.local ? model.local.metadata : null, model.remote ? model.remote.metadata : null, model.merged.metadata, CURR_CLASSES, true); // Do not allow manual edit of metadata\r\n                if (metadataView === null) {\r\n                    throw new Error('Was not able to create merge view for cell metadata!');\r\n                }\r\n                this.metadataView = metadataView;\r\n                let container = new widgets_1.Panel();\r\n                container.addWidget(metadataView);\r\n                let header = 'Metadata changed';\r\n                let collapser = new collapsiblepanel_1.CollapsiblePanel(container, header, true);\r\n                collapser.addClass(METADATA_ROW_CLASS);\r\n                this.addWidget(collapser);\r\n            }\r\n            if (outputsChanged || util_1.hasEntries(model.merged.outputs)) {\r\n                // We know here that we have code cell\r\n                // -> all have outputs !== null\r\n                let baseOut = CellMergeWidget.getOutputs(model.local ? model.local.outputs : [], true);\r\n                let localOut = CellMergeWidget.getOutputs(model.local ? model.local.outputs : []);\r\n                let remoteOut = CellMergeWidget.getOutputs(model.remote ? model.remote.outputs : []);\r\n                let mergedOut = CellMergeWidget.getOutputs(model.merged.outputs);\r\n                let view = new output_1.RenderableOutputsMergeView(mergedOut, common_1.MERGE_CLASSES, this._rendermime, baseOut, remoteOut, localOut);\r\n                this.outputViews = view;\r\n                let header = outputsChanged ?\r\n                    (model.outputsConflicted ?\r\n                        'Outputs conflicted' :\r\n                        'Outputs changed') :\r\n                    'Outputs unchanged';\r\n                let collapser = new collapsiblepanel_1.CollapsiblePanel(view, header, !outputsChanged);\r\n                collapser.addClass(OUTPUTS_ROW_CLASS);\r\n                if (model.outputsConflicted) {\r\n                    collapser.addClass(OUTPUTS_CONFLICTED_CLASS);\r\n                    let conflictClearBtn = new widgets_1.Widget();\r\n                    conflictClearBtn.addClass(MARK_OUTPUTS_RESOLVED_CLASS);\r\n                    let node = conflictClearBtn.node;\r\n                    let btn = document.createElement('button');\r\n                    btn.onclick = (ev) => {\r\n                        if (ev.button !== 0) {\r\n                            return; // Only main button clicks\r\n                        }\r\n                        model.clearOutputConflicts();\r\n                        collapser.removeClass(OUTPUTS_CONFLICTED_CLASS);\r\n                        collapser.headerTitle = 'Outputs changed';\r\n                        ev.preventDefault();\r\n                        ev.stopPropagation();\r\n                        conflictClearBtn.parent = null;\r\n                    };\r\n                    btn.innerText = 'Mark resolved';\r\n                    node.appendChild(btn);\r\n                    collapser.header.insertWidget(1, conflictClearBtn);\r\n                }\r\n                this.addWidget(collapser);\r\n            }\r\n        }\r\n    }\r\n    createHeader() {\r\n        let header = new widgets_1.Panel();\r\n        header.addClass(CELL_HEADER_CLASS);\r\n        // Add drag handle\r\n        let w = dragpanel_1.DragPanel.createDefaultHandle();\r\n        header.addWidget(w);\r\n        // Add title widget\r\n        w = new widgets_1.Widget();\r\n        this.headerTitleWidget = w;\r\n        w.addClass(CELL_HEADER_TITLE_CLASS);\r\n        header.addWidget(w);\r\n        if (util_1.hasEntries(this.model.merged.outputs)) {\r\n            // Add \"clear outputs\" checkbox\r\n            let clearOutputToggle = this._createClearOutputToggle();\r\n            header.addWidget(clearOutputToggle);\r\n        }\r\n        // Add \"delete cell\" checkbox\r\n        let deleteToggle = this._createDeleteToggle();\r\n        header.addWidget(deleteToggle);\r\n        // Add header to widget\r\n        this.addWidget(header);\r\n        this.header = header;\r\n    }\r\n    _createClearOutputToggle() {\r\n        let { checkbox, widget } = common_1.createCheckbox(this.model.clearOutputs, 'Clear outputs');\r\n        if (this.model.clearOutputs) {\r\n            this.addClass(MARKED_CLEAR_OUTPUTS);\r\n        }\r\n        // Map checkbox -> model\r\n        checkbox.onchange = (event) => {\r\n            this.model.clearOutputs = checkbox.checked;\r\n            this.toggleClass(MARKED_CLEAR_OUTPUTS, checkbox.checked);\r\n        };\r\n        // Map model -> checkbox\r\n        this.model.clearOutputsChanged.connect((_model, value) => {\r\n            checkbox.checked = value;\r\n            this.toggleClass(MARKED_CLEAR_OUTPUTS, value);\r\n        });\r\n        widget.addClass(CLEAR_OUTPUT_TOGGLE_CLASS);\r\n        return widget;\r\n    }\r\n    _createDeleteToggle() {\r\n        let { checkbox, widget } = common_1.createCheckbox(this.model.deleteCell, 'Delete cell');\r\n        if (this.model.deleteCell) {\r\n            this.addClass(MARKED_DELETE);\r\n        }\r\n        // Map checkbox -> model\r\n        checkbox.onchange = (event) => {\r\n            this.model.deleteCell = checkbox.checked;\r\n            this.toggleClass(MARKED_DELETE, checkbox.checked);\r\n        };\r\n        // Map model -> checkbox\r\n        this.model.deleteCellChanged.connect((_model, value) => {\r\n            checkbox.checked = value;\r\n            this.toggleClass(MARKED_DELETE, value);\r\n        });\r\n        widget.addClass(DELETE_CELL_TOGGLE_CLASS);\r\n        return widget;\r\n    }\r\n    set headerTitle(value) {\r\n        this.headerTitleWidget.node.innerText = value;\r\n    }\r\n    /**\r\n     * Get the model for the widget.\r\n     *\r\n     * #### Notes\r\n     * This is a read-only property.\r\n     */\r\n    get model() {\r\n        return this._model;\r\n    }\r\n}\r\nexports.CellMergeWidget = CellMergeWidget;\r\n//# sourceMappingURL=cell.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.createCheckbox = exports.MERGE_CLASSES = exports.TWOWAY_DELETION_CLASS = exports.TWOWAY_ADDITION_CLASS = exports.ONEWAY_REMOTE_CLASS = exports.ONEWAY_LOCAL_CLASS = exports.UNCHANGED_MERGE_CLASS = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\n// Merge classes:\r\nexports.UNCHANGED_MERGE_CLASS = 'jp-Merge-unchanged';\r\nexports.ONEWAY_LOCAL_CLASS = 'jp-Merge-oneway-local';\r\nexports.ONEWAY_REMOTE_CLASS = 'jp-Merge-oneway-remote';\r\nexports.TWOWAY_ADDITION_CLASS = 'jp-Merge-twoway-addition';\r\nexports.TWOWAY_DELETION_CLASS = 'jp-Merge-twoway-deletion';\r\nconst BASE_MERGE_CLASS = 'jp-Merge-base';\r\nconst LOCAL_MERGE_CLASS = 'jp-Merge-local';\r\nconst REMOTE_MERGE_CLASS = 'jp-Merge-remote';\r\nconst MERGED_MERGE_CLASS = 'jp-Merge-merged';\r\nexports.MERGE_CLASSES = [BASE_MERGE_CLASS, LOCAL_MERGE_CLASS,\r\n    REMOTE_MERGE_CLASS, MERGED_MERGE_CLASS];\r\n/**\r\n * Create a widget containing a checkbox with a label.\r\n *\r\n * @export\r\n * @param {boolean} value - The initial check state (true = checked)\r\n * @param {string} text - The text of the label\r\n * @returns {{checkbox: HTMLInputElement, widget: Widget }}\r\n */\r\nfunction createCheckbox(value, text, indeterminate = false) {\r\n    let checkbox = document.createElement('input');\r\n    checkbox.setAttribute('type', 'checkbox');\r\n    checkbox.checked = value;\r\n    checkbox.indeterminate = indeterminate;\r\n    // Create label for checkbox:\r\n    let widget = new widgets_1.Widget();\r\n    let label = document.createElement('label');\r\n    label.innerHTML = text;\r\n    // Combine checkbox and label:\r\n    label.insertBefore(checkbox, label.childNodes[0]);\r\n    // Add checkbox to header:\r\n    widget.node.appendChild(label);\r\n    return { checkbox, widget };\r\n}\r\nexports.createCheckbox = createCheckbox;\r\n//# sourceMappingURL=common.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ChunkedCellsWidget = exports.CellsDragDrop = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst signaling_1 = require(\"@lumino/signaling\");\r\nconst dragpanel_1 = require(\"../../common/dragpanel\");\r\nconst CELL_DRAG_DROP_CLASS = 'jp-merge-celldragdrop';\r\nconst MARK_CHUNK_RESOLVED_CLASS = 'jp-conflicted-cells-button';\r\nconst CHUNK_HEADER_CLASS = 'jp-conflicted-cells-header';\r\nconst CONLICTED_CELL_CHUNK_CLASS = 'jp-conflicted-cells';\r\nclass CellsDragDrop extends dragpanel_1.FriendlyDragDrop {\r\n    /**\r\n     *\r\n     */\r\n    constructor(options) {\r\n        super(options);\r\n        this._moved = new signaling_1.Signal(this);\r\n        this.addClass(CELL_DRAG_DROP_CLASS);\r\n    }\r\n    /**\r\n     * Called when something has been dropped in the panel.\r\n     *\r\n     * As only internal moves are supported, we know the type of the keys\r\n     */\r\n    move(from, to) {\r\n        let friendFromId = from[0];\r\n        let friendToId = to[0];\r\n        let widgetFromId = from[1];\r\n        let widgetToId = to[1];\r\n        let adjustedTo = widgetToId;\r\n        if (friendFromId === friendToId) {\r\n            if (widgetToId > widgetFromId) {\r\n                // Have to adjust index for insertWidget in same instance\r\n                adjustedTo -= 1;\r\n                to[1] = adjustedTo;\r\n            }\r\n            else if (widgetFromId === widgetToId) {\r\n                // No-op, same position\r\n                return;\r\n            }\r\n        }\r\n        let toPanel = this.friends[friendToId];\r\n        let fromPanel = this.friends[friendFromId];\r\n        const cell = fromPanel.widgets[widgetFromId];\r\n        toPanel.insertWidget(adjustedTo, cell);\r\n        this._moved.emit({\r\n            widget: cell,\r\n            oldParent: fromPanel,\r\n            before: adjustedTo > 0 ?\r\n                toPanel.widgets[adjustedTo - 1] : null,\r\n            after: adjustedTo < toPanel.widgets.length ?\r\n                toPanel.widgets[adjustedTo + 1] : null,\r\n        });\r\n    }\r\n    get moved() {\r\n        return this._moved;\r\n    }\r\n}\r\nexports.CellsDragDrop = CellsDragDrop;\r\nclass ChunkedCellsWidget extends widgets_1.Panel {\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._resolved = new signaling_1.Signal(this);\r\n        this.addClass(CONLICTED_CELL_CHUNK_CLASS);\r\n        this.header = new widgets_1.Widget();\r\n        this.header.addClass(CHUNK_HEADER_CLASS);\r\n        this.header.node.innerText = 'Conflicting cell operations';\r\n        let button = document.createElement('button');\r\n        button.innerText = 'Resolve Conflict';\r\n        button.onclick = this.onResolve.bind(this);\r\n        button.className = MARK_CHUNK_RESOLVED_CLASS;\r\n        this.header.node.appendChild(button);\r\n        this.addWidget(this.header);\r\n        this.cells = new CellsDragDrop();\r\n        this.addWidget(this.cells);\r\n    }\r\n    onResolve(event) {\r\n        for (let cell of this.cells.widgets) {\r\n            let model = cell.model;\r\n            if (model.onesided && model.conflicted) {\r\n                for (let d of model.decisions) {\r\n                    d.conflict = false;\r\n                }\r\n            }\r\n        }\r\n        this.removeClass(CONLICTED_CELL_CHUNK_CLASS);\r\n        this.header.parent = null;\r\n        this.header.dispose();\r\n        this._resolved.emit(undefined);\r\n    }\r\n    dispose() {\r\n        this.cells.parent = null;\r\n        this.cells = null;\r\n        if (this.header) {\r\n            this.header.parent = null;\r\n        }\r\n        this.header = null;\r\n        super.dispose();\r\n    }\r\n    get resolved() {\r\n        return this._resolved;\r\n    }\r\n}\r\nexports.ChunkedCellsWidget = ChunkedCellsWidget;\r\n//# sourceMappingURL=dragdrop.js.map","\"use strict\";\r\n// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__exportStar(require(\"./cell\"), exports);\r\n__exportStar(require(\"./notebook\"), exports);\r\n__exportStar(require(\"./metadata\"), exports);\r\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MetadataMergeWidget = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst mergeview_1 = require(\"../../common/mergeview\");\r\nconst collapsiblepanel_1 = require(\"../../common/collapsiblepanel\");\r\nconst ROOT_METADATA_CLASS = 'jp-Metadata-diff';\r\n/**\r\n * MetadataWidget for changes to Notebook-level metadata\r\n */\r\nclass MetadataMergeWidget extends widgets_1.Panel {\r\n    constructor(model) {\r\n        super();\r\n        this._model = model;\r\n        this.addClass(ROOT_METADATA_CLASS);\r\n        this.init();\r\n    }\r\n    init() {\r\n        let model = this._model;\r\n        // We know/assume that MetadataMergeModel never has\r\n        // null values for local/remote:\r\n        this.view = mergeview_1.createNbdimeMergeView(model.remote, model.local, model.merged);\r\n        let wrapper = new collapsiblepanel_1.CollapsiblePanel(this.view, 'Notebook metadata changed', true);\r\n        this.addWidget(wrapper);\r\n    }\r\n    validateMerged(candidate) {\r\n        let text = this.view.getMergedValue();\r\n        if (JSON.stringify(candidate) !== text) {\r\n            // This will need to be validated server side,\r\n            // and should not be touched by client side\r\n            // (structure might differ from assumed form)\r\n            candidate = JSON.parse(text);\r\n        }\r\n        return candidate;\r\n    }\r\n}\r\nexports.MetadataMergeWidget = MetadataMergeWidget;\r\n//# sourceMappingURL=metadata.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NotebookMergeWidget = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst util_1 = require(\"../../common/util\");\r\nconst flexpanel_1 = require(\"../../upstreaming/flexpanel\");\r\nconst metadata_1 = require(\"./metadata\");\r\nconst cell_1 = require(\"./cell\");\r\nconst common_1 = require(\"./common\");\r\nconst dragdrop_1 = require(\"./dragdrop\");\r\nconst NBMERGE_CLASS = 'jp-Notebook-merge';\r\nconst NB_MERGE_CONTROLS_CLASS = 'jp-Merge-notebook-controls';\r\n/**\r\n * NotebookMergeWidget\r\n */\r\nclass NotebookMergeWidget extends widgets_1.Panel {\r\n    constructor(model, rendermime) {\r\n        super();\r\n        this.metadataWidget = null;\r\n        this._model = model;\r\n        this._rendermime = rendermime;\r\n        this.addClass(NBMERGE_CLASS);\r\n    }\r\n    /**\r\n     * Start adding sub-widgets.\r\n     *\r\n     * Separated from constructor to allow 'live' adding of widgets\r\n     */\r\n    init() {\r\n        let model = this._model;\r\n        let rendermime = this._rendermime;\r\n        let work = Promise.resolve();\r\n        this.addWidget(new NotebookMergeControls(model));\r\n        work = work.then(() => {\r\n            if (model.metadata) {\r\n                this.metadataWidget = new metadata_1.MetadataMergeWidget(model.metadata);\r\n                this.addWidget(this.metadataWidget);\r\n            }\r\n        });\r\n        work = work.then(() => {\r\n            this.cellContainer = new dragdrop_1.CellsDragDrop({ acceptDropsFromExternalSource: true });\r\n            this.cellContainer.setFriendlyGroup(dragdrop_1.CellsDragDrop.makeGroup());\r\n            this.cellContainer.moved.connect(this.onDragDropMove, this);\r\n            this.addWidget(this.cellContainer);\r\n        });\r\n        this.cellWidgets = [];\r\n        let chunk = null;\r\n        for (let c of model.cells) {\r\n            work = work.then(() => {\r\n                return new Promise((resolve) => {\r\n                    let w = new cell_1.CellMergeWidget(c, rendermime, model.mimetype);\r\n                    this.cellWidgets.push(w);\r\n                    if (c.onesided && c.conflicted) {\r\n                        if (chunk === null) {\r\n                            chunk = new dragdrop_1.ChunkedCellsWidget();\r\n                            chunk.cells.moved.connect(this.onDragDropMove, this);\r\n                            chunk.resolved.connect(this.onChunkResolved, this);\r\n                            this.cellContainer.addToFriendlyGroup(chunk.cells);\r\n                        }\r\n                        chunk.cells.addWidget(w);\r\n                    }\r\n                    else {\r\n                        if (chunk !== null) {\r\n                            this.cellContainer.addWidget(chunk);\r\n                            chunk = null;\r\n                        }\r\n                        this.cellContainer.addWidget(w);\r\n                    }\r\n                    // This limits us to drawing 60 cells per second, which shouldn't\r\n                    // be a problem...\r\n                    requestAnimationFrame(() => {\r\n                        resolve();\r\n                    });\r\n                });\r\n            });\r\n        }\r\n        work = work.then(() => {\r\n            if (chunk !== null) {\r\n                this.cellContainer.addWidget(chunk);\r\n            }\r\n        });\r\n        return work;\r\n    }\r\n    validateMerged(candidate) {\r\n        let validated = util_1.deepCopy(candidate);\r\n        // Validate metadata\r\n        if (this.metadataWidget) {\r\n            validated.metadata = this.metadataWidget.validateMerged(candidate.metadata);\r\n        }\r\n        // Validate cells\r\n        let i = 0;\r\n        for (let c of this.cellWidgets) {\r\n            if (!c.model.deleteCell) {\r\n                validated.cells[i] = c.validateMerged(candidate.cells[i]);\r\n                ++i;\r\n            }\r\n        }\r\n        return validated;\r\n    }\r\n    /**\r\n     * Get the model for the widget.\r\n     *\r\n     * #### Notes\r\n     * This is a read-only property.\r\n     */\r\n    get model() {\r\n        return this._model;\r\n    }\r\n    onDragDropMove(sender, args) {\r\n        // Move cell in model list\r\n        let { widget, oldParent, before, after } = args;\r\n        let from = this._model.cells.indexOf(widget.model);\r\n        let to;\r\n        if (after) {\r\n            to = this._model.cells.indexOf(after.model);\r\n        }\r\n        else if (before) {\r\n            to = this._model.cells.indexOf(before.model) + 1;\r\n        }\r\n        else {\r\n            throw new Error('Need either before or after');\r\n        }\r\n        if (to > from) {\r\n            to -= 1;\r\n        }\r\n        this._model.cells.splice(to, 0, this._model.cells.splice(from, 1)[0]);\r\n        if (oldParent.widgets.length === 0) {\r\n            let chunk = oldParent.parent;\r\n            chunk.onResolve();\r\n        }\r\n        // Mark any conflict on a cell moved from chunk as resolved\r\n        if (oldParent !== this.cellContainer && widget.parent === this.cellContainer) {\r\n            for (let d of widget.model.decisions) {\r\n                d.conflict = false;\r\n            }\r\n        }\r\n    }\r\n    onChunkResolved(sender, args) {\r\n        let index = this.cellContainer.widgets.indexOf(sender);\r\n        while (sender.cells.widgets.length > 0) {\r\n            this.cellContainer.insertWidget(index++, sender.cells.widgets[0]);\r\n        }\r\n        sender.parent = null;\r\n        sender.dispose();\r\n    }\r\n}\r\nexports.NotebookMergeWidget = NotebookMergeWidget;\r\n/**\r\n * Collection of notebook-wide controls\r\n */\r\nclass NotebookMergeControls extends flexpanel_1.FlexPanel {\r\n    constructor(model) {\r\n        super({\r\n            direction: 'left-to-right'\r\n        });\r\n        this.model = model;\r\n        this.addClass(NB_MERGE_CONTROLS_CLASS);\r\n        let anyOutputs = false;\r\n        for (let cell of model.cells) {\r\n            if (util_1.hasEntries(cell.merged.outputs)) {\r\n                anyOutputs = true;\r\n                break;\r\n            }\r\n        }\r\n        if (anyOutputs) {\r\n            this.init_controls();\r\n        }\r\n    }\r\n    init_controls() {\r\n        // Add \"Clear all outputs\" checkbox\r\n        let chk = common_1.createCheckbox(false, 'Clear <i>all</i> cell outputs');\r\n        this.clearOutputsToggle = chk.checkbox;\r\n        this.addWidget(chk.widget);\r\n        // Add \"Clear all conflicted outputs\" checkbox\r\n        chk = common_1.createCheckbox(false, 'Clear <i>conflicted</i> cell outputs');\r\n        this.clearConflictedOutputsToggle = chk.checkbox;\r\n        this.addWidget(chk.widget);\r\n        this.updateOutputsToggles();\r\n        this.connectOutputsToggles();\r\n    }\r\n    connectOutputsToggles() {\r\n        for (let cell of this.model.cells) {\r\n            if (util_1.hasEntries(cell.merged.outputs)) {\r\n                cell.clearOutputsChanged.connect(this.updateOutputsToggles, this);\r\n            }\r\n        }\r\n        this.clearOutputsToggle.addEventListener('change', this);\r\n        this.clearConflictedOutputsToggle.addEventListener('change', this);\r\n    }\r\n    disconnectOutputsToggles() {\r\n        for (let cell of this.model.cells) {\r\n            if (util_1.hasEntries(cell.merged.outputs)) {\r\n                cell.clearOutputsChanged.disconnect(this.updateOutputsToggles, this);\r\n            }\r\n        }\r\n        this.clearOutputsToggle.removeEventListener('change', this);\r\n        this.clearConflictedOutputsToggle.removeEventListener('change', this);\r\n    }\r\n    handleEvent(event) {\r\n        switch (event.type) {\r\n            case 'change':\r\n                if (event.currentTarget === this.clearOutputsToggle) {\r\n                    this.onClearAllOutputsChanged();\r\n                }\r\n                else if (event.currentTarget === this.clearConflictedOutputsToggle) {\r\n                    this.onClearConflictedOutputsChanged();\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    onClearAllOutputsChanged() {\r\n        this.disconnectOutputsToggles();\r\n        try {\r\n            let value = this.clearOutputsToggle.checked;\r\n            for (let cell of this.model.cells) {\r\n                if (util_1.hasEntries(cell.merged.outputs)) {\r\n                    cell.clearOutputs = value;\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            this.updateOutputsToggles();\r\n            this.connectOutputsToggles();\r\n        }\r\n    }\r\n    onClearConflictedOutputsChanged() {\r\n        this.disconnectOutputsToggles();\r\n        try {\r\n            let value = this.clearConflictedOutputsToggle.checked;\r\n            for (let cell of this.model.cells) {\r\n                if (util_1.hasEntries(cell.merged.outputs) && cell.outputsConflicted) {\r\n                    cell.clearOutputs = value;\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            this.updateOutputsToggles();\r\n            this.connectOutputsToggles();\r\n        }\r\n    }\r\n    updateOutputsToggles() {\r\n        // null = indeterminate\r\n        let all = undefined;\r\n        let conflicted = undefined;\r\n        for (let cell of this.model.cells) {\r\n            if (util_1.hasEntries(cell.merged.outputs)) {\r\n                let current = cell.clearOutputs;\r\n                if (all === null) {\r\n                    // Indeterminate, current value won't change it\r\n                }\r\n                else if (all === undefined) {\r\n                    all = current;\r\n                }\r\n                else if (all !== current) {\r\n                    all = null;\r\n                }\r\n                if (cell.outputsConflicted) {\r\n                    if (conflicted === null) {\r\n                        // Indeterminate, current value won't change it\r\n                    }\r\n                    else if (conflicted === undefined) {\r\n                        conflicted = current;\r\n                    }\r\n                    else if (conflicted !== current) {\r\n                        conflicted = null;\r\n                    }\r\n                }\r\n            }\r\n            if (conflicted === null && all === null) {\r\n                // Both indeterminate, short circuit\r\n                break;\r\n            }\r\n        }\r\n        this.clearOutputsToggle.checked = all === true;\r\n        this.clearOutputsToggle.indeterminate = all === null;\r\n        this.clearConflictedOutputsToggle.checked = conflicted === true;\r\n        this.clearConflictedOutputsToggle.indeterminate = conflicted === null;\r\n        this.clearConflictedOutputsToggle.disabled = conflicted === undefined;\r\n        if (conflicted === undefined) {\r\n            this.clearConflictedOutputsToggle.parentElement.setAttribute('disabled', '');\r\n        }\r\n        else {\r\n            this.clearConflictedOutputsToggle.parentElement.removeAttribute('disabled');\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=notebook.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RenderableOutputsMergeView = exports.ReorderableOutputWidget = exports.ReorderableOutputModel = void 0;\r\nconst outputarea_1 = require(\"@jupyterlab/outputarea\");\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst dragpanel_1 = require(\"../../common/dragpanel\");\r\nconst flexpanel_1 = require(\"../../upstreaming/flexpanel\");\r\nconst REORDERABLE_OUTPUT_CLASS = 'jp-Merge-reorder-outputs';\r\nconst REORDERABLE_OUTPUT_DRAGIMAGE_CLASS = 'jp-Merge-dragimage-output';\r\nconst DELETE_DROP_ZONE_CLASS = 'jp-Merge-output-drop-delete';\r\n/**\r\n * An OutputAreaModel which allows for reordering of its\r\n * outputs.\r\n */\r\nclass ReorderableOutputModel extends outputarea_1.OutputAreaModel {\r\n    insert(index, item) {\r\n        // Note: We do not need worry about consolidating outputs\r\n        // like the `add` method in parent class.\r\n        this.list.insert(index, item);\r\n    }\r\n    move(fromIndex, toIndex) {\r\n        // Note: We do not need worry about consolidating outputs\r\n        // like the `add` method in parent class.\r\n        this.list.move(fromIndex, toIndex);\r\n    }\r\n    remove(index) {\r\n        return this.list.remove(index);\r\n    }\r\n}\r\nexports.ReorderableOutputModel = ReorderableOutputModel;\r\n/**\r\n * An OutputArea which supports the reordering\r\n * capabilities of ReorderableOutputModel\r\n */\r\nclass ReorderableOutputWidget extends outputarea_1.OutputArea {\r\n    /**\r\n     * Follow changes on the model state.\r\n     */\r\n    onModelChanged(sender, args) {\r\n        let layout = this.layout;\r\n        switch (args.type) {\r\n            case 'move':\r\n                layout.insertWidget(args.newIndex, layout.widgets[args.oldIndex]);\r\n                break;\r\n            case 'remove':\r\n                layout.removeWidgetAt(args.oldIndex);\r\n                break;\r\n            default:\r\n                return super.onModelChanged(sender, args);\r\n        }\r\n    }\r\n}\r\nexports.ReorderableOutputWidget = ReorderableOutputWidget;\r\nclass DisconnectedDropTarget extends dragpanel_1.DropPanel {\r\n    constructor() {\r\n        super({ acceptDropsFromExternalSource: true });\r\n        this.callback = null;\r\n    }\r\n    findDropTarget(input) {\r\n        if (input === this.node || this.node.contains(input)) {\r\n            return this.node;\r\n        }\r\n        return null;\r\n    }\r\n    processDrop(dropTarget, event) {\r\n        if (this.callback) {\r\n            this.callback(dropTarget, event);\r\n        }\r\n    }\r\n    ;\r\n}\r\n/**\r\n * Widget for showing side by side comparison and picking of merge outputs\r\n */\r\nclass RenderableOutputsMergeView extends dragpanel_1.DragDropPanel {\r\n    /**\r\n     *\r\n     */\r\n    constructor(merged, classes, rendermime, base, remote, local) {\r\n        super();\r\n        this.base = null;\r\n        this.remote = null;\r\n        this.local = null;\r\n        this.addClass(REORDERABLE_OUTPUT_CLASS);\r\n        if (!base !== !remote || !base !== !local) {\r\n            // Assert that either none, or all of base/remote/local are given\r\n            throw new Error('Renderable outputs merge-view either takes only merged output ' +\r\n                'or a full set of four output lists.');\r\n        }\r\n        if (base) {\r\n            this.base = new outputarea_1.OutputAreaModel();\r\n            for (let output of base) {\r\n                this.base.add(output);\r\n            }\r\n            this.remote = new outputarea_1.OutputAreaModel();\r\n            for (let output of remote) {\r\n                this.remote.add(output);\r\n            }\r\n            this.local = new outputarea_1.OutputAreaModel();\r\n            for (let output of local) {\r\n                this.local.add(output);\r\n            }\r\n        }\r\n        this.merged = new ReorderableOutputModel();\r\n        for (let output of merged) {\r\n            this.merged.add(output);\r\n        }\r\n        this.rendermime = rendermime;\r\n        this.panes = [];\r\n        this.init(classes);\r\n    }\r\n    static makeOutputsDraggable(area) {\r\n        let i = area.layout.iter();\r\n        for (let w = i.next(); w !== undefined; w = i.next()) {\r\n            dragpanel_1.DragPanel.makeHandle(w);\r\n        }\r\n    }\r\n    static get deleteDrop() {\r\n        if (!RenderableOutputsMergeView._deleteDrop) {\r\n            let widget = new DisconnectedDropTarget();\r\n            widget.addClass(DELETE_DROP_ZONE_CLASS);\r\n            let icon = document.createElement('i');\r\n            icon.className = 'fa fa-lg fa-trash-o';\r\n            icon.setAttribute('aria-hidden', 'true');\r\n            widget.node.appendChild(icon);\r\n            widget.node.style.position = 'absolute';\r\n            RenderableOutputsMergeView._deleteDrop = widget;\r\n        }\r\n        return RenderableOutputsMergeView._deleteDrop;\r\n    }\r\n    init(classes) {\r\n        let row = new flexpanel_1.FlexPanel({ direction: 'left-to-right', evenSizes: true });\r\n        if (this.local) {\r\n            let leftPane = new outputarea_1.OutputArea({ model: this.local, rendermime: this.rendermime });\r\n            leftPane.addClass(classes[1]);\r\n            row.addWidget(leftPane);\r\n            this.panes.push(leftPane);\r\n        }\r\n        if (this.base) {\r\n            let basePane = new outputarea_1.OutputArea({ model: this.base, rendermime: this.rendermime });\r\n            basePane.addClass(classes[0]);\r\n            row.addWidget(basePane);\r\n            this.panes.push(basePane);\r\n        }\r\n        if (this.remote) {\r\n            let rightPane = new outputarea_1.OutputArea({ model: this.remote, rendermime: this.rendermime });\r\n            rightPane.addClass(classes[2]);\r\n            row.addWidget(rightPane);\r\n            this.panes.push(rightPane);\r\n        }\r\n        if (row.widgets.length > 0) {\r\n            this.addWidget(row);\r\n            row = new flexpanel_1.FlexPanel({ direction: 'left-to-right', evenSizes: true });\r\n        }\r\n        this.mergePane = new ReorderableOutputWidget({ model: this.merged, rendermime: this.rendermime });\r\n        this.mergePane.addClass(classes[3]);\r\n        row.addWidget(this.mergePane);\r\n        this.panes.push(this.mergePane);\r\n        this.addWidget(row);\r\n        for (let p of this.panes) {\r\n            RenderableOutputsMergeView.makeOutputsDraggable(p);\r\n        }\r\n    }\r\n    /**\r\n     * Overrided version to allow drag and drop from source lists to merged list\r\n     */\r\n    findDragTarget(handle) {\r\n        // First check for a drag handle\r\n        if (handle === null) {\r\n            return null;\r\n        }\r\n        // Next find out which pane it belongs to, and which output it belongs to\r\n        for (let pane of this.panes) {\r\n            let child = dragpanel_1.findChild(pane.node, handle);\r\n            if (child !== null) {\r\n                return child;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    getIndexOfChildNode(node, parent) {\r\n        for (let pane of this.panes) {\r\n            let child = dragpanel_1.findChild(pane.node, node);\r\n            if (child !== null) {\r\n                let paneIndex = this.panes.indexOf(pane);\r\n                return [paneIndex, super.getIndexOfChildNode(child, pane.layout)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Called when something has been dropped in the panel.\r\n     *\r\n     * As only internal moves are supported, we know the type of the keys\r\n     */\r\n    move(from, to) {\r\n        let paneFrom = from[0];\r\n        let paneTo = to[0];\r\n        if (this.panes[paneTo] !== this.mergePane) {\r\n            // Shouldn't happen if drop target code is correct...\r\n            return;\r\n        }\r\n        let outputFrom = from[1];\r\n        let outputTo = to[1];\r\n        let adjustedTo = outputTo;\r\n        if (paneFrom === paneTo) {\r\n            if (outputTo > outputFrom) {\r\n                // Have to adjust index for insertWidget in same instance\r\n                adjustedTo -= 1;\r\n                to[1] = adjustedTo;\r\n            }\r\n            else if (outputFrom === outputTo) {\r\n                // No-op, same position\r\n                return;\r\n            }\r\n        }\r\n        let toModel = this.mergePane.model;\r\n        let fromModel = this.panes[paneFrom].model;\r\n        if (paneTo !== paneFrom) {\r\n            toModel.insert(adjustedTo, fromModel.get(outputFrom));\r\n        }\r\n        else {\r\n            toModel.move(outputFrom, adjustedTo);\r\n        }\r\n        RenderableOutputsMergeView.makeOutputsDraggable(this.mergePane);\r\n    }\r\n    /**\r\n     * Find a drop target from a given node\r\n     *\r\n     * Returns null if no valid drop target was found.\r\n     */\r\n    findDropTarget(node) {\r\n        if (node === this.mergePane.node && this.mergePane.model.length === 0) {\r\n            // If empty, use pane as target\r\n            return this.mergePane.node;\r\n        }\r\n        // Only valid drop target is in merge pane!\r\n        return dragpanel_1.findChild(this.mergePane.node, node);\r\n    }\r\n    processDrop(dropTarget, event) {\r\n        if (dropTarget === RenderableOutputsMergeView.deleteDrop.node) {\r\n            // Simply remove output\r\n            let [paneIdx, outputIdx] = event.mimeData.getData(dragpanel_1.MIME_INDEX);\r\n            if (this.panes[paneIdx] !== this.mergePane) {\r\n                // Shouldn't happen if drop target code is correct...\r\n                return;\r\n            }\r\n            this.mergePane.model.remove(outputIdx);\r\n            // Event cleanup\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            event.dropAction = 'move';\r\n        }\r\n        else if (dropTarget === this.mergePane.node && this.mergePane.model.length === 0) {\r\n            // Dropping on empty merge pane\r\n            let sourceKey = event.mimeData.getData(dragpanel_1.MIME_INDEX);\r\n            this.move(sourceKey, [this.panes.indexOf(this.mergePane), 0]);\r\n            // Event cleanup\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            event.dropAction = 'copy';\r\n        }\r\n        else {\r\n            super.processDrop(dropTarget, event);\r\n        }\r\n    }\r\n    getDragImage(handle) {\r\n        let target = this.findDragTarget(handle);\r\n        if (target) {\r\n            let image = target.cloneNode(true);\r\n            image.style.width = target.offsetWidth.toString() + 'px';\r\n            image.classList.add(REORDERABLE_OUTPUT_DRAGIMAGE_CLASS);\r\n            return image;\r\n        }\r\n        return null;\r\n    }\r\n    startDrag(handle, clientX, clientY) {\r\n        super.startDrag(handle, clientX, clientY);\r\n        // After starting drag, show delete drop-zone ('trash')\r\n        if (dragpanel_1.findChild(this.mergePane.node, handle)) {\r\n            let dd = RenderableOutputsMergeView.deleteDrop;\r\n            dd.callback = this.processDrop.bind(this);\r\n            // Calculate position and size:\r\n            let ourRect = this.mergePane.node.getBoundingClientRect();\r\n            dd.node.style.left = '0';\r\n            dd.node.style.width = (ourRect.left + window.pageXOffset).toString() + 'px';\r\n            dd.node.style.top = (ourRect.top + window.pageYOffset).toString() + 'px';\r\n            dd.node.style.height = ourRect.height.toString() + 'px';\r\n            // Attach to document\r\n            widgets_1.Widget.attach(dd, document.body);\r\n        }\r\n    }\r\n    onDragComplete(action) {\r\n        super.onDragComplete(action);\r\n        // After finishing drag, hide delete drop-zone ('trash')\r\n        if (RenderableOutputsMergeView.deleteDrop.isAttached) {\r\n            widgets_1.Widget.detach(RenderableOutputsMergeView.deleteDrop);\r\n        }\r\n    }\r\n}\r\nexports.RenderableOutputsMergeView = RenderableOutputsMergeView;\r\nRenderableOutputsMergeView._deleteDrop = null;\r\n//# sourceMappingURL=output.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PatchObjectHelper = void 0;\r\nconst util_1 = require(\"../common/util\");\r\nclass PatchObjectHelper {\r\n    constructor(base, diff) {\r\n        this._diffLUT = {};\r\n        let diffKeys = [];\r\n        if (diff) {\r\n            for (let d of diff) {\r\n                diffKeys.push(d.key);\r\n                this._diffLUT[d.key] = d;\r\n            }\r\n        }\r\n        this._diffKeys = diffKeys;\r\n        this.baseKeys = _objectKeys(base);\r\n    }\r\n    isDiffKey(key) {\r\n        return util_1.valueIn(key, this._diffKeys);\r\n    }\r\n    getDiffEntry(key) {\r\n        return this._diffLUT[key];\r\n    }\r\n    /**\r\n     * Whether there any dict entries after the current add/remove diff op.\r\n     *\r\n     * Note that if the current op is a remove op, it does not take into\r\n     * account any entries added below it. Similarly, if the current op is\r\n     * an add op it does not take into account any entries that are\r\n     * removed after it.\r\n     *\r\n     * Assumes current key is a diff key to either an add or remove op.\r\n     * @returns {boolean}\r\n     */\r\n    entriesAfterCurrentAddRem() {\r\n        if (this._currentIsAddition === undefined) {\r\n            throw new Error('Current op is not an add or remove op');\r\n        }\r\n        // Check for unchanged entries after, or any changed entries\r\n        // that are not of the OPPOSITE add/remove type:\r\n        let oppositeOp = this._currentIsAddition ? 'remove' : 'add';\r\n        for (let key of this._remainingKeys) {\r\n            if (!util_1.valueIn(key, this._diffKeys)) {\r\n                // There remains unchanged entries after\r\n                return true;\r\n            }\r\n            else if (this._diffLUT[key].op !== oppositeOp) {\r\n                // There remains entries that should not be ignored\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    iter() {\r\n        this._remainingKeys = this.baseKeys.concat(this._diffKeys).filter(util_1.unique).sort();\r\n        return this;\r\n    }\r\n    keys() {\r\n        return this;\r\n    }\r\n    next() {\r\n        let key = this._remainingKeys.shift();\r\n        if (key && util_1.valueIn(key, this._diffKeys)) {\r\n            let op = this._diffLUT[key].op;\r\n            if (op === 'add') {\r\n                this._currentIsAddition = true;\r\n            }\r\n            else if (op === 'remove') {\r\n                this._currentIsAddition = false;\r\n            }\r\n            else {\r\n                this._currentIsAddition = undefined;\r\n            }\r\n        }\r\n        return key;\r\n    }\r\n    clone() {\r\n        let c = new PatchObjectHelper({}, null);\r\n        c.baseKeys = this.baseKeys;\r\n        c._diffKeys = this._diffKeys;\r\n        c._currentIsAddition = this._currentIsAddition;\r\n        c._diffLUT = this._diffLUT;\r\n        c._remainingKeys = this._remainingKeys.slice();\r\n        return c;\r\n    }\r\n}\r\nexports.PatchObjectHelper = PatchObjectHelper;\r\n/**\r\n * The keys present in a Object class. Equivalent to Object.keys, but with a\r\n * fallback if not defined.\r\n */\r\nlet _objectKeys = Object.keys || function (obj) {\r\n    let has = Object.prototype.hasOwnProperty || function () { return true; };\r\n    let keys = [];\r\n    for (let key in obj) {\r\n        if (has.call(obj, key)) {\r\n            keys.push(key);\r\n        }\r\n    }\r\n    return keys;\r\n};\r\n//# sourceMappingURL=common.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.patch = void 0;\r\nconst coreutils_1 = require(\"@lumino/coreutils\");\r\nconst util_1 = require(\"../common/util\");\r\nconst diffentries_1 = require(\"../diff/diffentries\");\r\nconst stringified_1 = require(\"./stringified\");\r\nfunction patch(base, diff) {\r\n    if (typeof base === 'string') {\r\n        return stringified_1.patchString(base, diff, 0, false).remote;\r\n    }\r\n    else if (Array.isArray(base)) {\r\n        const baseCopy = coreutils_1.JSONExt.deepCopy(base);\r\n        return patchSequence(baseCopy, diff);\r\n    }\r\n    else if (typeof base === 'number' || typeof base === 'boolean') {\r\n        throw new TypeError('Cannot patch an atomic type: ' + typeof base);\r\n    }\r\n    else if (base === null) {\r\n        throw new TypeError('Cannot patch a null base!');\r\n    }\r\n    else {\r\n        const baseCopy = coreutils_1.JSONExt.deepCopy(base);\r\n        return patchObject(baseCopy, diff);\r\n    }\r\n}\r\nexports.patch = patch;\r\n/**\r\n * Patch an array according to the diff.\r\n */\r\nfunction patchSequence(base, diff) {\r\n    if (diff === null) {\r\n        return util_1.deepCopy(base);\r\n    }\r\n    // The patched sequence to build and return\r\n    let patched = [];\r\n    // Index into obj, the next item to take unless diff says otherwise\r\n    let take = 0;\r\n    let skip = 0;\r\n    for (let e of diff) {\r\n        // Check for valid entry first:\r\n        diffentries_1.validateSequenceOp(base, e);\r\n        let index = e.key;\r\n        // Take values from base not mentioned in diff, up to not including\r\n        // index\r\n        for (let value of base.slice(take, index)) {\r\n            patched.push(util_1.deepCopy(value));\r\n        }\r\n        if (e.op === 'addrange') {\r\n            // Extend with new values directly\r\n            patched = patched.concat(e.valuelist);\r\n            skip = 0;\r\n        }\r\n        else if (e.op === 'removerange') {\r\n            // Delete a number of values by skipping\r\n            skip = e.length;\r\n        }\r\n        else if (e.op === 'patch') {\r\n            patched.push(patch(base[index], e.diff));\r\n            skip = 1;\r\n        }\r\n        // Skip the specified number of elements, but never decrement take.\r\n        // Note that take can pass index in diffs with repeated +/- on the\r\n        // same index, i.e. [op_remove(index), op_add(index, value)]\r\n        take = Math.max(take, index + skip);\r\n    }\r\n    // Take values at end not mentioned in diff\r\n    for (let value of base.slice(take)) {\r\n        patched.push(util_1.deepCopy(value));\r\n    }\r\n    return patched;\r\n}\r\n/**\r\n * Patch an object (dictionary type) according to the diff.\r\n */\r\nfunction patchObject(base, diff) {\r\n    let patched = {};\r\n    let keysToCopy = Object.keys(base);\r\n    if (diff) {\r\n        for (let e of diff) {\r\n            // Check for valid entry first:\r\n            diffentries_1.validateObjectOp(base, e, keysToCopy);\r\n            let key = e.key;\r\n            if (e.op === 'add') {\r\n                patched[key] = e.value;\r\n            }\r\n            else if (e.op === 'remove') {\r\n                keysToCopy.splice(keysToCopy.indexOf(key), 1); // Remove key\r\n            }\r\n            else if (e.op === 'replace') {\r\n                keysToCopy.splice(keysToCopy.indexOf(key), 1); // Remove key\r\n                patched[key] = e.value;\r\n            }\r\n            else if (e.op === 'patch') {\r\n                keysToCopy.splice(keysToCopy.indexOf(key), 1); // Remove key\r\n                patched[key] = patch(base[key], e.diff);\r\n            }\r\n        }\r\n    }\r\n    // Take items not mentioned in diff\r\n    for (let key of keysToCopy) {\r\n        patched[key] = util_1.deepCopy(base[key]);\r\n    }\r\n    return patched;\r\n}\r\n//# sourceMappingURL=generic.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__exportStar(require(\"./common\"), exports);\r\n__exportStar(require(\"./generic\"), exports);\r\n__exportStar(require(\"./stringified\"), exports);\r\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.patchString = exports.patchStringified = exports.stringifyAndBlankNull = exports.stringify = void 0;\r\nconst algorithm_1 = require(\"@lumino/algorithm\");\r\nconst util_1 = require(\"../common/util\");\r\nconst util_2 = require(\"../diff/util\");\r\nconst diffentries_1 = require(\"../diff/diffentries\");\r\nconst range_1 = require(\"../diff/range\");\r\nconst common_1 = require(\"./common\");\r\nconst stableStringify = require(\"json-stable-stringify\");\r\n/**\r\n * Ordered stringify. Wraps stableStringify(), but handles indentation.\r\n *\r\n * indentFirst controls whether the first line is indented as well, and\r\n * defaults to true.\r\n */\r\nfunction stringify(values, level, indentFirst = true) {\r\n    let ret = stableStringify(values, { space: util_2.JSON_INDENT });\r\n    if (level) {\r\n        ret = _indent(ret, level, indentFirst);\r\n    }\r\n    return ret;\r\n}\r\nexports.stringify = stringify;\r\n/**\r\n * Ensure value is string, if not stringify.\r\n */\r\nfunction stringifyAndBlankNull(value) {\r\n    if (typeof value === 'string') {\r\n        return value;\r\n    }\r\n    else if (value === null) {\r\n        return '';\r\n    }\r\n    else {\r\n        return stringify(value);\r\n    }\r\n}\r\nexports.stringifyAndBlankNull = stringifyAndBlankNull;\r\n/**\r\n * Patch a stringified JSON object.\r\n *\r\n * Returns the stringified value of the patched JSON object, as well as\r\n * position ranges indicating which parts of the string that was added or\r\n * removed.\r\n *\r\n * Internally, this builds the ranges based on the actual supplied diff, which\r\n * can therefore differ from a straigh string-based diff of stringified JSON\r\n * objects.\r\n */\r\nfunction patchStringified(base, diff, level) {\r\n    if (level === undefined) {\r\n        level = 0;\r\n    }\r\n    if (typeof base === 'string') {\r\n        // Only stringify if level > 0\r\n        let stringifyPatch = level > 0;\r\n        return patchString(base, diff, level, stringifyPatch);\r\n    }\r\n    else if (Array.isArray(base)) {\r\n        return patchStringifiedList(base, diff, level);\r\n    }\r\n    else if (typeof base === 'number' || typeof base === 'boolean') {\r\n        throw new TypeError('Cannot patch an atomic type: ' + typeof base);\r\n    }\r\n    else if (base === null) {\r\n        throw new TypeError('Cannot patch a null base!');\r\n    }\r\n    else {\r\n        return patchStringifiedObject(base, diff, level);\r\n    }\r\n}\r\nexports.patchStringified = patchStringified;\r\n/**\r\n * Patch a string according to a line based diff\r\n */\r\nfunction patchString(base, diff, level, stringifyPatch) {\r\n    let additions = [];\r\n    let deletions = [];\r\n    let baseIndex = 0;\r\n    // Short-circuit if diff is empty\r\n    if (diff === null) {\r\n        return { remote: stringifyPatch ? stringify(base, level) : base,\r\n            additions: additions,\r\n            deletions: deletions };\r\n    }\r\n    // Diffs are line-based, so flatten to character based:\r\n    diff = util_2.flattenStringDiff(base, diff);\r\n    // Index into obj, the next item to take unless diff says otherwise\r\n    let take = 0;\r\n    let skip = 0;\r\n    let remote = '';\r\n    for (let e of diff) {\r\n        let index = e.key;\r\n        // Take values from obj not mentioned in diff, up to not including index\r\n        let unchanged = base.slice(take, index);\r\n        remote += unchanged;\r\n        baseIndex += unchanged.length;\r\n        if (e.op === 'addrange') {\r\n            let added = e.valuelist;\r\n            additions.push(new range_1.DiffRangeRaw(remote.length, added.length, e.source));\r\n            remote += added;\r\n            skip = 0;\r\n        }\r\n        else if (e.op === 'removerange') {\r\n            // Delete a number of values by skipping\r\n            skip = e.length;\r\n            deletions.push(new range_1.DiffRangeRaw(baseIndex, skip, e.source));\r\n            baseIndex += skip;\r\n        }\r\n        take = Math.max(take, index + skip);\r\n    }\r\n    remote += base.slice(take, base.length);\r\n    if (stringifyPatch) {\r\n        // The remote string should be stringified\r\n        remote = stringify(remote, level);\r\n        // Shift all indices by indentation + one to account for opening quote\r\n        _offsetRanges(level * util_2.JSON_INDENT.length + 1, additions, deletions);\r\n        // Offset ranges by JSON escaping\r\n        _adjustRangesByJSONEscapes(remote, additions);\r\n        _adjustRangesByJSONEscapes(stringify(base, level), deletions);\r\n    }\r\n    return { remote: remote, additions: additions, deletions: deletions };\r\n}\r\nexports.patchString = patchString;\r\n/**\r\n * Patch a stringified object according to the object diff\r\n */\r\nfunction patchStringifiedObject(base, diff, level) {\r\n    let remote = '';\r\n    let additions = [];\r\n    let deletions = [];\r\n    let postfix = ',\\n';\r\n    let baseIndex = 0;\r\n    // Short-circuit if diff is empty\r\n    if (diff === null) {\r\n        return { remote: stringify(base, level),\r\n            additions: additions,\r\n            deletions: deletions };\r\n    }\r\n    // Object is dict. As diff keys should be unique, create map for easy processing\r\n    let helper = new common_1.PatchObjectHelper(base, diff);\r\n    let baseKeys = helper.baseKeys.slice();\r\n    algorithm_1.each(helper.keys(), key => {\r\n        let keyString = _makeKeyString(key, level + 1);\r\n        if (helper.isDiffKey(key)) {\r\n            // Entry has a change\r\n            let e = helper.getDiffEntry(key);\r\n            // Check for valid entry first:\r\n            diffentries_1.validateObjectOp(base, e, baseKeys);\r\n            if (util_1.valueIn(e.op, ['add', 'replace', 'remove'])) {\r\n                // Replace is simply an add + remove, but without modifying keystring\r\n                let isReplace = e.op === 'replace';\r\n                if (e.op === 'add' || e.op === 'replace') {\r\n                    let valr = stringify(e.value, level + 1, false) +\r\n                        postfix;\r\n                    let start = remote.length;\r\n                    let length = valr.length;\r\n                    // Modify range depending on add or replace:\r\n                    if (isReplace) {\r\n                        start += keyString.length;\r\n                    }\r\n                    else {\r\n                        length += keyString.length;\r\n                    }\r\n                    // Check if postfix should be included or not\r\n                    if (isReplace || !helper.entriesAfterCurrentAddRem()) {\r\n                        length -= postfix.length;\r\n                        if (e.op === 'add') {\r\n                            length += 1; // Newline will still be added\r\n                        }\r\n                    }\r\n                    additions.push(new range_1.DiffRangeRaw(start, length, e.source));\r\n                    remote += keyString + valr;\r\n                }\r\n                if (e.op === 'remove' || e.op === 'replace') {\r\n                    let valb = stringify(base[key], level + 1, false) + postfix;\r\n                    let start = baseIndex;\r\n                    let length = valb.length;\r\n                    // Modify range depending on remove or replace:\r\n                    if (isReplace) {\r\n                        start += keyString.length;\r\n                    }\r\n                    else {\r\n                        length += keyString.length;\r\n                    }\r\n                    // Check if postfix should be included or not\r\n                    if (isReplace || !helper.entriesAfterCurrentAddRem()) {\r\n                        length -= postfix.length;\r\n                        if (e.op === 'remove') {\r\n                            length += 1; // Newline will still be removed\r\n                        }\r\n                    }\r\n                    deletions.push(new range_1.DiffRangeRaw(start, length, e.source));\r\n                    baseIndex += keyString.length + valb.length;\r\n                    baseKeys.splice(baseKeys.indexOf(key), 1);\r\n                }\r\n            }\r\n            else if (e.op === 'patch') {\r\n                let pd = patchStringified(base[key], e.diff, level + 1);\r\n                let valr = pd.remote;\r\n                // Insert key string:\r\n                valr = keyString + valr.slice((level + 1) * util_2.JSON_INDENT.length) +\r\n                    postfix;\r\n                let offset = remote.length + keyString.length -\r\n                    (level + 1) * util_2.JSON_INDENT.length;\r\n                _offsetRanges(offset, pd.additions, pd.deletions);\r\n                remote += valr;\r\n                additions = additions.concat(pd.additions);\r\n                deletions = deletions.concat(pd.deletions);\r\n                baseIndex += stringify(base[key], level + 1, false).length +\r\n                    keyString.length + postfix.length;\r\n                baseKeys.splice(baseKeys.indexOf(key), 1);\r\n            }\r\n        }\r\n        else {\r\n            // Entry unchanged\r\n            let val = keyString + stringify(base[key], level + 1, false) + postfix;\r\n            remote += val;\r\n            baseIndex += val.length;\r\n        }\r\n    });\r\n    // Stringify correctly\r\n    if (remote.slice(remote.length - postfix.length) === postfix) {\r\n        remote = remote.slice(0, remote.length - postfix.length);\r\n    }\r\n    let indent = util_1.repeatString(util_2.JSON_INDENT, level);\r\n    remote = indent + '{\\n' + remote + '\\n' + indent + '}';\r\n    _offsetRanges(indent.length + 2, additions, deletions);\r\n    return { remote: remote, additions: additions, deletions: deletions };\r\n}\r\n/**\r\n * Patch a stringified list according to the list diff\r\n */\r\nfunction patchStringifiedList(base, diff, level) {\r\n    let remote = '';\r\n    let additions = [];\r\n    let deletions = [];\r\n    let baseIndex = 0; // Position in base string\r\n    let postfix = ',\\n';\r\n    // Short-circuit if diff is empty\r\n    if (diff === null) {\r\n        return { remote: stringify(base, level),\r\n            additions: additions,\r\n            deletions: deletions };\r\n    }\r\n    // Index into obj, the next item to take unless diff says otherwise\r\n    let take = 0;\r\n    let skip = 0;\r\n    for (let e of diff) {\r\n        // Check for valid entry first:\r\n        diffentries_1.validateSequenceOp(base, e);\r\n        let index = e.key;\r\n        // Take values from obj not mentioned in diff, up to not including index\r\n        for (; index > take; take++) {\r\n            let unchanged = stringify(base[take], level + 1) + postfix;\r\n            remote += unchanged;\r\n            baseIndex += unchanged.length;\r\n        }\r\n        if (e.op === 'addrange') {\r\n            // Extend with new values directly\r\n            let val = '';\r\n            for (let v of e.valuelist) {\r\n                val += stringify(v, level + 1) + postfix;\r\n            }\r\n            let difflen = val.length;\r\n            if (index === base.length) {\r\n                difflen -= 1; // No comma if at end\r\n            }\r\n            additions.push(new range_1.DiffRangeRaw(remote.length, difflen, e.source));\r\n            remote += val;\r\n            skip = 0;\r\n        }\r\n        else if (e.op === 'removerange') {\r\n            // Delete a number of values by skipping\r\n            let val = '';\r\n            let len = e.length;\r\n            for (let i = index; i < index + len; i++) {\r\n                val += stringify(base[i], level + 1) + postfix;\r\n            }\r\n            let difflen = val.length;\r\n            if (len + index === base.length) {\r\n                difflen -= 1; // No comma if at end\r\n            }\r\n            deletions.push(new range_1.DiffRangeRaw(baseIndex, difflen, e.source));\r\n            baseIndex += val.length;\r\n            skip = e.length;\r\n        }\r\n        else if (e.op === 'patch') {\r\n            let pd = patchStringified(base[index], e.diff, level + 1);\r\n            skip = 1;\r\n            let val = pd.remote + postfix;\r\n            _offsetRanges(remote.length, pd.additions, pd.deletions);\r\n            additions = additions.concat(pd.additions);\r\n            deletions = deletions.concat(pd.deletions);\r\n            baseIndex += stringify(base[index], level + 1).length;\r\n            remote += val;\r\n        }\r\n        // Skip the specified number of elements, but never decrement take.\r\n        // Note that take can pass index in diffs with repeated +/- on the\r\n        // same index, i.e. [op_remove(index), op_add(index, value)]\r\n        take = Math.max(take, index + skip);\r\n    }\r\n    // Take unchanged values at end\r\n    for (; base.length > take; take++) {\r\n        remote += stringify(base[take], level + 1) + postfix;\r\n    }\r\n    // Stringify correctly\r\n    if (remote.slice(remote.length - postfix.length) === postfix) {\r\n        remote = remote.slice(0, remote.length - postfix.length);\r\n    }\r\n    let indent = util_1.repeatString(util_2.JSON_INDENT, level);\r\n    remote = indent + '[\\n' + remote + '\\n' + indent + ']';\r\n    _offsetRanges(indent.length + 2, additions, deletions);\r\n    return { remote: remote, additions: additions, deletions: deletions };\r\n}\r\n// Utility functions and variables:\r\n/**\r\n * Indent a (multiline) string with `JSON_INDENT` given number of times.\r\n *\r\n * indentFirst controls whether the first line is indented as well.\r\n */\r\nfunction _indent(str, levels, indentFirst) {\r\n    indentFirst = indentFirst !== false;\r\n    let lines = str.split('\\n');\r\n    let ret = new Array(lines.length);\r\n    if (!indentFirst) {\r\n        ret[0] = lines[0];\r\n    }\r\n    for (let i = indentFirst ? 0 : 1; i < lines.length; i++) {\r\n        ret[i] = util_1.repeatString(util_2.JSON_INDENT, levels) + lines[i];\r\n    }\r\n    return ret.join('\\n');\r\n}\r\n/** Make a string for a stringified dict key, with indentation */\r\nfunction _makeKeyString(key, level) {\r\n    return util_1.repeatString(util_2.JSON_INDENT, level) + '\"' + key + '\": ';\r\n}\r\n/** Shift all positions in given ranges by same amount */\r\nfunction _offsetRanges(offset, additions, deletions) {\r\n    for (let a of additions) {\r\n        a.offset(offset);\r\n    }\r\n    for (let d of deletions) {\r\n        d.offset(offset);\r\n    }\r\n}\r\n/**\r\n * Adjust diff ranges to compensate for increased length occupied by characters\r\n * escaped during JSON stringification.\r\n */\r\nfunction _adjustRangesByJSONEscapes(jsonString, ranges) {\r\n    // First find all escaped characters, and expansion coefficients\r\n    let simpleEscapes = [\r\n        '\\\\\\\"', '\\\\\\\\', '\\\\/', '\\\\b', '\\\\f', '\\\\n', '\\\\r', '\\\\t'\r\n    ];\r\n    let surrogateUnicodes = /\\\\uD[89A-Fa-f][0-9a-fA-F]{2}\\\\uD[c-fC-F][0-9a-fA-F]{2}/g;\r\n    // Look for unicodes that are not part of a surrogate:\r\n    let unicodes = /(?!\\\\uD[c-fC-F][0-9a-fA-F]{2})\\\\u(?!D[89A-Fa-f][0-9a-fA-F]{2})\\d{4}/g;\r\n    const SIMPLE_ESCAPE_LENGTH = 2;\r\n    const UNICODE_ESCAPE_LENGTH = 6;\r\n    const SURROGATE_ESCAPE_LENGTH = 12;\r\n    // Equal sized arrays identifying location and expansion\r\n    // factor of each escaped character:\r\n    let indices = [];\r\n    let expansions = [];\r\n    for (let e of simpleEscapes) {\r\n        let len = JSON.parse('\"' + e + '\"').length;\r\n        let i = 0;\r\n        while (1) {\r\n            i = jsonString.indexOf(e, i);\r\n            if (i < 0) {\r\n                break;\r\n            }\r\n            indices.push(i);\r\n            expansions.push(SIMPLE_ESCAPE_LENGTH - len);\r\n            i++;\r\n        }\r\n    }\r\n    let match;\r\n    while ((match = unicodes.exec(jsonString)) !== null) {\r\n        indices.push(match.index);\r\n        expansions.push(UNICODE_ESCAPE_LENGTH -\r\n            JSON.parse('\"' + match[0] + '\"').length);\r\n    }\r\n    while ((match = surrogateUnicodes.exec(jsonString)) !== null) {\r\n        indices.push(match.index);\r\n        expansions.push(SURROGATE_ESCAPE_LENGTH -\r\n            JSON.parse('\"' + match[0] + '\"').length);\r\n    }\r\n    // Now adjust differences\r\n    // TODO: Optimize this algorithm?\r\n    for (let i = 0; i < indices.length; i++) {\r\n        for (let r of ranges) {\r\n            let idx = indices[i];\r\n            let exp = expansions[i];\r\n            if (r.from > idx) {\r\n                r.from += exp;\r\n            }\r\n            if (r.to > idx) {\r\n                r.to += exp;\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=stringified.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FlexLayout = void 0;\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2016, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nconst algorithm_1 = require(\"@lumino/algorithm\");\r\nconst messaging_1 = require(\"@lumino/messaging\");\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\n/**\r\n * The class name added to left-to-right flex layout parents.\r\n */\r\nconst LEFT_TO_RIGHT_CLASS = 'p-mod-left-to-right';\r\n/**\r\n * The class name added to right-to-left flex layout parents.\r\n */\r\nconst RIGHT_TO_LEFT_CLASS = 'p-mod-right-to-left';\r\n/**\r\n * The class name added to top-to-bottom flex layout parents.\r\n */\r\nconst TOP_TO_BOTTOM_CLASS = 'p-mod-top-to-bottom';\r\n/**\r\n * The class name added to bottom-to-top flex layout parents.\r\n */\r\nconst BOTTOM_TO_TOP_CLASS = 'p-mod-bottom-to-top';\r\n/**\r\n * A layout which arranges its widgets in a single row or column.\r\n *\r\n * Use the direction attribute to specify the layout direction.\r\n *\r\n * The sizing and flow of the children can be specified in several ways:\r\n *  - The container level properties `minimumSpacing`,`wrap`,\r\n *    `justifyContent`, `alignItems` and `alignContent`.\r\n *  - The stretching of the children in the layout direction either by:\r\n *    - Setting individual values per widget of grow/shrink/basis by\r\n *      `setGrow`, `setShrink` and `setSizeBasis`.\r\n *    - Using the convenience attributes `evenSizes` or `stretchType`.\r\n *  - Manually by CSS using the flexbox CSS attribute for the classes\r\n *    `p-FlexPanel` and `p-FlexPanel-child`.\r\n */\r\nclass FlexLayout extends widgets_1.PanelLayout {\r\n    /**\r\n     * Construct a new flex layout.\r\n     *\r\n     * @param options - The options for initializing the layout.\r\n     */\r\n    constructor(options = {}) {\r\n        super();\r\n        /**\r\n         * Manage the display order of the widgets via the flexbox\r\n         * attribute `order`, while keeping the internal DOM order\r\n         * intact.\r\n         */\r\n        this.order = null;\r\n        this._wrap = false;\r\n        this._minimumSpacing = 4;\r\n        this._justifyContent = null;\r\n        this._alignItems = null;\r\n        this._alignContent = null;\r\n        this._dirty = false;\r\n        this._direction = 'top-to-bottom';\r\n        this._stretchType = null;\r\n        this._evenSizes = false;\r\n        if (options.direction !== void 0) {\r\n            this._direction = options.direction;\r\n        }\r\n        if (options.minimumSpacing !== void 0) {\r\n            this._minimumSpacing = Private.clampSpacing(options.minimumSpacing);\r\n        }\r\n        if (options.wrap !== void 0) {\r\n            this._wrap = options.wrap;\r\n        }\r\n        if (options.justifyContent !== void 0) {\r\n            this._justifyContent = options.justifyContent;\r\n        }\r\n        if (options.alignItems !== void 0) {\r\n            this._alignItems = options.alignItems;\r\n        }\r\n        if (options.alignContent !== void 0) {\r\n            this._alignContent = options.alignContent;\r\n        }\r\n        if (options.stretchType !== void 0) {\r\n            this._stretchType = options.stretchType;\r\n        }\r\n        if (options.evenSizes !== void 0) {\r\n            this._evenSizes = options.evenSizes;\r\n        }\r\n    }\r\n    /**\r\n     * Get the layout direction for the flex layout.\r\n     */\r\n    get direction() {\r\n        return this._direction;\r\n    }\r\n    /**\r\n     * Set the layout direction for the flex layout.\r\n     */\r\n    set direction(value) {\r\n        if (this._direction === value) {\r\n            return;\r\n        }\r\n        this._direction = value;\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        Private.toggleDirection(this.parent, value);\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * Get the minimum inter-element spacing for the flex layout.\r\n     */\r\n    get minimumSpacing() {\r\n        return this._minimumSpacing;\r\n    }\r\n    /**\r\n     * Set the minimum inter-element spacing for the flex layout.\r\n     */\r\n    set minimumSpacing(value) {\r\n        value = Private.clampSpacing(value);\r\n        if (this._minimumSpacing === value) {\r\n            return;\r\n        }\r\n        this._minimumSpacing = value;\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        this.parent.node.style.flexWrap = value ? 'wrap' : 'nowrap';\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * Whether the layout should wrap its children if they do not all fit in\r\n     * column/row.\r\n     */\r\n    get wrap() {\r\n        return this._wrap;\r\n    }\r\n    set wrap(value) {\r\n        if (this._wrap === value) {\r\n            return;\r\n        }\r\n        this._wrap = value;\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        this.parent.node.style.flexWrap = value ? 'wrap' : 'nowrap';\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * Controls how to align children in the direction of the layout.\r\n     */\r\n    get justifyContent() {\r\n        return this._justifyContent;\r\n    }\r\n    set justifyContent(value) {\r\n        if (this._justifyContent === value) {\r\n            return;\r\n        }\r\n        this._justifyContent = value;\r\n        let flex = Private.translateFlexString(value);\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        this.parent.node.style.justifyContent = flex;\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * Controls how to align children in the direction perpendicular to that\r\n     * of the layout (for a horizontal layout the will be the vertical align,\r\n     * and vice-versa).\r\n     */\r\n    get alignItems() {\r\n        return this._alignItems;\r\n    }\r\n    set alignItems(value) {\r\n        if (this._alignItems === value) {\r\n            return;\r\n        }\r\n        this._alignItems = value;\r\n        let flex = Private.translateFlexString(value);\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        this.parent.node.style.alignItems = flex;\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * If layout is set to wrap, this defines how the wrapped lines will be\r\n     * aligned in relation ro each other.\r\n     */\r\n    get alignContent() {\r\n        return this._alignContent;\r\n    }\r\n    set alignContent(value) {\r\n        if (this._alignContent === value) {\r\n            return;\r\n        }\r\n        this._alignContent = value;\r\n        let flex = Private.translateFlexString(value);\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        this.parent.node.style.alignContent = flex;\r\n        // Setting has no effect unless wrap is true, but\r\n        // check against false to accomodate unset scenario\r\n        // where CSS rules might apply:\r\n        if (this._wrap !== false) {\r\n            this.parent.fit();\r\n        }\r\n    }\r\n    /**\r\n     * Describe how to stretch items to fit into flex panel.\r\n     */\r\n    get stretchType() {\r\n        return this._stretchType;\r\n    }\r\n    set stretchType(value) {\r\n        if (this._stretchType === value) {\r\n            return;\r\n        }\r\n        this._stretchType = value;\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * If set, the free space is distributed such that the\r\n     * children are all the same size. Defaults to `false`.\r\n     *\r\n     * ### Notes\r\n     * Setting this to `true` will make the layout\r\n     * ignore the setting of `stretchType`.\r\n     */\r\n    get evenSizes() {\r\n        return this._evenSizes;\r\n    }\r\n    set evenSizes(value) {\r\n        if (this._evenSizes === value) {\r\n            return;\r\n        }\r\n        this._evenSizes = value;\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * Determine whether direction is a horizontal one\r\n     */\r\n    isHorizontal() {\r\n        return this.direction === 'right-to-left' || this.direction === 'left-to-right';\r\n    }\r\n    /**\r\n     * Determine whether direction is a vertical one\r\n     */\r\n    isVertical() {\r\n        return !this.isHorizontal();\r\n    }\r\n    /**\r\n     * Perform layout initialization which requires the parent widget.\r\n     */\r\n    init() {\r\n        Private.toggleDirection(this.parent, this.direction);\r\n        super.init();\r\n    }\r\n    /**\r\n     * Attach a widget to the parent's DOM node.\r\n     *\r\n     * @param index - The current index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to attach to the parent.\r\n     *\r\n     * #### Notes\r\n     * This is a reimplementation of the superclass method.\r\n     */\r\n    attachWidget(index, widget) {\r\n        // Call super implmentation\r\n        super.attachWidget(index, widget);\r\n        // Set order, if applicable\r\n        if (this.order) {\r\n            algorithm_1.ArrayExt.insert(this.order, index, widget);\r\n        }\r\n        // Post a layout request for the parent widget.\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * Change a widget's display order.\r\n     *\r\n     * @param fromIndex - The previous index of the widget in the layout.\r\n     *\r\n     * @param toIndex - The current index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to move in the parent.\r\n     *\r\n     * #### Notes\r\n     * This is a reimplementation of the superclass method.\r\n     */\r\n    moveWidget(fromIndex, toIndex, widget) {\r\n        if (fromIndex !== toIndex) {\r\n            // Change the order of the widget.\r\n            if (!this.order) {\r\n                this.order = this.widgets.slice();\r\n            }\r\n            algorithm_1.ArrayExt.move(this.order, fromIndex, toIndex);\r\n            this._dirty = true;\r\n        }\r\n        // Post an update request for the parent widget.\r\n        this.parent.update();\r\n    }\r\n    /**\r\n     * Detach a widget from the parent's DOM node.\r\n     *\r\n     * @param index - The previous index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to detach from the parent.\r\n     *\r\n     * #### Notes\r\n     * This is a reimplementation of the superclass method.\r\n     */\r\n    detachWidget(index, widget) {\r\n        // Remove widget from order vector\r\n        if (this.order) {\r\n            let i = 0;\r\n            for (; i < this.order.length; ++i) {\r\n                if (widget === this.order[i]) {\r\n                    algorithm_1.ArrayExt.removeAt(this.order, i);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // Call super implmentation\r\n        super.detachWidget(index, widget);\r\n        // Post a layout request for the parent widget.\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * A message handler invoked on an `'after-show'` message.\r\n     */\r\n    onAfterShow(msg) {\r\n        super.onAfterShow(msg);\r\n        this.parent.update();\r\n    }\r\n    /**\r\n     * A message handler invoked on an `'after-attach'` message.\r\n     */\r\n    onAfterAttach(msg) {\r\n        super.onAfterAttach(msg);\r\n        Private.toggleDirection(this.parent, this._direction);\r\n        let style = this.parent.node.style;\r\n        style.flexWrap = this._wrap ? 'wrap' : 'nowrap';\r\n        style.justifyContent = Private.translateFlexString(this._justifyContent) || '';\r\n        style.alignContent = Private.translateFlexString(this._alignContent) || '';\r\n        style.alignItems = Private.translateFlexString(this._alignItems) || '';\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * A message handler invoked on a `'child-shown'` message.\r\n     */\r\n    onChildShown(msg) {\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * A message handler invoked on a `'child-hidden'` message.\r\n     */\r\n    onChildHidden(msg) {\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * A message handler invoked on a `'resize'` message.\r\n     */\r\n    onResize(msg) {\r\n        if (this.parent.isVisible) {\r\n            this._update();\r\n        }\r\n    }\r\n    /**\r\n     * A message handler invoked on an `'update-request'` message.\r\n     */\r\n    onUpdateRequest(msg) {\r\n        if (this.parent.isVisible) {\r\n            this._update();\r\n        }\r\n    }\r\n    /**\r\n     * A message handler invoked on a `'fit-request'` message.\r\n     */\r\n    onFitRequest(msg) {\r\n        if (this.parent.isAttached) {\r\n            this._fit();\r\n        }\r\n    }\r\n    /**\r\n     * Fit the layout to the total size required by the widgets.\r\n     */\r\n    _fit() {\r\n        // Set the dirty flag to ensure only a single update occurs.\r\n        this._dirty = true;\r\n        // Notify the ancestor that it should fit immediately. This may\r\n        // cause a resize of the parent, fulfilling the required update.\r\n        let ancestor = this.parent.parent;\r\n        if (ancestor) {\r\n            messaging_1.MessageLoop.sendMessage(ancestor, widgets_1.Widget.Msg.FitRequest);\r\n        }\r\n        // If the dirty flag is still set, the parent was not resized.\r\n        // Trigger the required update on the parent widget immediately.\r\n        if (this._dirty) {\r\n            messaging_1.MessageLoop.sendMessage(this.parent, widgets_1.Widget.Msg.UpdateRequest);\r\n        }\r\n    }\r\n    /**\r\n     * Update the layout position and size of the widgets.\r\n     *\r\n     * The parent offset dimensions should be `-1` if unknown.\r\n     */\r\n    _update() {\r\n        // Clear the dirty flag to indicate the update occurred.\r\n        this._dirty = false;\r\n        // Bail early if there are no widgets to layout.\r\n        let widgets = this.order || this.widgets;\r\n        if (widgets.length === 0) {\r\n            return;\r\n        }\r\n        // Set spacing by margins\r\n        let spacing = this.minimumSpacing.toString() + 'px';\r\n        if (this.isHorizontal()) {\r\n            for (let i = 0; i < widgets.length - 1; ++i) {\r\n                widgets[i].node.style.marginRight = spacing;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < widgets.length - 1; ++i) {\r\n                widgets[i].node.style.marginBottom = spacing;\r\n            }\r\n        }\r\n        // Update stretch styles if set\r\n        if (this._evenSizes || this.stretchType) {\r\n            let basis = null;\r\n            let grow = null;\r\n            let shrink = null;\r\n            if (this._evenSizes) {\r\n                basis = 0;\r\n                grow = 1;\r\n            }\r\n            else {\r\n                switch (this._stretchType) {\r\n                    case 'grow':\r\n                        // Allow items to grow from default size\r\n                        grow = 1;\r\n                        shrink = 0;\r\n                        break;\r\n                    case 'shrink':\r\n                        // Allow items to shrink from default size\r\n                        grow = 0;\r\n                        shrink = 1;\r\n                        break;\r\n                    case 'both':\r\n                        // Both growing and shrinking is allowed.\r\n                        grow = 1;\r\n                        shrink = 1;\r\n                        break;\r\n                    case 'fixed':\r\n                        // Disallow both growing and shrinking.\r\n                        grow = 0;\r\n                        shrink = 0;\r\n                        break;\r\n                    default:\r\n                        throw new TypeError('Invalid stretch type: ' + this._stretchType);\r\n                }\r\n            }\r\n            for (let i = 0; i < widgets.length; ++i) {\r\n                let style = widgets[i].node.style;\r\n                if (basis !== null) {\r\n                    // Can only be 0, so no unit needed\r\n                    style.flexBasis = basis.toString();\r\n                }\r\n                if (grow !== null) {\r\n                    style.flexGrow = grow.toString();\r\n                }\r\n                if (shrink !== null) {\r\n                    style.flexShrink = shrink.toString();\r\n                }\r\n            }\r\n        }\r\n        // Update display order\r\n        for (let i = 0; i < widgets.length; ++i) {\r\n            let widget = widgets[i];\r\n            widget.node.style.order = this.order ? i.toString() : '';\r\n        }\r\n    }\r\n}\r\nexports.FlexLayout = FlexLayout;\r\n/**\r\n * The namespace for the `FlexLayout` class statics.\r\n */\r\n(function (FlexLayout) {\r\n    /**\r\n     * Get the flex-grow number of the widget\r\n     */\r\n    function getGrow(widget) {\r\n        let value = widget.node.style.flexGrow;\r\n        return value ? parseInt(value, 10) : null;\r\n    }\r\n    FlexLayout.getGrow = getGrow;\r\n    /**\r\n     * Set the flex-grow number of the widget\r\n     */\r\n    function setGrow(widget, value, fit = true) {\r\n        widget.node.style.flexGrow = value === null ? '' : value.toString();\r\n        if (fit && widget.parent) {\r\n            widget.parent.fit();\r\n        }\r\n    }\r\n    FlexLayout.setGrow = setGrow;\r\n    /**\r\n     * Get the flex-shrink number of the widget\r\n     */\r\n    function getShrink(widget) {\r\n        let value = widget.node.style.flexShrink;\r\n        return value ? parseInt(value, 10) : null;\r\n    }\r\n    FlexLayout.getShrink = getShrink;\r\n    /**\r\n     * Set the flex-shrink number of the widget\r\n     */\r\n    function setShrink(widget, value, fit = true) {\r\n        widget.node.style.flexShrink = value === null ? '' : value.toString();\r\n        if (fit && widget.parent) {\r\n            widget.parent.fit();\r\n        }\r\n    }\r\n    FlexLayout.setShrink = setShrink;\r\n    /**\r\n     * Get the size basis of the widget.\r\n     */\r\n    function getSizeBasis(widget) {\r\n        let value = widget.node.style.flexBasis;\r\n        if (value === 'auto') {\r\n            return 'auto';\r\n        }\r\n        else {\r\n            return value ? parseInt(value.replace('px', ''), 10) : null;\r\n        }\r\n    }\r\n    FlexLayout.getSizeBasis = getSizeBasis;\r\n    /**\r\n     * Set the size basis of the widget.\r\n     *\r\n     * This is the value used for calculating how to distribute positive\r\n     * (grow) or negatie (shrink) free space in a flex box. The value\r\n     * `'auto'` uses the `width`/`height` field of the box as the basis.\r\n     */\r\n    function setSizeBasis(widget, value, fit = true) {\r\n        if (value === 'auto') {\r\n            widget.node.style.flexBasis = value;\r\n        }\r\n        else if (value === null) {\r\n            widget.node.style.flexBasis = '';\r\n        }\r\n        else {\r\n            widget.node.style.flexBasis = value.toString() + 'px';\r\n        }\r\n        if (fit && widget.parent) {\r\n            widget.parent.fit();\r\n        }\r\n    }\r\n    FlexLayout.setSizeBasis = setSizeBasis;\r\n})(FlexLayout = exports.FlexLayout || (exports.FlexLayout = {}));\r\n/**\r\n * The namespace for the private module data.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * Test whether a direction has horizontal orientation.\r\n     */\r\n    function isHorizontal(dir) {\r\n        return dir === 'left-to-right' || dir === 'right-to-left';\r\n    }\r\n    Private.isHorizontal = isHorizontal;\r\n    function translateFlexString(value) {\r\n        if (value === 'start' || value === 'end') {\r\n            value = 'flex-' + value;\r\n        }\r\n        return value;\r\n    }\r\n    Private.translateFlexString = translateFlexString;\r\n    /**\r\n     * Toggle the CSS direction class for the given widget.\r\n     */\r\n    function toggleDirection(widget, dir) {\r\n        widget.toggleClass(LEFT_TO_RIGHT_CLASS, dir === 'left-to-right');\r\n        widget.toggleClass(RIGHT_TO_LEFT_CLASS, dir === 'right-to-left');\r\n        widget.toggleClass(TOP_TO_BOTTOM_CLASS, dir === 'top-to-bottom');\r\n        widget.toggleClass(BOTTOM_TO_TOP_CLASS, dir === 'bottom-to-top');\r\n    }\r\n    Private.toggleDirection = toggleDirection;\r\n    /**\r\n     * Clamp a spacing value to an integer >= 0.\r\n     */\r\n    function clampSpacing(value) {\r\n        return Math.max(0, Math.floor(value));\r\n    }\r\n    Private.clampSpacing = clampSpacing;\r\n})(Private || (Private = {}));\r\n//# sourceMappingURL=flexlayout.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FlexPanel = void 0;\r\nconst flexlayout_1 = require(\"./flexlayout\");\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\n/**\r\n * The class name added to FlexPanel instances.\r\n */\r\nconst FLEX_PANEL_CLASS = 'p-FlexPanel';\r\n/**\r\n * The class name added to a FlexPanel child.\r\n */\r\nconst CHILD_CLASS = 'p-FlexPanel-child';\r\n/**\r\n * A panel which arranges its widgets in a single row or column.\r\n *\r\n * Use the direction attribute to specify the layout direction.\r\n *\r\n * The sizing and flow of the children can be specified in several ways:\r\n *  - The container level properties `minimumSpacing`,`wrap`,\r\n *    `justifyContent`, `alignItems` and `alignContent`.\r\n *  - The stretching of the children in the layout direction either by:\r\n *    - Setting individual values per widget of grow/shrink/basis by\r\n *      `setGrow`, `setShrink` and `setSizeBasis`.\r\n *    - Using the convenience attributes `evenSizes` or `stretchType`.\r\n *  - Manually by CSS using the flexbox CSS attribute for the classes\r\n *    `p-FlexPanel` and `p-FlexPanel-child`.\r\n *\r\n * #### Notes\r\n * This class provides a convenience wrapper around a [[FlexLayout]].\r\n */\r\nclass FlexPanel extends widgets_1.Panel {\r\n    /**\r\n     * Construct a new flex panel.\r\n     *\r\n     * @param options - The options for initializing the flex panel.\r\n     */\r\n    constructor(options = {}) {\r\n        super({ layout: Private.createLayout(options) });\r\n        if (!options.layout) {\r\n            if (options.minimumSpacing !== void 0) {\r\n                this.minimumSpacing = options.minimumSpacing;\r\n            }\r\n            if (options.direction !== void 0) {\r\n                this.direction = options.direction;\r\n            }\r\n        }\r\n        this.addClass(FLEX_PANEL_CLASS);\r\n    }\r\n    /**\r\n     * The layout direction for the flex panel.\r\n     */\r\n    get direction() {\r\n        return this.layout.direction;\r\n    }\r\n    ;\r\n    set direction(value) {\r\n        this.layout.direction = value;\r\n    }\r\n    /**\r\n     * The minimum inter-element spacing for the flex panel.\r\n     */\r\n    get minimumSpacing() {\r\n        return this.layout.minimumSpacing;\r\n    }\r\n    ;\r\n    set minimumSpacing(value) {\r\n        this.layout.minimumSpacing = value;\r\n    }\r\n    /**\r\n     * Whether the layout should wrap its children if they do not all fit in\r\n     * column/row.\r\n     */\r\n    get wrap() {\r\n        return this.layout.wrap;\r\n    }\r\n    ;\r\n    set wrap(value) {\r\n        this.layout.wrap = value;\r\n    }\r\n    /**\r\n     * Controls how to align children in the direction of the layout.\r\n     */\r\n    get justifyContent() {\r\n        return this.layout.justifyContent;\r\n    }\r\n    ;\r\n    set justifyContent(value) {\r\n        this.layout.justifyContent = value;\r\n    }\r\n    /**\r\n     * Controls how to align children in the direction perpendicular to that\r\n     * of the layout (for a horizontal layout the will be the vertical align,\r\n     * and vice-versa).\r\n     */\r\n    get alignItems() {\r\n        return this.layout.alignItems;\r\n    }\r\n    ;\r\n    set alignItems(value) {\r\n        this.layout.alignItems = value;\r\n    }\r\n    /**\r\n     * If layout is set to wrap, this defines how the wrapped lines will be\r\n     * aligned in relation ro each other.\r\n     */\r\n    get alignContent() {\r\n        return this.layout.alignContent;\r\n    }\r\n    ;\r\n    set alignContent(value) {\r\n        this.layout.alignContent = value;\r\n    }\r\n    /**\r\n     * Describe how to stretch items to fit into flex panel.\r\n     */\r\n    get stretchType() {\r\n        return this.layout.stretchType;\r\n    }\r\n    ;\r\n    set stretchType(value) {\r\n        this.layout.stretchType = value;\r\n    }\r\n    /**\r\n     * If set, the free space is distributed such that the\r\n     * children are all the same size. Defaults to `false`.\r\n     *\r\n     * ### Notes\r\n     * Setting this to `true` will make the layout\r\n     * ignore the setting of `stretchType`.\r\n     */\r\n    get evenSizes() {\r\n        return this.layout.evenSizes;\r\n    }\r\n    ;\r\n    set evenSizes(value) {\r\n        this.layout.evenSizes = value;\r\n    }\r\n    ;\r\n    /**\r\n     * A message handler invoked on a `'child-added'` message.\r\n     */\r\n    onChildAdded(msg) {\r\n        msg.child.addClass(CHILD_CLASS);\r\n    }\r\n    /**\r\n     * A message handler invoked on a `'child-removed'` message.\r\n     */\r\n    onChildRemoved(msg) {\r\n        msg.child.removeClass(CHILD_CLASS);\r\n    }\r\n    /**\r\n     * A message handler invoked on an `'after-attach'` message.\r\n     */\r\n    onAfterAttach(msg) {\r\n        super.onAfterAttach(msg);\r\n        this.fit();\r\n    }\r\n}\r\nexports.FlexPanel = FlexPanel;\r\n/**\r\n * The namespace for the `FlexPanel` class statics.\r\n */\r\n(function (FlexPanel) {\r\n    /**\r\n     * Get the flex panel grow factor for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @returns The flex panel grow factor for the widget.\r\n     */\r\n    function getGrow(widget) {\r\n        return flexlayout_1.FlexLayout.getGrow(widget);\r\n    }\r\n    FlexPanel.getGrow = getGrow;\r\n    /**\r\n     * Set the flex panel grow factor for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @param value - The value for the grow factor.\r\n     */\r\n    function setGrow(widget, value) {\r\n        flexlayout_1.FlexLayout.setGrow(widget, value);\r\n    }\r\n    FlexPanel.setGrow = setGrow;\r\n    /**\r\n     * Get the flex panel shrink factor for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @returns The flex panel shrink factor for the widget.\r\n     */\r\n    function getShrink(widget) {\r\n        return flexlayout_1.FlexLayout.getShrink(widget);\r\n    }\r\n    FlexPanel.getShrink = getShrink;\r\n    /**\r\n     * Set the flex panel shrink factor for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @param value - The value for the shrink factor.\r\n     */\r\n    function setShrink(widget, value) {\r\n        flexlayout_1.FlexLayout.setShrink(widget, value);\r\n    }\r\n    FlexPanel.setShrink = setShrink;\r\n    /**\r\n     * Get the flex panel size basis for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @returns The flex panel size basis for the widget.\r\n     */\r\n    function getSizeBasis(widget) {\r\n        return flexlayout_1.FlexLayout.getSizeBasis(widget);\r\n    }\r\n    FlexPanel.getSizeBasis = getSizeBasis;\r\n    /**\r\n     * Set the flex panel size basis for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @param value - The value for the size basis.\r\n     */\r\n    function setSizeBasis(widget, value) {\r\n        flexlayout_1.FlexLayout.setSizeBasis(widget, value);\r\n    }\r\n    FlexPanel.setSizeBasis = setSizeBasis;\r\n})(FlexPanel = exports.FlexPanel || (exports.FlexPanel = {}));\r\n/**\r\n * The namespace for the private module data.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * Create a flex layout for the given panel options.\r\n     */\r\n    function createLayout(options) {\r\n        return options.layout || new flexlayout_1.FlexLayout(options);\r\n    }\r\n    Private.createLayout = createLayout;\r\n})(Private || (Private = {}));\r\n//# sourceMappingURL=flexpanel.js.map"],"sourceRoot":""}